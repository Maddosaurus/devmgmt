// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include "onvifProxy.h"

namespace staff
{
///////////////////////////////////////////////////////////////////////////////////////////////////////
// enums

std::string& operator<<(std::string& sResult, const ::RotateMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::RotateMode_OFF:
    sResult = "OFF";
    break;
  case ::RotateMode_ON:
    sResult = "ON";
    break;
  case ::RotateMode_AUTO:
    sResult = "AUTO";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::RotateMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::RotateMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::RotateMode& reEnumValue)
{
  if (sParam == "OFF")
  {
    reEnumValue = ::RotateMode_OFF;
  }
  else
  if (sParam == "ON")
  {
    reEnumValue = ::RotateMode_ON;
  }
  else
  if (sParam == "AUTO")
  {
    reEnumValue = ::RotateMode_AUTO;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::RotateMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::RotateMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::VideoEncoding eEnumValue)
{
  switch (eEnumValue)
  {
  case ::VideoEncoding_JPEG:
    sResult = "JPEG";
    break;
  case ::VideoEncoding_MPEG4:
    sResult = "MPEG4";
    break;
  case ::VideoEncoding_H264:
    sResult = "H264";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::VideoEncoding]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::VideoEncoding eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::VideoEncoding& reEnumValue)
{
  if (sParam == "JPEG")
  {
    reEnumValue = ::VideoEncoding_JPEG;
  }
  else
  if (sParam == "MPEG4")
  {
    reEnumValue = ::VideoEncoding_MPEG4;
  }
  else
  if (sParam == "H264")
  {
    reEnumValue = ::VideoEncoding_H264;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::VideoEncoding]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::VideoEncoding& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Mpeg4Profile eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Mpeg4Profile_SP:
    sResult = "SP";
    break;
  case ::Mpeg4Profile_ASP:
    sResult = "ASP";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Mpeg4Profile]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Mpeg4Profile eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Mpeg4Profile& reEnumValue)
{
  if (sParam == "SP")
  {
    reEnumValue = ::Mpeg4Profile_SP;
  }
  else
  if (sParam == "ASP")
  {
    reEnumValue = ::Mpeg4Profile_ASP;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Mpeg4Profile]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Mpeg4Profile& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::H264Profile eEnumValue)
{
  switch (eEnumValue)
  {
  case ::H264Profile_Baseline:
    sResult = "Baseline";
    break;
  case ::H264Profile_Main:
    sResult = "Main";
    break;
  case ::H264Profile_Extended:
    sResult = "Extended";
    break;
  case ::H264Profile_High:
    sResult = "High";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::H264Profile]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::H264Profile eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::H264Profile& reEnumValue)
{
  if (sParam == "Baseline")
  {
    reEnumValue = ::H264Profile_Baseline;
  }
  else
  if (sParam == "Main")
  {
    reEnumValue = ::H264Profile_Main;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::H264Profile_Extended;
  }
  else
  if (sParam == "High")
  {
    reEnumValue = ::H264Profile_High;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::H264Profile]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::H264Profile& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::AudioEncoding eEnumValue)
{
  switch (eEnumValue)
  {
  case ::AudioEncoding_G711:
    sResult = "G711";
    break;
  case ::AudioEncoding_G726:
    sResult = "G726";
    break;
  case ::AudioEncoding_AAC:
    sResult = "AAC";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::AudioEncoding]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::AudioEncoding eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::AudioEncoding& reEnumValue)
{
  if (sParam == "G711")
  {
    reEnumValue = ::AudioEncoding_G711;
  }
  else
  if (sParam == "G726")
  {
    reEnumValue = ::AudioEncoding_G726;
  }
  else
  if (sParam == "AAC")
  {
    reEnumValue = ::AudioEncoding_AAC;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::AudioEncoding]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::AudioEncoding& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::StreamType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::StreamType_RTP_Unicast:
    sResult = "RTP-Unicast";
    break;
  case ::StreamType_RTP_Multicast:
    sResult = "RTP-Multicast";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::StreamType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::StreamType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::StreamType& reEnumValue)
{
  if (sParam == "RTP-Unicast")
  {
    reEnumValue = ::StreamType_RTP_Unicast;
  }
  else
  if (sParam == "RTP-Multicast")
  {
    reEnumValue = ::StreamType_RTP_Multicast;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::StreamType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::StreamType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::TransportProtocol eEnumValue)
{
  switch (eEnumValue)
  {
  case ::TransportProtocol_UDP:
    sResult = "UDP";
    break;
  case ::TransportProtocol_TCP:
    sResult = "TCP";
    break;
  case ::TransportProtocol_RTSP:
    sResult = "RTSP";
    break;
  case ::TransportProtocol_HTTP:
    sResult = "HTTP";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::TransportProtocol]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::TransportProtocol eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::TransportProtocol& reEnumValue)
{
  if (sParam == "UDP")
  {
    reEnumValue = ::TransportProtocol_UDP;
  }
  else
  if (sParam == "TCP")
  {
    reEnumValue = ::TransportProtocol_TCP;
  }
  else
  if (sParam == "RTSP")
  {
    reEnumValue = ::TransportProtocol_RTSP;
  }
  else
  if (sParam == "HTTP")
  {
    reEnumValue = ::TransportProtocol_HTTP;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::TransportProtocol]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::TransportProtocol& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ScopeDefinition eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ScopeDefinition_Fixed:
    sResult = "Fixed";
    break;
  case ::ScopeDefinition_Configurable:
    sResult = "Configurable";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ScopeDefinition]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ScopeDefinition eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ScopeDefinition& reEnumValue)
{
  if (sParam == "Fixed")
  {
    reEnumValue = ::ScopeDefinition_Fixed;
  }
  else
  if (sParam == "Configurable")
  {
    reEnumValue = ::ScopeDefinition_Configurable;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ScopeDefinition]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ScopeDefinition& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::DiscoveryMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::DiscoveryMode_Discoverable:
    sResult = "Discoverable";
    break;
  case ::DiscoveryMode_NonDiscoverable:
    sResult = "NonDiscoverable";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::DiscoveryMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::DiscoveryMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::DiscoveryMode& reEnumValue)
{
  if (sParam == "Discoverable")
  {
    reEnumValue = ::DiscoveryMode_Discoverable;
  }
  else
  if (sParam == "NonDiscoverable")
  {
    reEnumValue = ::DiscoveryMode_NonDiscoverable;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::DiscoveryMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::DiscoveryMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Duplex eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Duplex_Full:
    sResult = "Full";
    break;
  case ::Duplex_Half:
    sResult = "Half";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Duplex]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Duplex eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Duplex& reEnumValue)
{
  if (sParam == "Full")
  {
    reEnumValue = ::Duplex_Full;
  }
  else
  if (sParam == "Half")
  {
    reEnumValue = ::Duplex_Half;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Duplex]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Duplex& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::IPv6DHCPConfiguration eEnumValue)
{
  switch (eEnumValue)
  {
  case ::IPv6DHCPConfiguration_Auto:
    sResult = "Auto";
    break;
  case ::IPv6DHCPConfiguration_Stateful:
    sResult = "Stateful";
    break;
  case ::IPv6DHCPConfiguration_Stateless:
    sResult = "Stateless";
    break;
  case ::IPv6DHCPConfiguration_Off:
    sResult = "Off";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::IPv6DHCPConfiguration]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::IPv6DHCPConfiguration eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::IPv6DHCPConfiguration& reEnumValue)
{
  if (sParam == "Auto")
  {
    reEnumValue = ::IPv6DHCPConfiguration_Auto;
  }
  else
  if (sParam == "Stateful")
  {
    reEnumValue = ::IPv6DHCPConfiguration_Stateful;
  }
  else
  if (sParam == "Stateless")
  {
    reEnumValue = ::IPv6DHCPConfiguration_Stateless;
  }
  else
  if (sParam == "Off")
  {
    reEnumValue = ::IPv6DHCPConfiguration_Off;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::IPv6DHCPConfiguration]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::IPv6DHCPConfiguration& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::NetworkProtocolType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::NetworkProtocolType_HTTP:
    sResult = "HTTP";
    break;
  case ::NetworkProtocolType_HTTPS:
    sResult = "HTTPS";
    break;
  case ::NetworkProtocolType_RTSP:
    sResult = "RTSP";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::NetworkProtocolType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::NetworkProtocolType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::NetworkProtocolType& reEnumValue)
{
  if (sParam == "HTTP")
  {
    reEnumValue = ::NetworkProtocolType_HTTP;
  }
  else
  if (sParam == "HTTPS")
  {
    reEnumValue = ::NetworkProtocolType_HTTPS;
  }
  else
  if (sParam == "RTSP")
  {
    reEnumValue = ::NetworkProtocolType_RTSP;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::NetworkProtocolType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::NetworkProtocolType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::NetworkHostType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::NetworkHostType_IPv4:
    sResult = "IPv4";
    break;
  case ::NetworkHostType_IPv6:
    sResult = "IPv6";
    break;
  case ::NetworkHostType_DNS:
    sResult = "DNS";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::NetworkHostType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::NetworkHostType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::NetworkHostType& reEnumValue)
{
  if (sParam == "IPv4")
  {
    reEnumValue = ::NetworkHostType_IPv4;
  }
  else
  if (sParam == "IPv6")
  {
    reEnumValue = ::NetworkHostType_IPv6;
  }
  else
  if (sParam == "DNS")
  {
    reEnumValue = ::NetworkHostType_DNS;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::NetworkHostType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::NetworkHostType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::IPType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::IPType_IPv4:
    sResult = "IPv4";
    break;
  case ::IPType_IPv6:
    sResult = "IPv6";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::IPType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::IPType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::IPType& reEnumValue)
{
  if (sParam == "IPv4")
  {
    reEnumValue = ::IPType_IPv4;
  }
  else
  if (sParam == "IPv6")
  {
    reEnumValue = ::IPType_IPv6;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::IPType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::IPType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::IPAddressFilterType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::IPAddressFilterType_Allow:
    sResult = "Allow";
    break;
  case ::IPAddressFilterType_Deny:
    sResult = "Deny";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::IPAddressFilterType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::IPAddressFilterType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::IPAddressFilterType& reEnumValue)
{
  if (sParam == "Allow")
  {
    reEnumValue = ::IPAddressFilterType_Allow;
  }
  else
  if (sParam == "Deny")
  {
    reEnumValue = ::IPAddressFilterType_Deny;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::IPAddressFilterType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::IPAddressFilterType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::DynamicDNSType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::DynamicDNSType_NoUpdate:
    sResult = "NoUpdate";
    break;
  case ::DynamicDNSType_ClientUpdates:
    sResult = "ClientUpdates";
    break;
  case ::DynamicDNSType_ServerUpdates:
    sResult = "ServerUpdates";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::DynamicDNSType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::DynamicDNSType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::DynamicDNSType& reEnumValue)
{
  if (sParam == "NoUpdate")
  {
    reEnumValue = ::DynamicDNSType_NoUpdate;
  }
  else
  if (sParam == "ClientUpdates")
  {
    reEnumValue = ::DynamicDNSType_ClientUpdates;
  }
  else
  if (sParam == "ServerUpdates")
  {
    reEnumValue = ::DynamicDNSType_ServerUpdates;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::DynamicDNSType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::DynamicDNSType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Dot11StationMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Dot11StationMode_Ad_hoc:
    sResult = "Ad-hoc";
    break;
  case ::Dot11StationMode_Infrastructure:
    sResult = "Infrastructure";
    break;
  case ::Dot11StationMode_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Dot11StationMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Dot11StationMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Dot11StationMode& reEnumValue)
{
  if (sParam == "Ad-hoc")
  {
    reEnumValue = ::Dot11StationMode_Ad_hoc;
  }
  else
  if (sParam == "Infrastructure")
  {
    reEnumValue = ::Dot11StationMode_Infrastructure;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::Dot11StationMode_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Dot11StationMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Dot11StationMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Dot11SecurityMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Dot11SecurityMode_None:
    sResult = "None";
    break;
  case ::Dot11SecurityMode_WEP:
    sResult = "WEP";
    break;
  case ::Dot11SecurityMode_PSK:
    sResult = "PSK";
    break;
  case ::Dot11SecurityMode_Dot1X:
    sResult = "Dot1X";
    break;
  case ::Dot11SecurityMode_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Dot11SecurityMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Dot11SecurityMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Dot11SecurityMode& reEnumValue)
{
  if (sParam == "None")
  {
    reEnumValue = ::Dot11SecurityMode_None;
  }
  else
  if (sParam == "WEP")
  {
    reEnumValue = ::Dot11SecurityMode_WEP;
  }
  else
  if (sParam == "PSK")
  {
    reEnumValue = ::Dot11SecurityMode_PSK;
  }
  else
  if (sParam == "Dot1X")
  {
    reEnumValue = ::Dot11SecurityMode_Dot1X;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::Dot11SecurityMode_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Dot11SecurityMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Dot11SecurityMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Dot11Cipher eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Dot11Cipher_CCMP:
    sResult = "CCMP";
    break;
  case ::Dot11Cipher_TKIP:
    sResult = "TKIP";
    break;
  case ::Dot11Cipher_Any:
    sResult = "Any";
    break;
  case ::Dot11Cipher_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Dot11Cipher]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Dot11Cipher eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Dot11Cipher& reEnumValue)
{
  if (sParam == "CCMP")
  {
    reEnumValue = ::Dot11Cipher_CCMP;
  }
  else
  if (sParam == "TKIP")
  {
    reEnumValue = ::Dot11Cipher_TKIP;
  }
  else
  if (sParam == "Any")
  {
    reEnumValue = ::Dot11Cipher_Any;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::Dot11Cipher_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Dot11Cipher]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Dot11Cipher& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Dot11SignalStrength eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Dot11SignalStrength_None:
    sResult = "None";
    break;
  case ::Dot11SignalStrength_Very_Bad:
    sResult = "Very Bad";
    break;
  case ::Dot11SignalStrength_Bad:
    sResult = "Bad";
    break;
  case ::Dot11SignalStrength_Good:
    sResult = "Good";
    break;
  case ::Dot11SignalStrength_Very_Good:
    sResult = "Very Good";
    break;
  case ::Dot11SignalStrength_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Dot11SignalStrength]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Dot11SignalStrength eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Dot11SignalStrength& reEnumValue)
{
  if (sParam == "None")
  {
    reEnumValue = ::Dot11SignalStrength_None;
  }
  else
  if (sParam == "Very Bad")
  {
    reEnumValue = ::Dot11SignalStrength_Very_Bad;
  }
  else
  if (sParam == "Bad")
  {
    reEnumValue = ::Dot11SignalStrength_Bad;
  }
  else
  if (sParam == "Good")
  {
    reEnumValue = ::Dot11SignalStrength_Good;
  }
  else
  if (sParam == "Very Good")
  {
    reEnumValue = ::Dot11SignalStrength_Very_Good;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::Dot11SignalStrength_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Dot11SignalStrength]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Dot11SignalStrength& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Dot11AuthAndMangementSuite eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Dot11AuthAndMangementSuite_None:
    sResult = "None";
    break;
  case ::Dot11AuthAndMangementSuite_Dot1X:
    sResult = "Dot1X";
    break;
  case ::Dot11AuthAndMangementSuite_PSK:
    sResult = "PSK";
    break;
  case ::Dot11AuthAndMangementSuite_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Dot11AuthAndMangementSuite]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Dot11AuthAndMangementSuite eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Dot11AuthAndMangementSuite& reEnumValue)
{
  if (sParam == "None")
  {
    reEnumValue = ::Dot11AuthAndMangementSuite_None;
  }
  else
  if (sParam == "Dot1X")
  {
    reEnumValue = ::Dot11AuthAndMangementSuite_Dot1X;
  }
  else
  if (sParam == "PSK")
  {
    reEnumValue = ::Dot11AuthAndMangementSuite_PSK;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::Dot11AuthAndMangementSuite_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Dot11AuthAndMangementSuite]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Dot11AuthAndMangementSuite& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::CapabilityCategory eEnumValue)
{
  switch (eEnumValue)
  {
  case ::CapabilityCategory_All:
    sResult = "All";
    break;
  case ::CapabilityCategory_Analytics:
    sResult = "Analytics";
    break;
  case ::CapabilityCategory_Device:
    sResult = "Device";
    break;
  case ::CapabilityCategory_Events:
    sResult = "Events";
    break;
  case ::CapabilityCategory_Imaging:
    sResult = "Imaging";
    break;
  case ::CapabilityCategory_Media:
    sResult = "Media";
    break;
  case ::CapabilityCategory_PTZ:
    sResult = "PTZ";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::CapabilityCategory]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::CapabilityCategory eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::CapabilityCategory& reEnumValue)
{
  if (sParam == "All")
  {
    reEnumValue = ::CapabilityCategory_All;
  }
  else
  if (sParam == "Analytics")
  {
    reEnumValue = ::CapabilityCategory_Analytics;
  }
  else
  if (sParam == "Device")
  {
    reEnumValue = ::CapabilityCategory_Device;
  }
  else
  if (sParam == "Events")
  {
    reEnumValue = ::CapabilityCategory_Events;
  }
  else
  if (sParam == "Imaging")
  {
    reEnumValue = ::CapabilityCategory_Imaging;
  }
  else
  if (sParam == "Media")
  {
    reEnumValue = ::CapabilityCategory_Media;
  }
  else
  if (sParam == "PTZ")
  {
    reEnumValue = ::CapabilityCategory_PTZ;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::CapabilityCategory]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::CapabilityCategory& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::SystemLogType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::SystemLogType_System:
    sResult = "System";
    break;
  case ::SystemLogType_Access:
    sResult = "Access";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::SystemLogType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::SystemLogType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::SystemLogType& reEnumValue)
{
  if (sParam == "System")
  {
    reEnumValue = ::SystemLogType_System;
  }
  else
  if (sParam == "Access")
  {
    reEnumValue = ::SystemLogType_Access;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::SystemLogType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::SystemLogType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::FactoryDefaultType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::FactoryDefaultType_Hard:
    sResult = "Hard";
    break;
  case ::FactoryDefaultType_Soft:
    sResult = "Soft";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::FactoryDefaultType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::FactoryDefaultType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::FactoryDefaultType& reEnumValue)
{
  if (sParam == "Hard")
  {
    reEnumValue = ::FactoryDefaultType_Hard;
  }
  else
  if (sParam == "Soft")
  {
    reEnumValue = ::FactoryDefaultType_Soft;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::FactoryDefaultType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::FactoryDefaultType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::SetDateTimeType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::SetDateTimeType_Manual:
    sResult = "Manual";
    break;
  case ::SetDateTimeType_NTP:
    sResult = "NTP";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::SetDateTimeType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::SetDateTimeType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::SetDateTimeType& reEnumValue)
{
  if (sParam == "Manual")
  {
    reEnumValue = ::SetDateTimeType_Manual;
  }
  else
  if (sParam == "NTP")
  {
    reEnumValue = ::SetDateTimeType_NTP;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::SetDateTimeType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::SetDateTimeType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::UserLevel eEnumValue)
{
  switch (eEnumValue)
  {
  case ::UserLevel_Administrator:
    sResult = "Administrator";
    break;
  case ::UserLevel_Operator:
    sResult = "Operator";
    break;
  case ::UserLevel_User:
    sResult = "User";
    break;
  case ::UserLevel_Anonymous:
    sResult = "Anonymous";
    break;
  case ::UserLevel_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::UserLevel]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::UserLevel eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::UserLevel& reEnumValue)
{
  if (sParam == "Administrator")
  {
    reEnumValue = ::UserLevel_Administrator;
  }
  else
  if (sParam == "Operator")
  {
    reEnumValue = ::UserLevel_Operator;
  }
  else
  if (sParam == "User")
  {
    reEnumValue = ::UserLevel_User;
  }
  else
  if (sParam == "Anonymous")
  {
    reEnumValue = ::UserLevel_Anonymous;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::UserLevel_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::UserLevel]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::UserLevel& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::RelayLogicalState eEnumValue)
{
  switch (eEnumValue)
  {
  case ::RelayLogicalState_active:
    sResult = "active";
    break;
  case ::RelayLogicalState_inactive:
    sResult = "inactive";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::RelayLogicalState]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::RelayLogicalState eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::RelayLogicalState& reEnumValue)
{
  if (sParam == "active")
  {
    reEnumValue = ::RelayLogicalState_active;
  }
  else
  if (sParam == "inactive")
  {
    reEnumValue = ::RelayLogicalState_inactive;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::RelayLogicalState]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::RelayLogicalState& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::RelayIdleState eEnumValue)
{
  switch (eEnumValue)
  {
  case ::RelayIdleState_closed:
    sResult = "closed";
    break;
  case ::RelayIdleState_open:
    sResult = "open";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::RelayIdleState]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::RelayIdleState eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::RelayIdleState& reEnumValue)
{
  if (sParam == "closed")
  {
    reEnumValue = ::RelayIdleState_closed;
  }
  else
  if (sParam == "open")
  {
    reEnumValue = ::RelayIdleState_open;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::RelayIdleState]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::RelayIdleState& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::RelayMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::RelayMode_Monostable:
    sResult = "Monostable";
    break;
  case ::RelayMode_Bistable:
    sResult = "Bistable";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::RelayMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::RelayMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::RelayMode& reEnumValue)
{
  if (sParam == "Monostable")
  {
    reEnumValue = ::RelayMode_Monostable;
  }
  else
  if (sParam == "Bistable")
  {
    reEnumValue = ::RelayMode_Bistable;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::RelayMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::RelayMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::EFlipMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::EFlipMode_OFF:
    sResult = "OFF";
    break;
  case ::EFlipMode_ON:
    sResult = "ON";
    break;
  case ::EFlipMode_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::EFlipMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::EFlipMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::EFlipMode& reEnumValue)
{
  if (sParam == "OFF")
  {
    reEnumValue = ::EFlipMode_OFF;
  }
  else
  if (sParam == "ON")
  {
    reEnumValue = ::EFlipMode_ON;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::EFlipMode_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::EFlipMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::EFlipMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ReverseMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ReverseMode_OFF:
    sResult = "OFF";
    break;
  case ::ReverseMode_ON:
    sResult = "ON";
    break;
  case ::ReverseMode_AUTO:
    sResult = "AUTO";
    break;
  case ::ReverseMode_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ReverseMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ReverseMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ReverseMode& reEnumValue)
{
  if (sParam == "OFF")
  {
    reEnumValue = ::ReverseMode_OFF;
  }
  else
  if (sParam == "ON")
  {
    reEnumValue = ::ReverseMode_ON;
  }
  else
  if (sParam == "AUTO")
  {
    reEnumValue = ::ReverseMode_AUTO;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::ReverseMode_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ReverseMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ReverseMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::MoveStatus eEnumValue)
{
  switch (eEnumValue)
  {
  case ::MoveStatus_IDLE:
    sResult = "IDLE";
    break;
  case ::MoveStatus_MOVING:
    sResult = "MOVING";
    break;
  case ::MoveStatus_UNKNOWN:
    sResult = "UNKNOWN";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::MoveStatus]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::MoveStatus eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::MoveStatus& reEnumValue)
{
  if (sParam == "IDLE")
  {
    reEnumValue = ::MoveStatus_IDLE;
  }
  else
  if (sParam == "MOVING")
  {
    reEnumValue = ::MoveStatus_MOVING;
  }
  else
  if (sParam == "UNKNOWN")
  {
    reEnumValue = ::MoveStatus_UNKNOWN;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::MoveStatus]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::MoveStatus& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::PTZPresetTourState eEnumValue)
{
  switch (eEnumValue)
  {
  case ::PTZPresetTourState_Idle:
    sResult = "Idle";
    break;
  case ::PTZPresetTourState_Touring:
    sResult = "Touring";
    break;
  case ::PTZPresetTourState_Paused:
    sResult = "Paused";
    break;
  case ::PTZPresetTourState_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::PTZPresetTourState]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::PTZPresetTourState eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::PTZPresetTourState& reEnumValue)
{
  if (sParam == "Idle")
  {
    reEnumValue = ::PTZPresetTourState_Idle;
  }
  else
  if (sParam == "Touring")
  {
    reEnumValue = ::PTZPresetTourState_Touring;
  }
  else
  if (sParam == "Paused")
  {
    reEnumValue = ::PTZPresetTourState_Paused;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::PTZPresetTourState_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::PTZPresetTourState]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::PTZPresetTourState& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::PTZPresetTourDirection eEnumValue)
{
  switch (eEnumValue)
  {
  case ::PTZPresetTourDirection_Forward:
    sResult = "Forward";
    break;
  case ::PTZPresetTourDirection_Backward:
    sResult = "Backward";
    break;
  case ::PTZPresetTourDirection_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::PTZPresetTourDirection]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::PTZPresetTourDirection eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::PTZPresetTourDirection& reEnumValue)
{
  if (sParam == "Forward")
  {
    reEnumValue = ::PTZPresetTourDirection_Forward;
  }
  else
  if (sParam == "Backward")
  {
    reEnumValue = ::PTZPresetTourDirection_Backward;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::PTZPresetTourDirection_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::PTZPresetTourDirection]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::PTZPresetTourDirection& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::PTZPresetTourOperation eEnumValue)
{
  switch (eEnumValue)
  {
  case ::PTZPresetTourOperation_Start:
    sResult = "Start";
    break;
  case ::PTZPresetTourOperation_Stop:
    sResult = "Stop";
    break;
  case ::PTZPresetTourOperation_Pause:
    sResult = "Pause";
    break;
  case ::PTZPresetTourOperation_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::PTZPresetTourOperation]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::PTZPresetTourOperation eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::PTZPresetTourOperation& reEnumValue)
{
  if (sParam == "Start")
  {
    reEnumValue = ::PTZPresetTourOperation_Start;
  }
  else
  if (sParam == "Stop")
  {
    reEnumValue = ::PTZPresetTourOperation_Stop;
  }
  else
  if (sParam == "Pause")
  {
    reEnumValue = ::PTZPresetTourOperation_Pause;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::PTZPresetTourOperation_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::PTZPresetTourOperation]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::PTZPresetTourOperation& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::AutoFocusMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::AutoFocusMode_AUTO:
    sResult = "AUTO";
    break;
  case ::AutoFocusMode_MANUAL:
    sResult = "MANUAL";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::AutoFocusMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::AutoFocusMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::AutoFocusMode& reEnumValue)
{
  if (sParam == "AUTO")
  {
    reEnumValue = ::AutoFocusMode_AUTO;
  }
  else
  if (sParam == "MANUAL")
  {
    reEnumValue = ::AutoFocusMode_MANUAL;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::AutoFocusMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::AutoFocusMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::WideDynamicMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::WideDynamicMode_OFF:
    sResult = "OFF";
    break;
  case ::WideDynamicMode_ON:
    sResult = "ON";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::WideDynamicMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::WideDynamicMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::WideDynamicMode& reEnumValue)
{
  if (sParam == "OFF")
  {
    reEnumValue = ::WideDynamicMode_OFF;
  }
  else
  if (sParam == "ON")
  {
    reEnumValue = ::WideDynamicMode_ON;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::WideDynamicMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::WideDynamicMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::BacklightCompensationMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::BacklightCompensationMode_OFF:
    sResult = "OFF";
    break;
  case ::BacklightCompensationMode_ON:
    sResult = "ON";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::BacklightCompensationMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::BacklightCompensationMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::BacklightCompensationMode& reEnumValue)
{
  if (sParam == "OFF")
  {
    reEnumValue = ::BacklightCompensationMode_OFF;
  }
  else
  if (sParam == "ON")
  {
    reEnumValue = ::BacklightCompensationMode_ON;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::BacklightCompensationMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::BacklightCompensationMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ExposurePriority eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ExposurePriority_LowNoise:
    sResult = "LowNoise";
    break;
  case ::ExposurePriority_FrameRate:
    sResult = "FrameRate";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ExposurePriority]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ExposurePriority eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ExposurePriority& reEnumValue)
{
  if (sParam == "LowNoise")
  {
    reEnumValue = ::ExposurePriority_LowNoise;
  }
  else
  if (sParam == "FrameRate")
  {
    reEnumValue = ::ExposurePriority_FrameRate;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ExposurePriority]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ExposurePriority& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ExposureMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ExposureMode_AUTO:
    sResult = "AUTO";
    break;
  case ::ExposureMode_MANUAL:
    sResult = "MANUAL";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ExposureMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ExposureMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ExposureMode& reEnumValue)
{
  if (sParam == "AUTO")
  {
    reEnumValue = ::ExposureMode_AUTO;
  }
  else
  if (sParam == "MANUAL")
  {
    reEnumValue = ::ExposureMode_MANUAL;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ExposureMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ExposureMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Enabled eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Enabled_ENABLED:
    sResult = "ENABLED";
    break;
  case ::Enabled_DISABLED:
    sResult = "DISABLED";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Enabled]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Enabled eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Enabled& reEnumValue)
{
  if (sParam == "ENABLED")
  {
    reEnumValue = ::Enabled_ENABLED;
  }
  else
  if (sParam == "DISABLED")
  {
    reEnumValue = ::Enabled_DISABLED;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Enabled]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Enabled& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::WhiteBalanceMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::WhiteBalanceMode_AUTO:
    sResult = "AUTO";
    break;
  case ::WhiteBalanceMode_MANUAL:
    sResult = "MANUAL";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::WhiteBalanceMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::WhiteBalanceMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::WhiteBalanceMode& reEnumValue)
{
  if (sParam == "AUTO")
  {
    reEnumValue = ::WhiteBalanceMode_AUTO;
  }
  else
  if (sParam == "MANUAL")
  {
    reEnumValue = ::WhiteBalanceMode_MANUAL;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::WhiteBalanceMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::WhiteBalanceMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::IrCutFilterMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::IrCutFilterMode_ON:
    sResult = "ON";
    break;
  case ::IrCutFilterMode_OFF:
    sResult = "OFF";
    break;
  case ::IrCutFilterMode_AUTO:
    sResult = "AUTO";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::IrCutFilterMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::IrCutFilterMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::IrCutFilterMode& reEnumValue)
{
  if (sParam == "ON")
  {
    reEnumValue = ::IrCutFilterMode_ON;
  }
  else
  if (sParam == "OFF")
  {
    reEnumValue = ::IrCutFilterMode_OFF;
  }
  else
  if (sParam == "AUTO")
  {
    reEnumValue = ::IrCutFilterMode_AUTO;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::IrCutFilterMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::IrCutFilterMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ImageStabilizationMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ImageStabilizationMode_OFF:
    sResult = "OFF";
    break;
  case ::ImageStabilizationMode_ON:
    sResult = "ON";
    break;
  case ::ImageStabilizationMode_AUTO:
    sResult = "AUTO";
    break;
  case ::ImageStabilizationMode_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ImageStabilizationMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ImageStabilizationMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ImageStabilizationMode& reEnumValue)
{
  if (sParam == "OFF")
  {
    reEnumValue = ::ImageStabilizationMode_OFF;
  }
  else
  if (sParam == "ON")
  {
    reEnumValue = ::ImageStabilizationMode_ON;
  }
  else
  if (sParam == "AUTO")
  {
    reEnumValue = ::ImageStabilizationMode_AUTO;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::ImageStabilizationMode_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ImageStabilizationMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ImageStabilizationMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::PropertyOperation eEnumValue)
{
  switch (eEnumValue)
  {
  case ::PropertyOperation_Initialized:
    sResult = "Initialized";
    break;
  case ::PropertyOperation_Deleted:
    sResult = "Deleted";
    break;
  case ::PropertyOperation_Changed:
    sResult = "Changed";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::PropertyOperation]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::PropertyOperation eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::PropertyOperation& reEnumValue)
{
  if (sParam == "Initialized")
  {
    reEnumValue = ::PropertyOperation_Initialized;
  }
  else
  if (sParam == "Deleted")
  {
    reEnumValue = ::PropertyOperation_Deleted;
  }
  else
  if (sParam == "Changed")
  {
    reEnumValue = ::PropertyOperation_Changed;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::PropertyOperation]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::PropertyOperation& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::Direction eEnumValue)
{
  switch (eEnumValue)
  {
  case ::Direction_Left:
    sResult = "Left";
    break;
  case ::Direction_Right:
    sResult = "Right";
    break;
  case ::Direction_Any:
    sResult = "Any";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::Direction]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::Direction eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::Direction& reEnumValue)
{
  if (sParam == "Left")
  {
    reEnumValue = ::Direction_Left;
  }
  else
  if (sParam == "Right")
  {
    reEnumValue = ::Direction_Right;
  }
  else
  if (sParam == "Any")
  {
    reEnumValue = ::Direction_Any;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::Direction]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::Direction& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ClassType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ClassType_Animal:
    sResult = "Animal";
    break;
  case ::ClassType_Face:
    sResult = "Face";
    break;
  case ::ClassType_Human:
    sResult = "Human";
    break;
  case ::ClassType_Vehical:
    sResult = "Vehical";
    break;
  case ::ClassType_Other:
    sResult = "Other";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ClassType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ClassType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ClassType& reEnumValue)
{
  if (sParam == "Animal")
  {
    reEnumValue = ::ClassType_Animal;
  }
  else
  if (sParam == "Face")
  {
    reEnumValue = ::ClassType_Face;
  }
  else
  if (sParam == "Human")
  {
    reEnumValue = ::ClassType_Human;
  }
  else
  if (sParam == "Vehical")
  {
    reEnumValue = ::ClassType_Vehical;
  }
  else
  if (sParam == "Other")
  {
    reEnumValue = ::ClassType_Other;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ClassType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ClassType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ReceiverMode eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ReceiverMode_AutoConnect:
    sResult = "AutoConnect";
    break;
  case ::ReceiverMode_AlwaysConnect:
    sResult = "AlwaysConnect";
    break;
  case ::ReceiverMode_NeverConnect:
    sResult = "NeverConnect";
    break;
  case ::ReceiverMode_Unknown:
    sResult = "Unknown";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ReceiverMode]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ReceiverMode eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ReceiverMode& reEnumValue)
{
  if (sParam == "AutoConnect")
  {
    reEnumValue = ::ReceiverMode_AutoConnect;
  }
  else
  if (sParam == "AlwaysConnect")
  {
    reEnumValue = ::ReceiverMode_AlwaysConnect;
  }
  else
  if (sParam == "NeverConnect")
  {
    reEnumValue = ::ReceiverMode_NeverConnect;
  }
  else
  if (sParam == "Unknown")
  {
    reEnumValue = ::ReceiverMode_Unknown;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ReceiverMode]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ReceiverMode& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ReceiverState eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ReceiverState_NotConnected:
    sResult = "NotConnected";
    break;
  case ::ReceiverState_Connecting:
    sResult = "Connecting";
    break;
  case ::ReceiverState_Connected:
    sResult = "Connected";
    break;
  case ::ReceiverState_Unknown:
    sResult = "Unknown";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ReceiverState]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ReceiverState eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ReceiverState& reEnumValue)
{
  if (sParam == "NotConnected")
  {
    reEnumValue = ::ReceiverState_NotConnected;
  }
  else
  if (sParam == "Connecting")
  {
    reEnumValue = ::ReceiverState_Connecting;
  }
  else
  if (sParam == "Connected")
  {
    reEnumValue = ::ReceiverState_Connected;
  }
  else
  if (sParam == "Unknown")
  {
    reEnumValue = ::ReceiverState_Unknown;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ReceiverState]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ReceiverState& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::SearchState eEnumValue)
{
  switch (eEnumValue)
  {
  case ::SearchState_Queued:
    sResult = "Queued";
    break;
  case ::SearchState_Searching:
    sResult = "Searching";
    break;
  case ::SearchState_Completed:
    sResult = "Completed";
    break;
  case ::SearchState_Unknown:
    sResult = "Unknown";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::SearchState]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::SearchState eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::SearchState& reEnumValue)
{
  if (sParam == "Queued")
  {
    reEnumValue = ::SearchState_Queued;
  }
  else
  if (sParam == "Searching")
  {
    reEnumValue = ::SearchState_Searching;
  }
  else
  if (sParam == "Completed")
  {
    reEnumValue = ::SearchState_Completed;
  }
  else
  if (sParam == "Unknown")
  {
    reEnumValue = ::SearchState_Unknown;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::SearchState]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::SearchState& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::RecordingStatus eEnumValue)
{
  switch (eEnumValue)
  {
  case ::RecordingStatus_Initiated:
    sResult = "Initiated";
    break;
  case ::RecordingStatus_Recording:
    sResult = "Recording";
    break;
  case ::RecordingStatus_Stopped:
    sResult = "Stopped";
    break;
  case ::RecordingStatus_Removing:
    sResult = "Removing";
    break;
  case ::RecordingStatus_Removed:
    sResult = "Removed";
    break;
  case ::RecordingStatus_Unknown:
    sResult = "Unknown";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::RecordingStatus]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::RecordingStatus eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::RecordingStatus& reEnumValue)
{
  if (sParam == "Initiated")
  {
    reEnumValue = ::RecordingStatus_Initiated;
  }
  else
  if (sParam == "Recording")
  {
    reEnumValue = ::RecordingStatus_Recording;
  }
  else
  if (sParam == "Stopped")
  {
    reEnumValue = ::RecordingStatus_Stopped;
  }
  else
  if (sParam == "Removing")
  {
    reEnumValue = ::RecordingStatus_Removing;
  }
  else
  if (sParam == "Removed")
  {
    reEnumValue = ::RecordingStatus_Removed;
  }
  else
  if (sParam == "Unknown")
  {
    reEnumValue = ::RecordingStatus_Unknown;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::RecordingStatus]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::RecordingStatus& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::TrackType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::TrackType_Video:
    sResult = "Video";
    break;
  case ::TrackType_Audio:
    sResult = "Audio";
    break;
  case ::TrackType_Metadata:
    sResult = "Metadata";
    break;
  case ::TrackType_Extended:
    sResult = "Extended";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::TrackType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::TrackType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::TrackType& reEnumValue)
{
  if (sParam == "Video")
  {
    reEnumValue = ::TrackType_Video;
  }
  else
  if (sParam == "Audio")
  {
    reEnumValue = ::TrackType_Audio;
  }
  else
  if (sParam == "Metadata")
  {
    reEnumValue = ::TrackType_Metadata;
  }
  else
  if (sParam == "Extended")
  {
    reEnumValue = ::TrackType_Extended;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::TrackType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::TrackType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::ModeOfOperation eEnumValue)
{
  switch (eEnumValue)
  {
  case ::ModeOfOperation_Idle:
    sResult = "Idle";
    break;
  case ::ModeOfOperation_Active:
    sResult = "Active";
    break;
  case ::ModeOfOperation_Unknown:
    sResult = "Unknown";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::ModeOfOperation]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::ModeOfOperation eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::ModeOfOperation& reEnumValue)
{
  if (sParam == "Idle")
  {
    reEnumValue = ::ModeOfOperation_Idle;
  }
  else
  if (sParam == "Active")
  {
    reEnumValue = ::ModeOfOperation_Active;
  }
  else
  if (sParam == "Unknown")
  {
    reEnumValue = ::ModeOfOperation_Unknown;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::ModeOfOperation]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::ModeOfOperation& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators/deserializators

DataObject& operator<<(DataObject& rdoParam, const struct ::DeviceEntity& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("token", rstStruct.token);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DeviceEntity& rstStruct)
{
  rdoParam.GetAttributeValueByName("token", rstStruct.token);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IntRectangle& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("x", rstStruct.x);
  rdoParam.CreateAttribute("y", rstStruct.y);
  rdoParam.CreateAttribute("width", rstStruct.width);
  rdoParam.CreateAttribute("height", rstStruct.height);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IntRectangle& rstStruct)
{
  rdoParam.GetAttributeValueByName("x", rstStruct.x);
  rdoParam.GetAttributeValueByName("y", rstStruct.y);
  rdoParam.GetAttributeValueByName("width", rstStruct.width);
  rdoParam.GetAttributeValueByName("height", rstStruct.height);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IntRange& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Min", rstStruct.Min);
  rdoParam.CreateChild("Max", rstStruct.Max);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IntRange& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Min", rstStruct.Min);
  rdoParam.GetChildValueByLocalName("Max", rstStruct.Max);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IntRectangleRange& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamXRange = rdoParam.CreateChild("XRange");
  tdoParamXRange << rstStruct.XRange;
  staff::DataObject tdoParamYRange = rdoParam.CreateChild("YRange");
  tdoParamYRange << rstStruct.YRange;
  staff::DataObject tdoParamWidthRange = rdoParam.CreateChild("WidthRange");
  tdoParamWidthRange << rstStruct.WidthRange;
  staff::DataObject tdoParamHeightRange = rdoParam.CreateChild("HeightRange");
  tdoParamHeightRange << rstStruct.HeightRange;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IntRectangleRange& rstStruct)
{
  rdoParam.GetChildByLocalName("XRange") >> rstStruct.XRange;
  rdoParam.GetChildByLocalName("YRange") >> rstStruct.YRange;
  rdoParam.GetChildByLocalName("WidthRange") >> rstStruct.WidthRange;
  rdoParam.GetChildByLocalName("HeightRange") >> rstStruct.HeightRange;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FloatRange& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Min", rstStruct.Min);
  rdoParam.CreateChild("Max", rstStruct.Max);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FloatRange& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Min", rstStruct.Min);
  rdoParam.GetChildValueByLocalName("Max", rstStruct.Max);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DurationRange& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Min", rstStruct.Min);
  rdoParam.CreateChild("Max", rstStruct.Max);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DurationRange& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Min", rstStruct.Min);
  rdoParam.GetChildValueByLocalName("Max", rstStruct.Max);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IntList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<int>::const_iterator itItem = (rstStruct.Items).begin(), itItemEnd = (rstStruct.Items).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("Items", (*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IntList& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Items")
    {
      int tItem = 0;
      tdoItem.GetValue(tItem);
      (rstStruct.Items).push_back(tItem);
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FloatList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<float>::const_iterator itItem = (rstStruct.Items).begin(), itItemEnd = (rstStruct.Items).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("Items", (*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FloatList& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Items")
    {
      float tItem = 0;
      tdoItem.GetValue(tItem);
      (rstStruct.Items).push_back(tItem);
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnyHolder& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnyHolder& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoResolution& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Width", rstStruct.Width);
  rdoParam.CreateChild("Height", rstStruct.Height);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoResolution& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Width", rstStruct.Width);
  rdoParam.GetChildValueByLocalName("Height", rstStruct.Height);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSource& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::DeviceEntity& >(rstStruct);

  rdoParam.CreateChild("Framerate", rstStruct.Framerate);
  staff::DataObject tdoParamResolution = rdoParam.CreateChild("Resolution");
  tdoParamResolution << rstStruct.Resolution;
  if (!(rstStruct.Imaging).IsNull()) // Optional
  {
    staff::DataObject tdoParamImaging = rdoParam.CreateChild("Imaging");
    tdoParamImaging << *rstStruct.Imaging;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSource& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::DeviceEntity& >(rstStruct);

  rdoParam.GetChildValueByLocalName("Framerate", rstStruct.Framerate);
  rdoParam.GetChildByLocalName("Resolution") >> rstStruct.Resolution;
  const staff::DataObject& rdoParamImaging = rdoParam.GetChildByLocalNameOpt("Imaging");
  if (!rdoParamImaging.IsNull()) // optional
  {
    rdoParamImaging >> *rstStruct.Imaging;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingSettings& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.BacklightCompensation).IsNull()) // Optional
  {
    staff::DataObject tdoParamBacklightCompensation = rdoParam.CreateChild("BacklightCompensation");
    tdoParamBacklightCompensation << *rstStruct.BacklightCompensation;
  }
  if (!(rstStruct.Brightness).IsNull()) // Optional
  {
    rdoParam.CreateChild("Brightness", *rstStruct.Brightness);
  }
  if (!(rstStruct.ColorSaturation).IsNull()) // Optional
  {
    rdoParam.CreateChild("ColorSaturation", *rstStruct.ColorSaturation);
  }
  if (!(rstStruct.Contrast).IsNull()) // Optional
  {
    rdoParam.CreateChild("Contrast", *rstStruct.Contrast);
  }
  if (!(rstStruct.Exposure).IsNull()) // Optional
  {
    staff::DataObject tdoParamExposure = rdoParam.CreateChild("Exposure");
    tdoParamExposure << *rstStruct.Exposure;
  }
  if (!(rstStruct.Focus).IsNull()) // Optional
  {
    staff::DataObject tdoParamFocus = rdoParam.CreateChild("Focus");
    tdoParamFocus << *rstStruct.Focus;
  }
  if (!(rstStruct.IrCutFilter).IsNull()) // Optional
  {
    staff::DataObject tdoParamIrCutFilter = rdoParam.CreateChild("IrCutFilter");
    tdoParamIrCutFilter << *rstStruct.IrCutFilter;
  }
  if (!(rstStruct.Sharpness).IsNull()) // Optional
  {
    rdoParam.CreateChild("Sharpness", *rstStruct.Sharpness);
  }
  if (!(rstStruct.WideDynamicRange).IsNull()) // Optional
  {
    staff::DataObject tdoParamWideDynamicRange = rdoParam.CreateChild("WideDynamicRange");
    tdoParamWideDynamicRange << *rstStruct.WideDynamicRange;
  }
  if (!(rstStruct.WhiteBalance).IsNull()) // Optional
  {
    staff::DataObject tdoParamWhiteBalance = rdoParam.CreateChild("WhiteBalance");
    tdoParamWhiteBalance << *rstStruct.WhiteBalance;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingSettings& rstStruct)
{
  const staff::DataObject& rdoParamBacklightCompensation = rdoParam.GetChildByLocalNameOpt("BacklightCompensation");
  if (!rdoParamBacklightCompensation.IsNull()) // optional
  {
    rdoParamBacklightCompensation >> *rstStruct.BacklightCompensation;
  }
  const staff::DataObject& rdoParamBrightness = rdoParam.GetChildByLocalNameOpt("Brightness");
  if (!rdoParamBrightness.IsNull()) // optional
  {
    rdoParamBrightness.GetValue(*rstStruct.Brightness);
  }
  const staff::DataObject& rdoParamColorSaturation = rdoParam.GetChildByLocalNameOpt("ColorSaturation");
  if (!rdoParamColorSaturation.IsNull()) // optional
  {
    rdoParamColorSaturation.GetValue(*rstStruct.ColorSaturation);
  }
  const staff::DataObject& rdoParamContrast = rdoParam.GetChildByLocalNameOpt("Contrast");
  if (!rdoParamContrast.IsNull()) // optional
  {
    rdoParamContrast.GetValue(*rstStruct.Contrast);
  }
  const staff::DataObject& rdoParamExposure = rdoParam.GetChildByLocalNameOpt("Exposure");
  if (!rdoParamExposure.IsNull()) // optional
  {
    rdoParamExposure >> *rstStruct.Exposure;
  }
  const staff::DataObject& rdoParamFocus = rdoParam.GetChildByLocalNameOpt("Focus");
  if (!rdoParamFocus.IsNull()) // optional
  {
    rdoParamFocus >> *rstStruct.Focus;
  }
  const staff::DataObject& rdoParamIrCutFilter = rdoParam.GetChildByLocalNameOpt("IrCutFilter");
  if (!rdoParamIrCutFilter.IsNull()) // optional
  {
    rdoParamIrCutFilter >> *rstStruct.IrCutFilter;
  }
  const staff::DataObject& rdoParamSharpness = rdoParam.GetChildByLocalNameOpt("Sharpness");
  if (!rdoParamSharpness.IsNull()) // optional
  {
    rdoParamSharpness.GetValue(*rstStruct.Sharpness);
  }
  const staff::DataObject& rdoParamWideDynamicRange = rdoParam.GetChildByLocalNameOpt("WideDynamicRange");
  if (!rdoParamWideDynamicRange.IsNull()) // optional
  {
    rdoParamWideDynamicRange >> *rstStruct.WideDynamicRange;
  }
  const staff::DataObject& rdoParamWhiteBalance = rdoParam.GetChildByLocalNameOpt("WhiteBalance");
  if (!rdoParamWhiteBalance.IsNull()) // optional
  {
    rdoParamWhiteBalance >> *rstStruct.WhiteBalance;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::BacklightCompensation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  rdoParam.CreateChild("Level", rstStruct.Level);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::BacklightCompensation& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  rdoParam.GetChildValueByLocalName("Level", rstStruct.Level);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Rectangle& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.bottom).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("bottom", *rstStruct.bottom);
  }
  if (!(rstStruct.top).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("top", *rstStruct.top);
  }
  if (!(rstStruct.right).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("right", *rstStruct.right);
  }
  if (!(rstStruct.left).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("left", *rstStruct.left);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Rectangle& rstStruct)
{
  const staff::Attribute& rAttrbottom = rdoParam.GetAttributeByLocalNameOpt("bottom");
  if (!rAttrbottom.IsNull()) // optional attribute
  {
    rAttrbottom.GetValue(*rstStruct.bottom);
  }
  const staff::Attribute& rAttrtop = rdoParam.GetAttributeByLocalNameOpt("top");
  if (!rAttrtop.IsNull()) // optional attribute
  {
    rAttrtop.GetValue(*rstStruct.top);
  }
  const staff::Attribute& rAttrright = rdoParam.GetAttributeByLocalNameOpt("right");
  if (!rAttrright.IsNull()) // optional attribute
  {
    rAttrright.GetValue(*rstStruct.right);
  }
  const staff::Attribute& rAttrleft = rdoParam.GetAttributeByLocalNameOpt("left");
  if (!rAttrleft.IsNull()) // optional attribute
  {
    rAttrleft.GetValue(*rstStruct.left);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Exposure& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  staff::DataObject tdoParamPriority = rdoParam.CreateChild("Priority");
  tdoParamPriority << rstStruct.Priority;
  staff::DataObject tdoParamWindow = rdoParam.CreateChild("Window");
  tdoParamWindow << rstStruct.Window;
  rdoParam.CreateChild("MinExposureTime", rstStruct.MinExposureTime);
  rdoParam.CreateChild("MaxExposureTime", rstStruct.MaxExposureTime);
  rdoParam.CreateChild("MinGain", rstStruct.MinGain);
  rdoParam.CreateChild("MaxGain", rstStruct.MaxGain);
  rdoParam.CreateChild("MinIris", rstStruct.MinIris);
  rdoParam.CreateChild("MaxIris", rstStruct.MaxIris);
  rdoParam.CreateChild("ExposureTime", rstStruct.ExposureTime);
  rdoParam.CreateChild("Gain", rstStruct.Gain);
  rdoParam.CreateChild("Iris", rstStruct.Iris);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Exposure& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  rdoParam.GetChildByLocalName("Priority") >> rstStruct.Priority;
  rdoParam.GetChildByLocalName("Window") >> rstStruct.Window;
  rdoParam.GetChildValueByLocalName("MinExposureTime", rstStruct.MinExposureTime);
  rdoParam.GetChildValueByLocalName("MaxExposureTime", rstStruct.MaxExposureTime);
  rdoParam.GetChildValueByLocalName("MinGain", rstStruct.MinGain);
  rdoParam.GetChildValueByLocalName("MaxGain", rstStruct.MaxGain);
  rdoParam.GetChildValueByLocalName("MinIris", rstStruct.MinIris);
  rdoParam.GetChildValueByLocalName("MaxIris", rstStruct.MaxIris);
  rdoParam.GetChildValueByLocalName("ExposureTime", rstStruct.ExposureTime);
  rdoParam.GetChildValueByLocalName("Gain", rstStruct.Gain);
  rdoParam.GetChildValueByLocalName("Iris", rstStruct.Iris);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamAutoFocusMode = rdoParam.CreateChild("AutoFocusMode");
  tdoParamAutoFocusMode << rstStruct.AutoFocusMode;
  rdoParam.CreateChild("DefaultSpeed", rstStruct.DefaultSpeed);
  rdoParam.CreateChild("NearLimit", rstStruct.NearLimit);
  rdoParam.CreateChild("FarLimit", rstStruct.FarLimit);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("AutoFocusMode") >> rstStruct.AutoFocusMode;
  rdoParam.GetChildValueByLocalName("DefaultSpeed", rstStruct.DefaultSpeed);
  rdoParam.GetChildValueByLocalName("NearLimit", rstStruct.NearLimit);
  rdoParam.GetChildValueByLocalName("FarLimit", rstStruct.FarLimit);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WideDynamicRange& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  rdoParam.CreateChild("Level", rstStruct.Level);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WideDynamicRange& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  rdoParam.GetChildValueByLocalName("Level", rstStruct.Level);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WhiteBalance& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  rdoParam.CreateChild("CrGain", rstStruct.CrGain);
  rdoParam.CreateChild("CbGain", rstStruct.CbGain);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WhiteBalance& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  rdoParam.GetChildValueByLocalName("CrGain", rstStruct.CrGain);
  rdoParam.GetChildValueByLocalName("CbGain", rstStruct.CbGain);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingSettingsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingSettingsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSourceExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.Imaging).IsNull()) // Optional
  {
    staff::DataObject tdoParamImaging = rdoParam.CreateChild("Imaging");
    tdoParamImaging << *rstStruct.Imaging;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSourceExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamImaging = rdoParam.GetChildByLocalNameOpt("Imaging");
  if (!rdoParamImaging.IsNull()) // optional
  {
    rdoParamImaging >> *rstStruct.Imaging;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingSettings20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.BacklightCompensation).IsNull()) // Optional
  {
    staff::DataObject tdoParamBacklightCompensation = rdoParam.CreateChild("BacklightCompensation");
    tdoParamBacklightCompensation << *rstStruct.BacklightCompensation;
  }
  if (!(rstStruct.Brightness).IsNull()) // Optional
  {
    rdoParam.CreateChild("Brightness", *rstStruct.Brightness);
  }
  if (!(rstStruct.ColorSaturation).IsNull()) // Optional
  {
    rdoParam.CreateChild("ColorSaturation", *rstStruct.ColorSaturation);
  }
  if (!(rstStruct.Contrast).IsNull()) // Optional
  {
    rdoParam.CreateChild("Contrast", *rstStruct.Contrast);
  }
  if (!(rstStruct.Exposure).IsNull()) // Optional
  {
    staff::DataObject tdoParamExposure = rdoParam.CreateChild("Exposure");
    tdoParamExposure << *rstStruct.Exposure;
  }
  if (!(rstStruct.Focus).IsNull()) // Optional
  {
    staff::DataObject tdoParamFocus = rdoParam.CreateChild("Focus");
    tdoParamFocus << *rstStruct.Focus;
  }
  if (!(rstStruct.IrCutFilter).IsNull()) // Optional
  {
    staff::DataObject tdoParamIrCutFilter = rdoParam.CreateChild("IrCutFilter");
    tdoParamIrCutFilter << *rstStruct.IrCutFilter;
  }
  if (!(rstStruct.Sharpness).IsNull()) // Optional
  {
    rdoParam.CreateChild("Sharpness", *rstStruct.Sharpness);
  }
  if (!(rstStruct.WideDynamicRange).IsNull()) // Optional
  {
    staff::DataObject tdoParamWideDynamicRange = rdoParam.CreateChild("WideDynamicRange");
    tdoParamWideDynamicRange << *rstStruct.WideDynamicRange;
  }
  if (!(rstStruct.WhiteBalance).IsNull()) // Optional
  {
    staff::DataObject tdoParamWhiteBalance = rdoParam.CreateChild("WhiteBalance");
    tdoParamWhiteBalance << *rstStruct.WhiteBalance;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingSettings20& rstStruct)
{
  const staff::DataObject& rdoParamBacklightCompensation = rdoParam.GetChildByLocalNameOpt("BacklightCompensation");
  if (!rdoParamBacklightCompensation.IsNull()) // optional
  {
    rdoParamBacklightCompensation >> *rstStruct.BacklightCompensation;
  }
  const staff::DataObject& rdoParamBrightness = rdoParam.GetChildByLocalNameOpt("Brightness");
  if (!rdoParamBrightness.IsNull()) // optional
  {
    rdoParamBrightness.GetValue(*rstStruct.Brightness);
  }
  const staff::DataObject& rdoParamColorSaturation = rdoParam.GetChildByLocalNameOpt("ColorSaturation");
  if (!rdoParamColorSaturation.IsNull()) // optional
  {
    rdoParamColorSaturation.GetValue(*rstStruct.ColorSaturation);
  }
  const staff::DataObject& rdoParamContrast = rdoParam.GetChildByLocalNameOpt("Contrast");
  if (!rdoParamContrast.IsNull()) // optional
  {
    rdoParamContrast.GetValue(*rstStruct.Contrast);
  }
  const staff::DataObject& rdoParamExposure = rdoParam.GetChildByLocalNameOpt("Exposure");
  if (!rdoParamExposure.IsNull()) // optional
  {
    rdoParamExposure >> *rstStruct.Exposure;
  }
  const staff::DataObject& rdoParamFocus = rdoParam.GetChildByLocalNameOpt("Focus");
  if (!rdoParamFocus.IsNull()) // optional
  {
    rdoParamFocus >> *rstStruct.Focus;
  }
  const staff::DataObject& rdoParamIrCutFilter = rdoParam.GetChildByLocalNameOpt("IrCutFilter");
  if (!rdoParamIrCutFilter.IsNull()) // optional
  {
    rdoParamIrCutFilter >> *rstStruct.IrCutFilter;
  }
  const staff::DataObject& rdoParamSharpness = rdoParam.GetChildByLocalNameOpt("Sharpness");
  if (!rdoParamSharpness.IsNull()) // optional
  {
    rdoParamSharpness.GetValue(*rstStruct.Sharpness);
  }
  const staff::DataObject& rdoParamWideDynamicRange = rdoParam.GetChildByLocalNameOpt("WideDynamicRange");
  if (!rdoParamWideDynamicRange.IsNull()) // optional
  {
    rdoParamWideDynamicRange >> *rstStruct.WideDynamicRange;
  }
  const staff::DataObject& rdoParamWhiteBalance = rdoParam.GetChildByLocalNameOpt("WhiteBalance");
  if (!rdoParamWhiteBalance.IsNull()) // optional
  {
    rdoParamWhiteBalance >> *rstStruct.WhiteBalance;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::BacklightCompensation20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  if (!(rstStruct.Level).IsNull()) // Optional
  {
    rdoParam.CreateChild("Level", *rstStruct.Level);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::BacklightCompensation20& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  const staff::DataObject& rdoParamLevel = rdoParam.GetChildByLocalNameOpt("Level");
  if (!rdoParamLevel.IsNull()) // optional
  {
    rdoParamLevel.GetValue(*rstStruct.Level);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Exposure20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  if (!(rstStruct.Priority).IsNull()) // Optional
  {
    staff::DataObject tdoParamPriority = rdoParam.CreateChild("Priority");
    tdoParamPriority << *rstStruct.Priority;
  }
  if (!(rstStruct.Window).IsNull()) // Optional
  {
    staff::DataObject tdoParamWindow = rdoParam.CreateChild("Window");
    tdoParamWindow << *rstStruct.Window;
  }
  if (!(rstStruct.MinExposureTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("MinExposureTime", *rstStruct.MinExposureTime);
  }
  if (!(rstStruct.MaxExposureTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("MaxExposureTime", *rstStruct.MaxExposureTime);
  }
  if (!(rstStruct.MinGain).IsNull()) // Optional
  {
    rdoParam.CreateChild("MinGain", *rstStruct.MinGain);
  }
  if (!(rstStruct.MaxGain).IsNull()) // Optional
  {
    rdoParam.CreateChild("MaxGain", *rstStruct.MaxGain);
  }
  if (!(rstStruct.MinIris).IsNull()) // Optional
  {
    rdoParam.CreateChild("MinIris", *rstStruct.MinIris);
  }
  if (!(rstStruct.MaxIris).IsNull()) // Optional
  {
    rdoParam.CreateChild("MaxIris", *rstStruct.MaxIris);
  }
  if (!(rstStruct.ExposureTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("ExposureTime", *rstStruct.ExposureTime);
  }
  if (!(rstStruct.Gain).IsNull()) // Optional
  {
    rdoParam.CreateChild("Gain", *rstStruct.Gain);
  }
  if (!(rstStruct.Iris).IsNull()) // Optional
  {
    rdoParam.CreateChild("Iris", *rstStruct.Iris);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Exposure20& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  const staff::DataObject& rdoParamPriority = rdoParam.GetChildByLocalNameOpt("Priority");
  if (!rdoParamPriority.IsNull()) // optional
  {
    rdoParamPriority >> *rstStruct.Priority;
  }
  const staff::DataObject& rdoParamWindow = rdoParam.GetChildByLocalNameOpt("Window");
  if (!rdoParamWindow.IsNull()) // optional
  {
    rdoParamWindow >> *rstStruct.Window;
  }
  const staff::DataObject& rdoParamMinExposureTime = rdoParam.GetChildByLocalNameOpt("MinExposureTime");
  if (!rdoParamMinExposureTime.IsNull()) // optional
  {
    rdoParamMinExposureTime.GetValue(*rstStruct.MinExposureTime);
  }
  const staff::DataObject& rdoParamMaxExposureTime = rdoParam.GetChildByLocalNameOpt("MaxExposureTime");
  if (!rdoParamMaxExposureTime.IsNull()) // optional
  {
    rdoParamMaxExposureTime.GetValue(*rstStruct.MaxExposureTime);
  }
  const staff::DataObject& rdoParamMinGain = rdoParam.GetChildByLocalNameOpt("MinGain");
  if (!rdoParamMinGain.IsNull()) // optional
  {
    rdoParamMinGain.GetValue(*rstStruct.MinGain);
  }
  const staff::DataObject& rdoParamMaxGain = rdoParam.GetChildByLocalNameOpt("MaxGain");
  if (!rdoParamMaxGain.IsNull()) // optional
  {
    rdoParamMaxGain.GetValue(*rstStruct.MaxGain);
  }
  const staff::DataObject& rdoParamMinIris = rdoParam.GetChildByLocalNameOpt("MinIris");
  if (!rdoParamMinIris.IsNull()) // optional
  {
    rdoParamMinIris.GetValue(*rstStruct.MinIris);
  }
  const staff::DataObject& rdoParamMaxIris = rdoParam.GetChildByLocalNameOpt("MaxIris");
  if (!rdoParamMaxIris.IsNull()) // optional
  {
    rdoParamMaxIris.GetValue(*rstStruct.MaxIris);
  }
  const staff::DataObject& rdoParamExposureTime = rdoParam.GetChildByLocalNameOpt("ExposureTime");
  if (!rdoParamExposureTime.IsNull()) // optional
  {
    rdoParamExposureTime.GetValue(*rstStruct.ExposureTime);
  }
  const staff::DataObject& rdoParamGain = rdoParam.GetChildByLocalNameOpt("Gain");
  if (!rdoParamGain.IsNull()) // optional
  {
    rdoParamGain.GetValue(*rstStruct.Gain);
  }
  const staff::DataObject& rdoParamIris = rdoParam.GetChildByLocalNameOpt("Iris");
  if (!rdoParamIris.IsNull()) // optional
  {
    rdoParamIris.GetValue(*rstStruct.Iris);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusConfiguration20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamAutoFocusMode = rdoParam.CreateChild("AutoFocusMode");
  tdoParamAutoFocusMode << rstStruct.AutoFocusMode;
  if (!(rstStruct.DefaultSpeed).IsNull()) // Optional
  {
    rdoParam.CreateChild("DefaultSpeed", *rstStruct.DefaultSpeed);
  }
  if (!(rstStruct.NearLimit).IsNull()) // Optional
  {
    rdoParam.CreateChild("NearLimit", *rstStruct.NearLimit);
  }
  if (!(rstStruct.FarLimit).IsNull()) // Optional
  {
    rdoParam.CreateChild("FarLimit", *rstStruct.FarLimit);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusConfiguration20& rstStruct)
{
  rdoParam.GetChildByLocalName("AutoFocusMode") >> rstStruct.AutoFocusMode;
  const staff::DataObject& rdoParamDefaultSpeed = rdoParam.GetChildByLocalNameOpt("DefaultSpeed");
  if (!rdoParamDefaultSpeed.IsNull()) // optional
  {
    rdoParamDefaultSpeed.GetValue(*rstStruct.DefaultSpeed);
  }
  const staff::DataObject& rdoParamNearLimit = rdoParam.GetChildByLocalNameOpt("NearLimit");
  if (!rdoParamNearLimit.IsNull()) // optional
  {
    rdoParamNearLimit.GetValue(*rstStruct.NearLimit);
  }
  const staff::DataObject& rdoParamFarLimit = rdoParam.GetChildByLocalNameOpt("FarLimit");
  if (!rdoParamFarLimit.IsNull()) // optional
  {
    rdoParamFarLimit.GetValue(*rstStruct.FarLimit);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusConfiguration20Extension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusConfiguration20Extension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WideDynamicRange20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  if (!(rstStruct.Level).IsNull()) // Optional
  {
    rdoParam.CreateChild("Level", *rstStruct.Level);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WideDynamicRange20& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  const staff::DataObject& rdoParamLevel = rdoParam.GetChildByLocalNameOpt("Level");
  if (!rdoParamLevel.IsNull()) // optional
  {
    rdoParamLevel.GetValue(*rstStruct.Level);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WhiteBalance20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  if (!(rstStruct.CrGain).IsNull()) // Optional
  {
    rdoParam.CreateChild("CrGain", *rstStruct.CrGain);
  }
  if (!(rstStruct.CbGain).IsNull()) // Optional
  {
    rdoParam.CreateChild("CbGain", *rstStruct.CbGain);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WhiteBalance20& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  const staff::DataObject& rdoParamCrGain = rdoParam.GetChildByLocalNameOpt("CrGain");
  if (!rdoParamCrGain.IsNull()) // optional
  {
    rdoParamCrGain.GetValue(*rstStruct.CrGain);
  }
  const staff::DataObject& rdoParamCbGain = rdoParam.GetChildByLocalNameOpt("CbGain");
  if (!rdoParamCbGain.IsNull()) // optional
  {
    rdoParamCbGain.GetValue(*rstStruct.CbGain);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WhiteBalance20Extension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WhiteBalance20Extension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingSettingsExtension20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.ImageStabilization).IsNull()) // Optional
  {
    staff::DataObject tdoParamImageStabilization = rdoParam.CreateChild("ImageStabilization");
    tdoParamImageStabilization << *rstStruct.ImageStabilization;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingSettingsExtension20& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamImageStabilization = rdoParam.GetChildByLocalNameOpt("ImageStabilization");
  if (!rdoParamImageStabilization.IsNull()) // optional
  {
    rdoParamImageStabilization >> *rstStruct.ImageStabilization;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImageStabilization& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  if (!(rstStruct.Level).IsNull()) // Optional
  {
    rdoParam.CreateChild("Level", *rstStruct.Level);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImageStabilization& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  const staff::DataObject& rdoParamLevel = rdoParam.GetChildByLocalNameOpt("Level");
  if (!rdoParamLevel.IsNull()) // optional
  {
    rdoParamLevel.GetValue(*rstStruct.Level);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImageStabilizationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImageStabilizationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingSettingsExtension202& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingSettingsExtension202& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSourceExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSourceExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioSource& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::DeviceEntity& >(rstStruct);

  rdoParam.CreateChild("Channels", rstStruct.Channels);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioSource& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::DeviceEntity& >(rstStruct);

  rdoParam.GetChildValueByLocalName("Channels", rstStruct.Channels);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Profile& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamName = rdoParam.CreateChild("Name");
  SerializeTypedef_Name(tdoParamName, rstStruct.Name);
  if (!(rstStruct.VideoSourceConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamVideoSourceConfiguration = rdoParam.CreateChild("VideoSourceConfiguration");
    tdoParamVideoSourceConfiguration << *rstStruct.VideoSourceConfiguration;
  }
  if (!(rstStruct.AudioSourceConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioSourceConfiguration = rdoParam.CreateChild("AudioSourceConfiguration");
    tdoParamAudioSourceConfiguration << *rstStruct.AudioSourceConfiguration;
  }
  if (!(rstStruct.VideoEncoderConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamVideoEncoderConfiguration = rdoParam.CreateChild("VideoEncoderConfiguration");
    tdoParamVideoEncoderConfiguration << *rstStruct.VideoEncoderConfiguration;
  }
  if (!(rstStruct.AudioEncoderConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioEncoderConfiguration = rdoParam.CreateChild("AudioEncoderConfiguration");
    tdoParamAudioEncoderConfiguration << *rstStruct.AudioEncoderConfiguration;
  }
  if (!(rstStruct.VideoAnalyticsConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamVideoAnalyticsConfiguration = rdoParam.CreateChild("VideoAnalyticsConfiguration");
    tdoParamVideoAnalyticsConfiguration << *rstStruct.VideoAnalyticsConfiguration;
  }
  if (!(rstStruct.PTZConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTZConfiguration = rdoParam.CreateChild("PTZConfiguration");
    tdoParamPTZConfiguration << *rstStruct.PTZConfiguration;
  }
  if (!(rstStruct.MetadataConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamMetadataConfiguration = rdoParam.CreateChild("MetadataConfiguration");
    tdoParamMetadataConfiguration << *rstStruct.MetadataConfiguration;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  rdoParam.CreateAttribute("token", rstStruct.token);
  if (!(rstStruct.fixed).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("fixed", *rstStruct.fixed);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Profile& rstStruct)
{
  DeserializeTypedef_Name(rdoParam.GetChildByLocalName("Name"), rstStruct.Name);
  const staff::DataObject& rdoParamVideoSourceConfiguration = rdoParam.GetChildByLocalNameOpt("VideoSourceConfiguration");
  if (!rdoParamVideoSourceConfiguration.IsNull()) // optional
  {
    rdoParamVideoSourceConfiguration >> *rstStruct.VideoSourceConfiguration;
  }
  const staff::DataObject& rdoParamAudioSourceConfiguration = rdoParam.GetChildByLocalNameOpt("AudioSourceConfiguration");
  if (!rdoParamAudioSourceConfiguration.IsNull()) // optional
  {
    rdoParamAudioSourceConfiguration >> *rstStruct.AudioSourceConfiguration;
  }
  const staff::DataObject& rdoParamVideoEncoderConfiguration = rdoParam.GetChildByLocalNameOpt("VideoEncoderConfiguration");
  if (!rdoParamVideoEncoderConfiguration.IsNull()) // optional
  {
    rdoParamVideoEncoderConfiguration >> *rstStruct.VideoEncoderConfiguration;
  }
  const staff::DataObject& rdoParamAudioEncoderConfiguration = rdoParam.GetChildByLocalNameOpt("AudioEncoderConfiguration");
  if (!rdoParamAudioEncoderConfiguration.IsNull()) // optional
  {
    rdoParamAudioEncoderConfiguration >> *rstStruct.AudioEncoderConfiguration;
  }
  const staff::DataObject& rdoParamVideoAnalyticsConfiguration = rdoParam.GetChildByLocalNameOpt("VideoAnalyticsConfiguration");
  if (!rdoParamVideoAnalyticsConfiguration.IsNull()) // optional
  {
    rdoParamVideoAnalyticsConfiguration >> *rstStruct.VideoAnalyticsConfiguration;
  }
  const staff::DataObject& rdoParamPTZConfiguration = rdoParam.GetChildByLocalNameOpt("PTZConfiguration");
  if (!rdoParamPTZConfiguration.IsNull()) // optional
  {
    rdoParamPTZConfiguration >> *rstStruct.PTZConfiguration;
  }
  const staff::DataObject& rdoParamMetadataConfiguration = rdoParam.GetChildByLocalNameOpt("MetadataConfiguration");
  if (!rdoParamMetadataConfiguration.IsNull()) // optional
  {
    rdoParamMetadataConfiguration >> *rstStruct.MetadataConfiguration;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  rdoParam.GetAttributeValueByName("token", rstStruct.token);
  const staff::Attribute& rAttrfixed = rdoParam.GetAttributeByLocalNameOpt("fixed");
  if (!rAttrfixed.IsNull()) // optional attribute
  {
    rAttrfixed.GetValue(*rstStruct.fixed);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ConfigurationEntity& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamName = rdoParam.CreateChild("Name");
  SerializeTypedef_Name(tdoParamName, rstStruct.Name);
  rdoParam.CreateChild("UseCount", rstStruct.UseCount);
  rdoParam.CreateAttribute("token", rstStruct.token);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ConfigurationEntity& rstStruct)
{
  DeserializeTypedef_Name(rdoParam.GetChildByLocalName("Name"), rstStruct.Name);
  rdoParam.GetChildValueByLocalName("UseCount", rstStruct.UseCount);
  rdoParam.GetAttributeValueByName("token", rstStruct.token);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSourceConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamSourceToken = rdoParam.CreateChild("SourceToken");
  SerializeTypedef_ReferenceToken(tdoParamSourceToken, rstStruct.SourceToken);
  staff::DataObject tdoParamBounds = rdoParam.CreateChild("Bounds");
  tdoParamBounds << rstStruct.Bounds;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSourceConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("SourceToken"), rstStruct.SourceToken);
  rdoParam.GetChildByLocalName("Bounds") >> rstStruct.Bounds;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSourceConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Rotate).IsNull()) // Optional
  {
    staff::DataObject tdoParamRotate = rdoParam.CreateChild("Rotate");
    tdoParamRotate << *rstStruct.Rotate;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSourceConfigurationExtension& rstStruct)
{
  const staff::DataObject& rdoParamRotate = rdoParam.GetChildByLocalNameOpt("Rotate");
  if (!rdoParamRotate.IsNull()) // optional
  {
    rdoParamRotate >> *rstStruct.Rotate;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Rotate& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  if (!(rstStruct.Degree).IsNull()) // Optional
  {
    rdoParam.CreateChild("Degree", *rstStruct.Degree);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Rotate& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  const staff::DataObject& rdoParamDegree = rdoParam.GetChildByLocalNameOpt("Degree");
  if (!rdoParamDegree.IsNull()) // optional
  {
    rdoParamDegree.GetValue(*rstStruct.Degree);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RotateExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RotateExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSourceConfigurationExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSourceConfigurationExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioSourceConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamSourceToken = rdoParam.CreateChild("SourceToken");
  SerializeTypedef_ReferenceToken(tdoParamSourceToken, rstStruct.SourceToken);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioSourceConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("SourceToken"), rstStruct.SourceToken);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPAddress& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamType = rdoParam.CreateChild("Type");
  tdoParamType << rstStruct.Type;
  if (!(rstStruct.IPv4Address).IsNull()) // Optional
  {
    staff::DataObject tdoParamIPv4Address = rdoParam.CreateChild("IPv4Address");
    SerializeTypedef_IPv4Address(tdoParamIPv4Address, *rstStruct.IPv4Address);
  }
  if (!(rstStruct.IPv6Address).IsNull()) // Optional
  {
    staff::DataObject tdoParamIPv6Address = rdoParam.CreateChild("IPv6Address");
    SerializeTypedef_IPv6Address(tdoParamIPv6Address, *rstStruct.IPv6Address);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPAddress& rstStruct)
{
  rdoParam.GetChildByLocalName("Type") >> rstStruct.Type;
  const staff::DataObject& rdoParamIPv4Address = rdoParam.GetChildByLocalNameOpt("IPv4Address");
  if (!rdoParamIPv4Address.IsNull()) // optional
  {
    DeserializeTypedef_IPv4Address(rdoParamIPv4Address, *rstStruct.IPv4Address);
  }
  const staff::DataObject& rdoParamIPv6Address = rdoParam.GetChildByLocalNameOpt("IPv6Address");
  if (!rdoParamIPv6Address.IsNull()) // optional
  {
    DeserializeTypedef_IPv6Address(rdoParamIPv6Address, *rstStruct.IPv6Address);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MulticastConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamAddress = rdoParam.CreateChild("Address");
  tdoParamAddress << rstStruct.Address;
  rdoParam.CreateChild("Port", rstStruct.Port);
  rdoParam.CreateChild("TTL", rstStruct.TTL);
  rdoParam.CreateChild("AutoStart", rstStruct.AutoStart);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MulticastConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("Address") >> rstStruct.Address;
  rdoParam.GetChildValueByLocalName("Port", rstStruct.Port);
  rdoParam.GetChildValueByLocalName("TTL", rstStruct.TTL);
  rdoParam.GetChildValueByLocalName("AutoStart", rstStruct.AutoStart);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoEncoderConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamEncoding = rdoParam.CreateChild("Encoding");
  tdoParamEncoding << rstStruct.Encoding;
  staff::DataObject tdoParamResolution = rdoParam.CreateChild("Resolution");
  tdoParamResolution << rstStruct.Resolution;
  rdoParam.CreateChild("Quality", rstStruct.Quality);
  if (!(rstStruct.RateControl).IsNull()) // Optional
  {
    staff::DataObject tdoParamRateControl = rdoParam.CreateChild("RateControl");
    tdoParamRateControl << *rstStruct.RateControl;
  }
  if (!(rstStruct.MPEG4).IsNull()) // Optional
  {
    staff::DataObject tdoParamMPEG4 = rdoParam.CreateChild("MPEG4");
    tdoParamMPEG4 << *rstStruct.MPEG4;
  }
  if (!(rstStruct.H264).IsNull()) // Optional
  {
    staff::DataObject tdoParamH264 = rdoParam.CreateChild("H264");
    tdoParamH264 << *rstStruct.H264;
  }
  staff::DataObject tdoParamMulticast = rdoParam.CreateChild("Multicast");
  tdoParamMulticast << rstStruct.Multicast;
  rdoParam.CreateChild("SessionTimeout", rstStruct.SessionTimeout);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoEncoderConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  rdoParam.GetChildByLocalName("Encoding") >> rstStruct.Encoding;
  rdoParam.GetChildByLocalName("Resolution") >> rstStruct.Resolution;
  rdoParam.GetChildValueByLocalName("Quality", rstStruct.Quality);
  const staff::DataObject& rdoParamRateControl = rdoParam.GetChildByLocalNameOpt("RateControl");
  if (!rdoParamRateControl.IsNull()) // optional
  {
    rdoParamRateControl >> *rstStruct.RateControl;
  }
  const staff::DataObject& rdoParamMPEG4 = rdoParam.GetChildByLocalNameOpt("MPEG4");
  if (!rdoParamMPEG4.IsNull()) // optional
  {
    rdoParamMPEG4 >> *rstStruct.MPEG4;
  }
  const staff::DataObject& rdoParamH264 = rdoParam.GetChildByLocalNameOpt("H264");
  if (!rdoParamH264.IsNull()) // optional
  {
    rdoParamH264 >> *rstStruct.H264;
  }
  rdoParam.GetChildByLocalName("Multicast") >> rstStruct.Multicast;
  rdoParam.GetChildValueByLocalName("SessionTimeout", rstStruct.SessionTimeout);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoRateControl& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("FrameRateLimit", rstStruct.FrameRateLimit);
  rdoParam.CreateChild("EncodingInterval", rstStruct.EncodingInterval);
  rdoParam.CreateChild("BitrateLimit", rstStruct.BitrateLimit);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoRateControl& rstStruct)
{
  rdoParam.GetChildValueByLocalName("FrameRateLimit", rstStruct.FrameRateLimit);
  rdoParam.GetChildValueByLocalName("EncodingInterval", rstStruct.EncodingInterval);
  rdoParam.GetChildValueByLocalName("BitrateLimit", rstStruct.BitrateLimit);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Mpeg4Configuration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("GovLength", rstStruct.GovLength);
  staff::DataObject tdoParamMpeg4Profile = rdoParam.CreateChild("Mpeg4Profile");
  tdoParamMpeg4Profile << rstStruct.Mpeg4Profile;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Mpeg4Configuration& rstStruct)
{
  rdoParam.GetChildValueByLocalName("GovLength", rstStruct.GovLength);
  rdoParam.GetChildByLocalName("Mpeg4Profile") >> rstStruct.Mpeg4Profile;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::H264Configuration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("GovLength", rstStruct.GovLength);
  staff::DataObject tdoParamH264Profile = rdoParam.CreateChild("H264Profile");
  tdoParamH264Profile << rstStruct.H264Profile;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::H264Configuration& rstStruct)
{
  rdoParam.GetChildValueByLocalName("GovLength", rstStruct.GovLength);
  rdoParam.GetChildByLocalName("H264Profile") >> rstStruct.H264Profile;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioEncoderConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamEncoding = rdoParam.CreateChild("Encoding");
  tdoParamEncoding << rstStruct.Encoding;
  rdoParam.CreateChild("Bitrate", rstStruct.Bitrate);
  rdoParam.CreateChild("SampleRate", rstStruct.SampleRate);
  staff::DataObject tdoParamMulticast = rdoParam.CreateChild("Multicast");
  tdoParamMulticast << rstStruct.Multicast;
  rdoParam.CreateChild("SessionTimeout", rstStruct.SessionTimeout);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioEncoderConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  rdoParam.GetChildByLocalName("Encoding") >> rstStruct.Encoding;
  rdoParam.GetChildValueByLocalName("Bitrate", rstStruct.Bitrate);
  rdoParam.GetChildValueByLocalName("SampleRate", rstStruct.SampleRate);
  rdoParam.GetChildByLocalName("Multicast") >> rstStruct.Multicast;
  rdoParam.GetChildValueByLocalName("SessionTimeout", rstStruct.SessionTimeout);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsEngineConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Config >::const_iterator itItem = (rstStruct.AnalyticsModule).begin(), itItemEnd = (rstStruct.AnalyticsModule).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AnalyticsModule");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsEngineConfiguration& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AnalyticsModule")
    {
      (rstStruct.AnalyticsModule).resize((rstStruct.AnalyticsModule).size() + 1);
      tdoItem >> (rstStruct.AnalyticsModule).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RuleEngineConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Config >::const_iterator itItem = (rstStruct.Rule).begin(), itItemEnd = (rstStruct.Rule).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Rule");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RuleEngineConfiguration& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Rule")
    {
      (rstStruct.Rule).resize((rstStruct.Rule).size() + 1);
      tdoItem >> (rstStruct.Rule).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoAnalyticsConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamAnalyticsEngineConfiguration = rdoParam.CreateChild("AnalyticsEngineConfiguration");
  tdoParamAnalyticsEngineConfiguration << rstStruct.AnalyticsEngineConfiguration;
  staff::DataObject tdoParamRuleEngineConfiguration = rdoParam.CreateChild("RuleEngineConfiguration");
  tdoParamRuleEngineConfiguration << rstStruct.RuleEngineConfiguration;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoAnalyticsConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  rdoParam.GetChildByLocalName("AnalyticsEngineConfiguration") >> rstStruct.AnalyticsEngineConfiguration;
  rdoParam.GetChildByLocalName("RuleEngineConfiguration") >> rstStruct.RuleEngineConfiguration;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ItemList::SimpleItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("Name", rstStruct.Name);
  rdoParam.CreateAttribute("Value", rstStruct.Value);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ItemList::SimpleItem& rstStruct)
{
  rdoParam.GetAttributeValueByName("Name", rstStruct.Name);
  rdoParam.GetAttributeValueByName("Value", rstStruct.Value);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ItemList::ElementItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.AppendChild(rstStruct.tUnnamed0);
  rdoParam.CreateAttribute("Name", rstStruct.Name);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ItemList::ElementItem& rstStruct)
{
  rstStruct.tUnnamed0 = rdoParam.FirstChild();
  rdoParam.GetAttributeValueByName("Name", rstStruct.Name);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ItemList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<struct ::ItemList::SimpleItem>::const_iterator itItem = (rstStruct.SimpleItem).begin(), itItemEnd = (rstStruct.SimpleItem).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("SimpleItem");
    tdoParamItem << (*itItem);
  }

  for (std::list<struct ::ItemList::ElementItem>::const_iterator itItem = (rstStruct.ElementItem).begin(), itItemEnd = (rstStruct.ElementItem).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ElementItem");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ItemList& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SimpleItem")
    {
      (rstStruct.SimpleItem).resize((rstStruct.SimpleItem).size() + 1);
      tdoItem >> (rstStruct.SimpleItem).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ElementItem")
    {
      (rstStruct.ElementItem).resize((rstStruct.ElementItem).size() + 1);
      tdoItem >> (rstStruct.ElementItem).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Config& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamParameters = rdoParam.CreateChild("Parameters");
  tdoParamParameters << rstStruct.Parameters;
  rdoParam.CreateAttribute("Name", rstStruct.Name);
  rdoParam.CreateAttribute("Type", rstStruct.Type);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Config& rstStruct)
{
  rdoParam.GetChildByLocalName("Parameters") >> rstStruct.Parameters;
  rdoParam.GetAttributeValueByName("Name", rstStruct.Name);
  rdoParam.GetAttributeValueByName("Type", rstStruct.Type);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ItemListExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ItemListExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsEngineConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsEngineConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RuleEngineConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RuleEngineConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamNodeToken = rdoParam.CreateChild("NodeToken");
  SerializeTypedef_ReferenceToken(tdoParamNodeToken, rstStruct.NodeToken);
  if (!(rstStruct.DefaultAbsolutePantTiltPositionSpace).IsNull()) // Optional
  {
    rdoParam.CreateChild("DefaultAbsolutePantTiltPositionSpace", *rstStruct.DefaultAbsolutePantTiltPositionSpace);
  }
  if (!(rstStruct.DefaultAbsoluteZoomPositionSpace).IsNull()) // Optional
  {
    rdoParam.CreateChild("DefaultAbsoluteZoomPositionSpace", *rstStruct.DefaultAbsoluteZoomPositionSpace);
  }
  if (!(rstStruct.DefaultRelativePanTiltTranslationSpace).IsNull()) // Optional
  {
    rdoParam.CreateChild("DefaultRelativePanTiltTranslationSpace", *rstStruct.DefaultRelativePanTiltTranslationSpace);
  }
  if (!(rstStruct.DefaultRelativeZoomTranslationSpace).IsNull()) // Optional
  {
    rdoParam.CreateChild("DefaultRelativeZoomTranslationSpace", *rstStruct.DefaultRelativeZoomTranslationSpace);
  }
  if (!(rstStruct.DefaultContinuousPanTiltVelocitySpace).IsNull()) // Optional
  {
    rdoParam.CreateChild("DefaultContinuousPanTiltVelocitySpace", *rstStruct.DefaultContinuousPanTiltVelocitySpace);
  }
  if (!(rstStruct.DefaultContinuousZoomVelocitySpace).IsNull()) // Optional
  {
    rdoParam.CreateChild("DefaultContinuousZoomVelocitySpace", *rstStruct.DefaultContinuousZoomVelocitySpace);
  }
  if (!(rstStruct.DefaultPTZSpeed).IsNull()) // Optional
  {
    staff::DataObject tdoParamDefaultPTZSpeed = rdoParam.CreateChild("DefaultPTZSpeed");
    tdoParamDefaultPTZSpeed << *rstStruct.DefaultPTZSpeed;
  }
  if (!(rstStruct.DefaultPTZTimeout).IsNull()) // Optional
  {
    rdoParam.CreateChild("DefaultPTZTimeout", *rstStruct.DefaultPTZTimeout);
  }
  if (!(rstStruct.PanTiltLimits).IsNull()) // Optional
  {
    staff::DataObject tdoParamPanTiltLimits = rdoParam.CreateChild("PanTiltLimits");
    tdoParamPanTiltLimits << *rstStruct.PanTiltLimits;
  }
  if (!(rstStruct.ZoomLimits).IsNull()) // Optional
  {
    staff::DataObject tdoParamZoomLimits = rdoParam.CreateChild("ZoomLimits");
    tdoParamZoomLimits << *rstStruct.ZoomLimits;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("NodeToken"), rstStruct.NodeToken);
  const staff::DataObject& rdoParamDefaultAbsolutePantTiltPositionSpace = rdoParam.GetChildByLocalNameOpt("DefaultAbsolutePantTiltPositionSpace");
  if (!rdoParamDefaultAbsolutePantTiltPositionSpace.IsNull()) // optional
  {
    rdoParamDefaultAbsolutePantTiltPositionSpace.GetValue(*rstStruct.DefaultAbsolutePantTiltPositionSpace);
  }
  const staff::DataObject& rdoParamDefaultAbsoluteZoomPositionSpace = rdoParam.GetChildByLocalNameOpt("DefaultAbsoluteZoomPositionSpace");
  if (!rdoParamDefaultAbsoluteZoomPositionSpace.IsNull()) // optional
  {
    rdoParamDefaultAbsoluteZoomPositionSpace.GetValue(*rstStruct.DefaultAbsoluteZoomPositionSpace);
  }
  const staff::DataObject& rdoParamDefaultRelativePanTiltTranslationSpace = rdoParam.GetChildByLocalNameOpt("DefaultRelativePanTiltTranslationSpace");
  if (!rdoParamDefaultRelativePanTiltTranslationSpace.IsNull()) // optional
  {
    rdoParamDefaultRelativePanTiltTranslationSpace.GetValue(*rstStruct.DefaultRelativePanTiltTranslationSpace);
  }
  const staff::DataObject& rdoParamDefaultRelativeZoomTranslationSpace = rdoParam.GetChildByLocalNameOpt("DefaultRelativeZoomTranslationSpace");
  if (!rdoParamDefaultRelativeZoomTranslationSpace.IsNull()) // optional
  {
    rdoParamDefaultRelativeZoomTranslationSpace.GetValue(*rstStruct.DefaultRelativeZoomTranslationSpace);
  }
  const staff::DataObject& rdoParamDefaultContinuousPanTiltVelocitySpace = rdoParam.GetChildByLocalNameOpt("DefaultContinuousPanTiltVelocitySpace");
  if (!rdoParamDefaultContinuousPanTiltVelocitySpace.IsNull()) // optional
  {
    rdoParamDefaultContinuousPanTiltVelocitySpace.GetValue(*rstStruct.DefaultContinuousPanTiltVelocitySpace);
  }
  const staff::DataObject& rdoParamDefaultContinuousZoomVelocitySpace = rdoParam.GetChildByLocalNameOpt("DefaultContinuousZoomVelocitySpace");
  if (!rdoParamDefaultContinuousZoomVelocitySpace.IsNull()) // optional
  {
    rdoParamDefaultContinuousZoomVelocitySpace.GetValue(*rstStruct.DefaultContinuousZoomVelocitySpace);
  }
  const staff::DataObject& rdoParamDefaultPTZSpeed = rdoParam.GetChildByLocalNameOpt("DefaultPTZSpeed");
  if (!rdoParamDefaultPTZSpeed.IsNull()) // optional
  {
    rdoParamDefaultPTZSpeed >> *rstStruct.DefaultPTZSpeed;
  }
  const staff::DataObject& rdoParamDefaultPTZTimeout = rdoParam.GetChildByLocalNameOpt("DefaultPTZTimeout");
  if (!rdoParamDefaultPTZTimeout.IsNull()) // optional
  {
    rdoParamDefaultPTZTimeout.GetValue(*rstStruct.DefaultPTZTimeout);
  }
  const staff::DataObject& rdoParamPanTiltLimits = rdoParam.GetChildByLocalNameOpt("PanTiltLimits");
  if (!rdoParamPanTiltLimits.IsNull()) // optional
  {
    rdoParamPanTiltLimits >> *rstStruct.PanTiltLimits;
  }
  const staff::DataObject& rdoParamZoomLimits = rdoParam.GetChildByLocalNameOpt("ZoomLimits");
  if (!rdoParamZoomLimits.IsNull()) // optional
  {
    rdoParamZoomLimits >> *rstStruct.ZoomLimits;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZSpeed& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.PanTilt).IsNull()) // Optional
  {
    staff::DataObject tdoParamPanTilt = rdoParam.CreateChild("PanTilt");
    tdoParamPanTilt << *rstStruct.PanTilt;
  }
  if (!(rstStruct.Zoom).IsNull()) // Optional
  {
    staff::DataObject tdoParamZoom = rdoParam.CreateChild("Zoom");
    tdoParamZoom << *rstStruct.Zoom;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZSpeed& rstStruct)
{
  const staff::DataObject& rdoParamPanTilt = rdoParam.GetChildByLocalNameOpt("PanTilt");
  if (!rdoParamPanTilt.IsNull()) // optional
  {
    rdoParamPanTilt >> *rstStruct.PanTilt;
  }
  const staff::DataObject& rdoParamZoom = rdoParam.GetChildByLocalNameOpt("Zoom");
  if (!rdoParamZoom.IsNull()) // optional
  {
    rdoParamZoom >> *rstStruct.Zoom;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Vector2D& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("x", rstStruct.x);
  rdoParam.CreateAttribute("y", rstStruct.y);
  if (!(rstStruct.space).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("space", *rstStruct.space);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Vector2D& rstStruct)
{
  rdoParam.GetAttributeValueByName("x", rstStruct.x);
  rdoParam.GetAttributeValueByName("y", rstStruct.y);
  const staff::Attribute& rAttrspace = rdoParam.GetAttributeByLocalNameOpt("space");
  if (!rAttrspace.IsNull()) // optional attribute
  {
    rAttrspace.GetValue(*rstStruct.space);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Vector1D& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("x", rstStruct.x);
  if (!(rstStruct.space).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("space", *rstStruct.space);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Vector1D& rstStruct)
{
  rdoParam.GetAttributeValueByName("x", rstStruct.x);
  const staff::Attribute& rAttrspace = rdoParam.GetAttributeByLocalNameOpt("space");
  if (!rAttrspace.IsNull()) // optional attribute
  {
    rAttrspace.GetValue(*rstStruct.space);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Space2DDescription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("URI", rstStruct.URI);
  staff::DataObject tdoParamXRange = rdoParam.CreateChild("XRange");
  tdoParamXRange << rstStruct.XRange;
  staff::DataObject tdoParamYRange = rdoParam.CreateChild("YRange");
  tdoParamYRange << rstStruct.YRange;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Space2DDescription& rstStruct)
{
  rdoParam.GetChildValueByLocalName("URI", rstStruct.URI);
  rdoParam.GetChildByLocalName("XRange") >> rstStruct.XRange;
  rdoParam.GetChildByLocalName("YRange") >> rstStruct.YRange;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PanTiltLimits& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRange = rdoParam.CreateChild("Range");
  tdoParamRange << rstStruct.Range;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PanTiltLimits& rstStruct)
{
  rdoParam.GetChildByLocalName("Range") >> rstStruct.Range;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Space1DDescription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("URI", rstStruct.URI);
  staff::DataObject tdoParamXRange = rdoParam.CreateChild("XRange");
  tdoParamXRange << rstStruct.XRange;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Space1DDescription& rstStruct)
{
  rdoParam.GetChildValueByLocalName("URI", rstStruct.URI);
  rdoParam.GetChildByLocalName("XRange") >> rstStruct.XRange;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ZoomLimits& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRange = rdoParam.CreateChild("Range");
  tdoParamRange << rstStruct.Range;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ZoomLimits& rstStruct)
{
  rdoParam.GetChildByLocalName("Range") >> rstStruct.Range;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.PTControlDirection).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTControlDirection = rdoParam.CreateChild("PTControlDirection");
    tdoParamPTControlDirection << *rstStruct.PTControlDirection;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamPTControlDirection = rdoParam.GetChildByLocalNameOpt("PTControlDirection");
  if (!rdoParamPTControlDirection.IsNull()) // optional
  {
    rdoParamPTControlDirection >> *rstStruct.PTControlDirection;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTControlDirection& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.EFlip).IsNull()) // Optional
  {
    staff::DataObject tdoParamEFlip = rdoParam.CreateChild("EFlip");
    tdoParamEFlip << *rstStruct.EFlip;
  }
  if (!(rstStruct.Reverse).IsNull()) // Optional
  {
    staff::DataObject tdoParamReverse = rdoParam.CreateChild("Reverse");
    tdoParamReverse << *rstStruct.Reverse;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTControlDirection& rstStruct)
{
  const staff::DataObject& rdoParamEFlip = rdoParam.GetChildByLocalNameOpt("EFlip");
  if (!rdoParamEFlip.IsNull()) // optional
  {
    rdoParamEFlip >> *rstStruct.EFlip;
  }
  const staff::DataObject& rdoParamReverse = rdoParam.GetChildByLocalNameOpt("Reverse");
  if (!rdoParamReverse.IsNull()) // optional
  {
    rdoParamReverse >> *rstStruct.Reverse;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EFlip& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EFlip& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Reverse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Reverse& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTControlDirectionExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTControlDirectionExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZConfigurationExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZConfigurationExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  if (!(rstStruct.PTZStatus).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTZStatus = rdoParam.CreateChild("PTZStatus");
    tdoParamPTZStatus << *rstStruct.PTZStatus;
  }
  if (!(rstStruct.Events).IsNull()) // Optional
  {
    staff::DataObject tdoParamEvents = rdoParam.CreateChild("Events");
    tdoParamEvents << *rstStruct.Events;
  }
  if (!(rstStruct.Analytics).IsNull()) // Optional
  {
    rdoParam.CreateChild("Analytics", *rstStruct.Analytics);
  }
  staff::DataObject tdoParamMulticast = rdoParam.CreateChild("Multicast");
  tdoParamMulticast << rstStruct.Multicast;
  rdoParam.CreateChild("SessionTimeout", rstStruct.SessionTimeout);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.AnalyticsEngineConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamAnalyticsEngineConfiguration = rdoParam.CreateChild("AnalyticsEngineConfiguration");
    tdoParamAnalyticsEngineConfiguration << *rstStruct.AnalyticsEngineConfiguration;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  const staff::DataObject& rdoParamPTZStatus = rdoParam.GetChildByLocalNameOpt("PTZStatus");
  if (!rdoParamPTZStatus.IsNull()) // optional
  {
    rdoParamPTZStatus >> *rstStruct.PTZStatus;
  }
  const staff::DataObject& rdoParamEvents = rdoParam.GetChildByLocalNameOpt("Events");
  if (!rdoParamEvents.IsNull()) // optional
  {
    rdoParamEvents >> *rstStruct.Events;
  }
  const staff::DataObject& rdoParamAnalytics = rdoParam.GetChildByLocalNameOpt("Analytics");
  if (!rdoParamAnalytics.IsNull()) // optional
  {
    rdoParamAnalytics.GetValue(*rstStruct.Analytics);
  }
  rdoParam.GetChildByLocalName("Multicast") >> rstStruct.Multicast;
  rdoParam.GetChildValueByLocalName("SessionTimeout", rstStruct.SessionTimeout);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamAnalyticsEngineConfiguration = rdoParam.GetChildByLocalNameOpt("AnalyticsEngineConfiguration");
  if (!rdoParamAnalyticsEngineConfiguration.IsNull()) // optional
  {
    rdoParamAnalyticsEngineConfiguration >> *rstStruct.AnalyticsEngineConfiguration;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZFilter& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Status", rstStruct.Status);
  rdoParam.CreateChild("Position", rstStruct.Position);
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZFilter& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Status", rstStruct.Status);
  rdoParam.GetChildValueByLocalName("Position", rstStruct.Position);
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EventSubscription::SubscriptionPolicy& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EventSubscription::SubscriptionPolicy& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EventSubscription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Filter).IsNull()) // Optional
  {
    staff::DataObject tdoParamFilter = rdoParam.CreateChild("Filter");
    tdoParamFilter << *rstStruct.Filter;
  }
  if (!(rstStruct.SubscriptionPolicy).IsNull()) // Optional
  {
    staff::DataObject tdoParamSubscriptionPolicy = rdoParam.CreateChild("SubscriptionPolicy");
    tdoParamSubscriptionPolicy << *rstStruct.SubscriptionPolicy;
  }
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EventSubscription& rstStruct)
{
  const staff::DataObject& rdoParamFilter = rdoParam.GetChildByLocalNameOpt("Filter");
  if (!rdoParamFilter.IsNull()) // optional
  {
    rdoParamFilter >> *rstStruct.Filter;
  }
  const staff::DataObject& rdoParamSubscriptionPolicy = rdoParam.GetChildByLocalNameOpt("SubscriptionPolicy");
  if (!rdoParamSubscriptionPolicy.IsNull()) // optional
  {
    rdoParamSubscriptionPolicy >> *rstStruct.SubscriptionPolicy;
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ProfileExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.AudioOutputConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioOutputConfiguration = rdoParam.CreateChild("AudioOutputConfiguration");
    tdoParamAudioOutputConfiguration << *rstStruct.AudioOutputConfiguration;
  }
  if (!(rstStruct.AudioDecoderConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioDecoderConfiguration = rdoParam.CreateChild("AudioDecoderConfiguration");
    tdoParamAudioDecoderConfiguration << *rstStruct.AudioDecoderConfiguration;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ProfileExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamAudioOutputConfiguration = rdoParam.GetChildByLocalNameOpt("AudioOutputConfiguration");
  if (!rdoParamAudioOutputConfiguration.IsNull()) // optional
  {
    rdoParamAudioOutputConfiguration >> *rstStruct.AudioOutputConfiguration;
  }
  const staff::DataObject& rdoParamAudioDecoderConfiguration = rdoParam.GetChildByLocalNameOpt("AudioDecoderConfiguration");
  if (!rdoParamAudioDecoderConfiguration.IsNull()) // optional
  {
    rdoParamAudioDecoderConfiguration >> *rstStruct.AudioDecoderConfiguration;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioOutputConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamOutputToken = rdoParam.CreateChild("OutputToken");
  SerializeTypedef_ReferenceToken(tdoParamOutputToken, rstStruct.OutputToken);
  if (!(rstStruct.SendPrimacy).IsNull()) // Optional
  {
    rdoParam.CreateChild("SendPrimacy", *rstStruct.SendPrimacy);
  }
  rdoParam.CreateChild("OutputLevel", rstStruct.OutputLevel);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioOutputConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("OutputToken"), rstStruct.OutputToken);
  const staff::DataObject& rdoParamSendPrimacy = rdoParam.GetChildByLocalNameOpt("SendPrimacy");
  if (!rdoParamSendPrimacy.IsNull()) // optional
  {
    rdoParamSendPrimacy.GetValue(*rstStruct.SendPrimacy);
  }
  rdoParam.GetChildValueByLocalName("OutputLevel", rstStruct.OutputLevel);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioDecoderConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioDecoderConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ProfileExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ProfileExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSourceConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamBoundsRange = rdoParam.CreateChild("BoundsRange");
  tdoParamBoundsRange << rstStruct.BoundsRange;
  for (std::list< ::ReferenceToken >::const_iterator itItem = (rstStruct.VideoSourceTokensAvailable).begin(), itItemEnd = (rstStruct.VideoSourceTokensAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("VideoSourceTokensAvailable");
    SerializeTypedef_ReferenceToken(tdoParamItem, (*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSourceConfigurationOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("BoundsRange") >> rstStruct.BoundsRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "VideoSourceTokensAvailable")
    {
      (rstStruct.VideoSourceTokensAvailable).resize((rstStruct.VideoSourceTokensAvailable).size() + 1);
      DeserializeTypedef_ReferenceToken(tdoItem, (rstStruct.VideoSourceTokensAvailable).back());
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSourceConfigurationOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.Rotate).IsNull()) // Optional
  {
    staff::DataObject tdoParamRotate = rdoParam.CreateChild("Rotate");
    tdoParamRotate << *rstStruct.Rotate;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSourceConfigurationOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamRotate = rdoParam.GetChildByLocalNameOpt("Rotate");
  if (!rdoParamRotate.IsNull()) // optional
  {
    rdoParamRotate >> *rstStruct.Rotate;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RotateOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::RotateMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.DegreeList).IsNull()) // Optional
  {
    staff::DataObject tdoParamDegreeList = rdoParam.CreateChild("DegreeList");
    tdoParamDegreeList << *rstStruct.DegreeList;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RotateOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::RotateMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamDegreeList = rdoParam.GetChildByLocalNameOpt("DegreeList");
  if (!rdoParamDegreeList.IsNull()) // optional
  {
    rdoParamDegreeList >> *rstStruct.DegreeList;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RotateOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RotateOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoSourceConfigurationOptionsExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoSourceConfigurationOptionsExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoEncoderConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamQualityRange = rdoParam.CreateChild("QualityRange");
  tdoParamQualityRange << rstStruct.QualityRange;
  if (!(rstStruct.JPEG).IsNull()) // Optional
  {
    staff::DataObject tdoParamJPEG = rdoParam.CreateChild("JPEG");
    tdoParamJPEG << *rstStruct.JPEG;
  }
  if (!(rstStruct.MPEG4).IsNull()) // Optional
  {
    staff::DataObject tdoParamMPEG4 = rdoParam.CreateChild("MPEG4");
    tdoParamMPEG4 << *rstStruct.MPEG4;
  }
  if (!(rstStruct.H264).IsNull()) // Optional
  {
    staff::DataObject tdoParamH264 = rdoParam.CreateChild("H264");
    tdoParamH264 << *rstStruct.H264;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoEncoderConfigurationOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("QualityRange") >> rstStruct.QualityRange;
  const staff::DataObject& rdoParamJPEG = rdoParam.GetChildByLocalNameOpt("JPEG");
  if (!rdoParamJPEG.IsNull()) // optional
  {
    rdoParamJPEG >> *rstStruct.JPEG;
  }
  const staff::DataObject& rdoParamMPEG4 = rdoParam.GetChildByLocalNameOpt("MPEG4");
  if (!rdoParamMPEG4.IsNull()) // optional
  {
    rdoParamMPEG4 >> *rstStruct.MPEG4;
  }
  const staff::DataObject& rdoParamH264 = rdoParam.GetChildByLocalNameOpt("H264");
  if (!rdoParamH264.IsNull()) // optional
  {
    rdoParamH264 >> *rstStruct.H264;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::JpegOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::VideoResolution >::const_iterator itItem = (rstStruct.ResolutionsAvailable).begin(), itItemEnd = (rstStruct.ResolutionsAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ResolutionsAvailable");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamFrameRateRange = rdoParam.CreateChild("FrameRateRange");
  tdoParamFrameRateRange << rstStruct.FrameRateRange;
  staff::DataObject tdoParamEncodingIntervalRange = rdoParam.CreateChild("EncodingIntervalRange");
  tdoParamEncodingIntervalRange << rstStruct.EncodingIntervalRange;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::JpegOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ResolutionsAvailable")
    {
      (rstStruct.ResolutionsAvailable).resize((rstStruct.ResolutionsAvailable).size() + 1);
      tdoItem >> (rstStruct.ResolutionsAvailable).back();
    }
  }

  rdoParam.GetChildByLocalName("FrameRateRange") >> rstStruct.FrameRateRange;
  rdoParam.GetChildByLocalName("EncodingIntervalRange") >> rstStruct.EncodingIntervalRange;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Mpeg4Options& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::VideoResolution >::const_iterator itItem = (rstStruct.ResolutionsAvailable).begin(), itItemEnd = (rstStruct.ResolutionsAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ResolutionsAvailable");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamGovLengthRange = rdoParam.CreateChild("GovLengthRange");
  tdoParamGovLengthRange << rstStruct.GovLengthRange;
  staff::DataObject tdoParamFrameRateRange = rdoParam.CreateChild("FrameRateRange");
  tdoParamFrameRateRange << rstStruct.FrameRateRange;
  staff::DataObject tdoParamEncodingIntervalRange = rdoParam.CreateChild("EncodingIntervalRange");
  tdoParamEncodingIntervalRange << rstStruct.EncodingIntervalRange;
  for (std::list< ::Mpeg4Profile >::const_iterator itItem = (rstStruct.Mpeg4ProfilesSupported).begin(), itItemEnd = (rstStruct.Mpeg4ProfilesSupported).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mpeg4ProfilesSupported");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Mpeg4Options& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ResolutionsAvailable")
    {
      (rstStruct.ResolutionsAvailable).resize((rstStruct.ResolutionsAvailable).size() + 1);
      tdoItem >> (rstStruct.ResolutionsAvailable).back();
    }
  }

  rdoParam.GetChildByLocalName("GovLengthRange") >> rstStruct.GovLengthRange;
  rdoParam.GetChildByLocalName("FrameRateRange") >> rstStruct.FrameRateRange;
  rdoParam.GetChildByLocalName("EncodingIntervalRange") >> rstStruct.EncodingIntervalRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mpeg4ProfilesSupported")
    {
      ::Mpeg4Profile tItem;
      tdoItem >> tItem;
      (rstStruct.Mpeg4ProfilesSupported).push_back(tItem);
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::H264Options& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::VideoResolution >::const_iterator itItem = (rstStruct.ResolutionsAvailable).begin(), itItemEnd = (rstStruct.ResolutionsAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ResolutionsAvailable");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamGovLengthRange = rdoParam.CreateChild("GovLengthRange");
  tdoParamGovLengthRange << rstStruct.GovLengthRange;
  staff::DataObject tdoParamFrameRateRange = rdoParam.CreateChild("FrameRateRange");
  tdoParamFrameRateRange << rstStruct.FrameRateRange;
  staff::DataObject tdoParamEncodingIntervalRange = rdoParam.CreateChild("EncodingIntervalRange");
  tdoParamEncodingIntervalRange << rstStruct.EncodingIntervalRange;
  for (std::list< ::H264Profile >::const_iterator itItem = (rstStruct.H264ProfilesSupported).begin(), itItemEnd = (rstStruct.H264ProfilesSupported).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("H264ProfilesSupported");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::H264Options& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ResolutionsAvailable")
    {
      (rstStruct.ResolutionsAvailable).resize((rstStruct.ResolutionsAvailable).size() + 1);
      tdoItem >> (rstStruct.ResolutionsAvailable).back();
    }
  }

  rdoParam.GetChildByLocalName("GovLengthRange") >> rstStruct.GovLengthRange;
  rdoParam.GetChildByLocalName("FrameRateRange") >> rstStruct.FrameRateRange;
  rdoParam.GetChildByLocalName("EncodingIntervalRange") >> rstStruct.EncodingIntervalRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "H264ProfilesSupported")
    {
      ::H264Profile tItem;
      tdoItem >> tItem;
      (rstStruct.H264ProfilesSupported).push_back(tItem);
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoEncoderOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.JPEG).IsNull()) // Optional
  {
    staff::DataObject tdoParamJPEG = rdoParam.CreateChild("JPEG");
    tdoParamJPEG << *rstStruct.JPEG;
  }
  if (!(rstStruct.MPEG4).IsNull()) // Optional
  {
    staff::DataObject tdoParamMPEG4 = rdoParam.CreateChild("MPEG4");
    tdoParamMPEG4 << *rstStruct.MPEG4;
  }
  if (!(rstStruct.H264).IsNull()) // Optional
  {
    staff::DataObject tdoParamH264 = rdoParam.CreateChild("H264");
    tdoParamH264 << *rstStruct.H264;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoEncoderOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamJPEG = rdoParam.GetChildByLocalNameOpt("JPEG");
  if (!rdoParamJPEG.IsNull()) // optional
  {
    rdoParamJPEG >> *rstStruct.JPEG;
  }
  const staff::DataObject& rdoParamMPEG4 = rdoParam.GetChildByLocalNameOpt("MPEG4");
  if (!rdoParamMPEG4.IsNull()) // optional
  {
    rdoParamMPEG4 >> *rstStruct.MPEG4;
  }
  const staff::DataObject& rdoParamH264 = rdoParam.GetChildByLocalNameOpt("H264");
  if (!rdoParamH264.IsNull()) // optional
  {
    rdoParamH264 >> *rstStruct.H264;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::JpegOptions2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::JpegOptions& >(rstStruct);

  staff::DataObject tdoParamBitrateRange = rdoParam.CreateChild("BitrateRange");
  tdoParamBitrateRange << rstStruct.BitrateRange;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::JpegOptions2& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::JpegOptions& >(rstStruct);

  rdoParam.GetChildByLocalName("BitrateRange") >> rstStruct.BitrateRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Mpeg4Options2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::Mpeg4Options& >(rstStruct);

  staff::DataObject tdoParamBitrateRange = rdoParam.CreateChild("BitrateRange");
  tdoParamBitrateRange << rstStruct.BitrateRange;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Mpeg4Options2& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::Mpeg4Options& >(rstStruct);

  rdoParam.GetChildByLocalName("BitrateRange") >> rstStruct.BitrateRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::H264Options2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::H264Options& >(rstStruct);

  staff::DataObject tdoParamBitrateRange = rdoParam.CreateChild("BitrateRange");
  tdoParamBitrateRange << rstStruct.BitrateRange;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::H264Options2& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::H264Options& >(rstStruct);

  rdoParam.GetChildByLocalName("BitrateRange") >> rstStruct.BitrateRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoEncoderOptionsExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoEncoderOptionsExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioSourceConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::ReferenceToken >::const_iterator itItem = (rstStruct.InputTokensAvailable).begin(), itItemEnd = (rstStruct.InputTokensAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("InputTokensAvailable");
    SerializeTypedef_ReferenceToken(tdoParamItem, (*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioSourceConfigurationOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "InputTokensAvailable")
    {
      (rstStruct.InputTokensAvailable).resize((rstStruct.InputTokensAvailable).size() + 1);
      DeserializeTypedef_ReferenceToken(tdoItem, (rstStruct.InputTokensAvailable).back());
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioSourceOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioSourceOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioEncoderConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::AudioEncoderConfigurationOption >::const_iterator itItem = (rstStruct.Options).begin(), itItemEnd = (rstStruct.Options).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Options");
    tdoParamItem << (*itItem);
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioEncoderConfigurationOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Options")
    {
      (rstStruct.Options).resize((rstStruct.Options).size() + 1);
      tdoItem >> (rstStruct.Options).back();
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioEncoderConfigurationOption& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamEncoding = rdoParam.CreateChild("Encoding");
  tdoParamEncoding << rstStruct.Encoding;
  staff::DataObject tdoParamBitrateList = rdoParam.CreateChild("BitrateList");
  tdoParamBitrateList << rstStruct.BitrateList;
  staff::DataObject tdoParamSampleRateList = rdoParam.CreateChild("SampleRateList");
  tdoParamSampleRateList << rstStruct.SampleRateList;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioEncoderConfigurationOption& rstStruct)
{
  rdoParam.GetChildByLocalName("Encoding") >> rstStruct.Encoding;
  rdoParam.GetChildByLocalName("BitrateList") >> rstStruct.BitrateList;
  rdoParam.GetChildByLocalName("SampleRateList") >> rstStruct.SampleRateList;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZStatusFilterOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("PanTiltStatusSupported", rstStruct.PanTiltStatusSupported);
  rdoParam.CreateChild("ZoomStatusSupported", rstStruct.ZoomStatusSupported);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.PanTiltPositionSupported).IsNull()) // Optional
  {
    rdoParam.CreateChild("PanTiltPositionSupported", *rstStruct.PanTiltPositionSupported);
  }
  if (!(rstStruct.ZoomPositionSupported).IsNull()) // Optional
  {
    rdoParam.CreateChild("ZoomPositionSupported", *rstStruct.ZoomPositionSupported);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZStatusFilterOptions& rstStruct)
{
  rdoParam.GetChildValueByLocalName("PanTiltStatusSupported", rstStruct.PanTiltStatusSupported);
  rdoParam.GetChildValueByLocalName("ZoomStatusSupported", rstStruct.ZoomStatusSupported);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamPanTiltPositionSupported = rdoParam.GetChildByLocalNameOpt("PanTiltPositionSupported");
  if (!rdoParamPanTiltPositionSupported.IsNull()) // optional
  {
    rdoParamPanTiltPositionSupported.GetValue(*rstStruct.PanTiltPositionSupported);
  }
  const staff::DataObject& rdoParamZoomPositionSupported = rdoParam.GetChildByLocalNameOpt("ZoomPositionSupported");
  if (!rdoParamZoomPositionSupported.IsNull()) // optional
  {
    rdoParamZoomPositionSupported.GetValue(*rstStruct.ZoomPositionSupported);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamPTZStatusFilterOptions = rdoParam.CreateChild("PTZStatusFilterOptions");
  tdoParamPTZStatusFilterOptions << rstStruct.PTZStatusFilterOptions;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataConfigurationOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("PTZStatusFilterOptions") >> rstStruct.PTZStatusFilterOptions;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZStatusFilterOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZStatusFilterOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Layout& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::PaneLayout >::const_iterator itItem = (rstStruct.PaneLayout).begin(), itItemEnd = (rstStruct.PaneLayout).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("PaneLayout");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Layout& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "PaneLayout")
    {
      (rstStruct.PaneLayout).resize((rstStruct.PaneLayout).size() + 1);
      tdoItem >> (rstStruct.PaneLayout).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoOutput& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::DeviceEntity& >(rstStruct);

  staff::DataObject tdoParamLayout = rdoParam.CreateChild("Layout");
  tdoParamLayout << rstStruct.Layout;
  if (!(rstStruct.Resolution).IsNull()) // Optional
  {
    staff::DataObject tdoParamResolution = rdoParam.CreateChild("Resolution");
    tdoParamResolution << *rstStruct.Resolution;
  }
  if (!(rstStruct.RefreshRate).IsNull()) // Optional
  {
    rdoParam.CreateChild("RefreshRate", *rstStruct.RefreshRate);
  }
  if (!(rstStruct.AspectRatio).IsNull()) // Optional
  {
    rdoParam.CreateChild("AspectRatio", *rstStruct.AspectRatio);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoOutput& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::DeviceEntity& >(rstStruct);

  rdoParam.GetChildByLocalName("Layout") >> rstStruct.Layout;
  const staff::DataObject& rdoParamResolution = rdoParam.GetChildByLocalNameOpt("Resolution");
  if (!rdoParamResolution.IsNull()) // optional
  {
    rdoParamResolution >> *rstStruct.Resolution;
  }
  const staff::DataObject& rdoParamRefreshRate = rdoParam.GetChildByLocalNameOpt("RefreshRate");
  if (!rdoParamRefreshRate.IsNull()) // optional
  {
    rdoParamRefreshRate.GetValue(*rstStruct.RefreshRate);
  }
  const staff::DataObject& rdoParamAspectRatio = rdoParam.GetChildByLocalNameOpt("AspectRatio");
  if (!rdoParamAspectRatio.IsNull()) // optional
  {
    rdoParamAspectRatio.GetValue(*rstStruct.AspectRatio);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PaneLayout& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamPane = rdoParam.CreateChild("Pane");
  SerializeTypedef_ReferenceToken(tdoParamPane, rstStruct.Pane);
  staff::DataObject tdoParamArea = rdoParam.CreateChild("Area");
  tdoParamArea << rstStruct.Area;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PaneLayout& rstStruct)
{
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("Pane"), rstStruct.Pane);
  rdoParam.GetChildByLocalName("Area") >> rstStruct.Area;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::LayoutExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::LayoutExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoOutputExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoOutputExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoOutputConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamOutputToken = rdoParam.CreateChild("OutputToken");
  SerializeTypedef_ReferenceToken(tdoParamOutputToken, rstStruct.OutputToken);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoOutputConfiguration& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("OutputToken"), rstStruct.OutputToken);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoOutputConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoOutputConfigurationOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoDecoderConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.JpegDecOptions).IsNull()) // Optional
  {
    staff::DataObject tdoParamJpegDecOptions = rdoParam.CreateChild("JpegDecOptions");
    tdoParamJpegDecOptions << *rstStruct.JpegDecOptions;
  }
  if (!(rstStruct.H264DecOptions).IsNull()) // Optional
  {
    staff::DataObject tdoParamH264DecOptions = rdoParam.CreateChild("H264DecOptions");
    tdoParamH264DecOptions << *rstStruct.H264DecOptions;
  }
  if (!(rstStruct.Mpeg4DecOptions).IsNull()) // Optional
  {
    staff::DataObject tdoParamMpeg4DecOptions = rdoParam.CreateChild("Mpeg4DecOptions");
    tdoParamMpeg4DecOptions << *rstStruct.Mpeg4DecOptions;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoDecoderConfigurationOptions& rstStruct)
{
  const staff::DataObject& rdoParamJpegDecOptions = rdoParam.GetChildByLocalNameOpt("JpegDecOptions");
  if (!rdoParamJpegDecOptions.IsNull()) // optional
  {
    rdoParamJpegDecOptions >> *rstStruct.JpegDecOptions;
  }
  const staff::DataObject& rdoParamH264DecOptions = rdoParam.GetChildByLocalNameOpt("H264DecOptions");
  if (!rdoParamH264DecOptions.IsNull()) // optional
  {
    rdoParamH264DecOptions >> *rstStruct.H264DecOptions;
  }
  const staff::DataObject& rdoParamMpeg4DecOptions = rdoParam.GetChildByLocalNameOpt("Mpeg4DecOptions");
  if (!rdoParamMpeg4DecOptions.IsNull()) // optional
  {
    rdoParamMpeg4DecOptions >> *rstStruct.Mpeg4DecOptions;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::JpegDecOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::VideoResolution >::const_iterator itItem = (rstStruct.ResolutionsAvailable).begin(), itItemEnd = (rstStruct.ResolutionsAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ResolutionsAvailable");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamSupportedInputBitrate = rdoParam.CreateChild("SupportedInputBitrate");
  tdoParamSupportedInputBitrate << rstStruct.SupportedInputBitrate;
  staff::DataObject tdoParamSupportedFrameRate = rdoParam.CreateChild("SupportedFrameRate");
  tdoParamSupportedFrameRate << rstStruct.SupportedFrameRate;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::JpegDecOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ResolutionsAvailable")
    {
      (rstStruct.ResolutionsAvailable).resize((rstStruct.ResolutionsAvailable).size() + 1);
      tdoItem >> (rstStruct.ResolutionsAvailable).back();
    }
  }

  rdoParam.GetChildByLocalName("SupportedInputBitrate") >> rstStruct.SupportedInputBitrate;
  rdoParam.GetChildByLocalName("SupportedFrameRate") >> rstStruct.SupportedFrameRate;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::H264DecOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::VideoResolution >::const_iterator itItem = (rstStruct.ResolutionsAvailable).begin(), itItemEnd = (rstStruct.ResolutionsAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ResolutionsAvailable");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::H264Profile >::const_iterator itItem = (rstStruct.SupportedH264Profiles).begin(), itItemEnd = (rstStruct.SupportedH264Profiles).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("SupportedH264Profiles");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamSupportedInputBitrate = rdoParam.CreateChild("SupportedInputBitrate");
  tdoParamSupportedInputBitrate << rstStruct.SupportedInputBitrate;
  staff::DataObject tdoParamSupportedFrameRate = rdoParam.CreateChild("SupportedFrameRate");
  tdoParamSupportedFrameRate << rstStruct.SupportedFrameRate;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::H264DecOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ResolutionsAvailable")
    {
      (rstStruct.ResolutionsAvailable).resize((rstStruct.ResolutionsAvailable).size() + 1);
      tdoItem >> (rstStruct.ResolutionsAvailable).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SupportedH264Profiles")
    {
      ::H264Profile tItem;
      tdoItem >> tItem;
      (rstStruct.SupportedH264Profiles).push_back(tItem);
    }
  }

  rdoParam.GetChildByLocalName("SupportedInputBitrate") >> rstStruct.SupportedInputBitrate;
  rdoParam.GetChildByLocalName("SupportedFrameRate") >> rstStruct.SupportedFrameRate;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Mpeg4DecOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::VideoResolution >::const_iterator itItem = (rstStruct.ResolutionsAvailable).begin(), itItemEnd = (rstStruct.ResolutionsAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ResolutionsAvailable");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Mpeg4Profile >::const_iterator itItem = (rstStruct.SupportedMpeg4Profiles).begin(), itItemEnd = (rstStruct.SupportedMpeg4Profiles).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("SupportedMpeg4Profiles");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamSupportedInputBitrate = rdoParam.CreateChild("SupportedInputBitrate");
  tdoParamSupportedInputBitrate << rstStruct.SupportedInputBitrate;
  staff::DataObject tdoParamSupportedFrameRate = rdoParam.CreateChild("SupportedFrameRate");
  tdoParamSupportedFrameRate << rstStruct.SupportedFrameRate;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Mpeg4DecOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ResolutionsAvailable")
    {
      (rstStruct.ResolutionsAvailable).resize((rstStruct.ResolutionsAvailable).size() + 1);
      tdoItem >> (rstStruct.ResolutionsAvailable).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SupportedMpeg4Profiles")
    {
      ::Mpeg4Profile tItem;
      tdoItem >> tItem;
      (rstStruct.SupportedMpeg4Profiles).push_back(tItem);
    }
  }

  rdoParam.GetChildByLocalName("SupportedInputBitrate") >> rstStruct.SupportedInputBitrate;
  rdoParam.GetChildByLocalName("SupportedFrameRate") >> rstStruct.SupportedFrameRate;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoDecoderConfigurationOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoDecoderConfigurationOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioOutput& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::DeviceEntity& >(rstStruct);

  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioOutput& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::DeviceEntity& >(rstStruct);

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioOutputConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::ReferenceToken >::const_iterator itItem = (rstStruct.OutputTokensAvailable).begin(), itItemEnd = (rstStruct.OutputTokensAvailable).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("OutputTokensAvailable");
    SerializeTypedef_ReferenceToken(tdoParamItem, (*itItem));
  }

  for (std::list<staff::anyURI>::const_iterator itItem = (rstStruct.SendPrimacyOptions).begin(), itItemEnd = (rstStruct.SendPrimacyOptions).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("SendPrimacyOptions", (*itItem));
  }

  staff::DataObject tdoParamOutputLevelRange = rdoParam.CreateChild("OutputLevelRange");
  tdoParamOutputLevelRange << rstStruct.OutputLevelRange;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioOutputConfigurationOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "OutputTokensAvailable")
    {
      (rstStruct.OutputTokensAvailable).resize((rstStruct.OutputTokensAvailable).size() + 1);
      DeserializeTypedef_ReferenceToken(tdoItem, (rstStruct.OutputTokensAvailable).back());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SendPrimacyOptions")
    {
      (rstStruct.SendPrimacyOptions).push_back(tdoItem.GetText());
    }
  }

  rdoParam.GetChildByLocalName("OutputLevelRange") >> rstStruct.OutputLevelRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioDecoderConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.AACDecOptions).IsNull()) // Optional
  {
    staff::DataObject tdoParamAACDecOptions = rdoParam.CreateChild("AACDecOptions");
    tdoParamAACDecOptions << *rstStruct.AACDecOptions;
  }
  if (!(rstStruct.G711DecOptions).IsNull()) // Optional
  {
    staff::DataObject tdoParamG711DecOptions = rdoParam.CreateChild("G711DecOptions");
    tdoParamG711DecOptions << *rstStruct.G711DecOptions;
  }
  if (!(rstStruct.G726DecOptions).IsNull()) // Optional
  {
    staff::DataObject tdoParamG726DecOptions = rdoParam.CreateChild("G726DecOptions");
    tdoParamG726DecOptions << *rstStruct.G726DecOptions;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioDecoderConfigurationOptions& rstStruct)
{
  const staff::DataObject& rdoParamAACDecOptions = rdoParam.GetChildByLocalNameOpt("AACDecOptions");
  if (!rdoParamAACDecOptions.IsNull()) // optional
  {
    rdoParamAACDecOptions >> *rstStruct.AACDecOptions;
  }
  const staff::DataObject& rdoParamG711DecOptions = rdoParam.GetChildByLocalNameOpt("G711DecOptions");
  if (!rdoParamG711DecOptions.IsNull()) // optional
  {
    rdoParamG711DecOptions >> *rstStruct.G711DecOptions;
  }
  const staff::DataObject& rdoParamG726DecOptions = rdoParam.GetChildByLocalNameOpt("G726DecOptions");
  if (!rdoParamG726DecOptions.IsNull()) // optional
  {
    rdoParamG726DecOptions >> *rstStruct.G726DecOptions;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AACDecOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamBitrate = rdoParam.CreateChild("Bitrate");
  tdoParamBitrate << rstStruct.Bitrate;
  staff::DataObject tdoParamSampleRateRange = rdoParam.CreateChild("SampleRateRange");
  tdoParamSampleRateRange << rstStruct.SampleRateRange;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AACDecOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("Bitrate") >> rstStruct.Bitrate;
  rdoParam.GetChildByLocalName("SampleRateRange") >> rstStruct.SampleRateRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::G711DecOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamBitrate = rdoParam.CreateChild("Bitrate");
  tdoParamBitrate << rstStruct.Bitrate;
  staff::DataObject tdoParamSampleRateRange = rdoParam.CreateChild("SampleRateRange");
  tdoParamSampleRateRange << rstStruct.SampleRateRange;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::G711DecOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("Bitrate") >> rstStruct.Bitrate;
  rdoParam.GetChildByLocalName("SampleRateRange") >> rstStruct.SampleRateRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::G726DecOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamBitrate = rdoParam.CreateChild("Bitrate");
  tdoParamBitrate << rstStruct.Bitrate;
  staff::DataObject tdoParamSampleRateRange = rdoParam.CreateChild("SampleRateRange");
  tdoParamSampleRateRange << rstStruct.SampleRateRange;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::G726DecOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("Bitrate") >> rstStruct.Bitrate;
  rdoParam.GetChildByLocalName("SampleRateRange") >> rstStruct.SampleRateRange;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioDecoderConfigurationOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioDecoderConfigurationOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Transport& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamProtocol = rdoParam.CreateChild("Protocol");
  tdoParamProtocol << rstStruct.Protocol;
  if (!(rstStruct.Tunnel).IsNull()) // Optional
  {
    staff::DataObject tdoParamTunnel = rdoParam.CreateChild("Tunnel");
    tdoParamTunnel << *rstStruct.Tunnel;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Transport& rstStruct)
{
  rdoParam.GetChildByLocalName("Protocol") >> rstStruct.Protocol;
  const staff::DataObject& rdoParamTunnel = rdoParam.GetChildByLocalNameOpt("Tunnel");
  if (!rdoParamTunnel.IsNull()) // optional
  {
    rdoParamTunnel >> *rstStruct.Tunnel;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::StreamSetup& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamStream = rdoParam.CreateChild("Stream");
  tdoParamStream << rstStruct.Stream;
  staff::DataObject tdoParamTransport = rdoParam.CreateChild("Transport");
  tdoParamTransport << rstStruct.Transport;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::StreamSetup& rstStruct)
{
  rdoParam.GetChildByLocalName("Stream") >> rstStruct.Stream;
  rdoParam.GetChildByLocalName("Transport") >> rstStruct.Transport;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MediaUri& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Uri", rstStruct.Uri);
  rdoParam.CreateChild("InvalidAfterConnect", rstStruct.InvalidAfterConnect);
  rdoParam.CreateChild("InvalidAfterReboot", rstStruct.InvalidAfterReboot);
  rdoParam.CreateChild("Timeout", rstStruct.Timeout);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MediaUri& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Uri", rstStruct.Uri);
  rdoParam.GetChildValueByLocalName("InvalidAfterConnect", rstStruct.InvalidAfterConnect);
  rdoParam.GetChildValueByLocalName("InvalidAfterReboot", rstStruct.InvalidAfterReboot);
  rdoParam.GetChildValueByLocalName("Timeout", rstStruct.Timeout);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Scope& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamScopeDef = rdoParam.CreateChild("ScopeDef");
  tdoParamScopeDef << rstStruct.ScopeDef;
  rdoParam.CreateChild("ScopeItem", rstStruct.ScopeItem);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Scope& rstStruct)
{
  rdoParam.GetChildByLocalName("ScopeDef") >> rstStruct.ScopeDef;
  rdoParam.GetChildValueByLocalName("ScopeItem", rstStruct.ScopeItem);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterface& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::DeviceEntity& >(rstStruct);

  rdoParam.CreateChild("Enabled", rstStruct.Enabled);
  if (!(rstStruct.Info).IsNull()) // Optional
  {
    staff::DataObject tdoParamInfo = rdoParam.CreateChild("Info");
    tdoParamInfo << *rstStruct.Info;
  }
  if (!(rstStruct.Link).IsNull()) // Optional
  {
    staff::DataObject tdoParamLink = rdoParam.CreateChild("Link");
    tdoParamLink << *rstStruct.Link;
  }
  if (!(rstStruct.IPv4).IsNull()) // Optional
  {
    staff::DataObject tdoParamIPv4 = rdoParam.CreateChild("IPv4");
    tdoParamIPv4 << *rstStruct.IPv4;
  }
  if (!(rstStruct.IPv6).IsNull()) // Optional
  {
    staff::DataObject tdoParamIPv6 = rdoParam.CreateChild("IPv6");
    tdoParamIPv6 << *rstStruct.IPv6;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterface& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::DeviceEntity& >(rstStruct);

  rdoParam.GetChildValueByLocalName("Enabled", rstStruct.Enabled);
  const staff::DataObject& rdoParamInfo = rdoParam.GetChildByLocalNameOpt("Info");
  if (!rdoParamInfo.IsNull()) // optional
  {
    rdoParamInfo >> *rstStruct.Info;
  }
  const staff::DataObject& rdoParamLink = rdoParam.GetChildByLocalNameOpt("Link");
  if (!rdoParamLink.IsNull()) // optional
  {
    rdoParamLink >> *rstStruct.Link;
  }
  const staff::DataObject& rdoParamIPv4 = rdoParam.GetChildByLocalNameOpt("IPv4");
  if (!rdoParamIPv4.IsNull()) // optional
  {
    rdoParamIPv4 >> *rstStruct.IPv4;
  }
  const staff::DataObject& rdoParamIPv6 = rdoParam.GetChildByLocalNameOpt("IPv6");
  if (!rdoParamIPv6.IsNull()) // optional
  {
    rdoParamIPv6 >> *rstStruct.IPv6;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterfaceInfo& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Name).IsNull()) // Optional
  {
    rdoParam.CreateChild("Name", *rstStruct.Name);
  }
  staff::DataObject tdoParamHwAddress = rdoParam.CreateChild("HwAddress");
  SerializeTypedef_HwAddress(tdoParamHwAddress, rstStruct.HwAddress);
  if (!(rstStruct.MTU).IsNull()) // Optional
  {
    rdoParam.CreateChild("MTU", *rstStruct.MTU);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterfaceInfo& rstStruct)
{
  const staff::DataObject& rdoParamName = rdoParam.GetChildByLocalNameOpt("Name");
  if (!rdoParamName.IsNull()) // optional
  {
    rdoParamName.GetValue(*rstStruct.Name);
  }
  DeserializeTypedef_HwAddress(rdoParam.GetChildByLocalName("HwAddress"), rstStruct.HwAddress);
  const staff::DataObject& rdoParamMTU = rdoParam.GetChildByLocalNameOpt("MTU");
  if (!rdoParamMTU.IsNull()) // optional
  {
    rdoParamMTU.GetValue(*rstStruct.MTU);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterfaceConnectionSetting& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("AutoNegotiation", rstStruct.AutoNegotiation);
  rdoParam.CreateChild("Speed", rstStruct.Speed);
  staff::DataObject tdoParamDuplex = rdoParam.CreateChild("Duplex");
  tdoParamDuplex << rstStruct.Duplex;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterfaceConnectionSetting& rstStruct)
{
  rdoParam.GetChildValueByLocalName("AutoNegotiation", rstStruct.AutoNegotiation);
  rdoParam.GetChildValueByLocalName("Speed", rstStruct.Speed);
  rdoParam.GetChildByLocalName("Duplex") >> rstStruct.Duplex;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterfaceLink& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamAdminSettings = rdoParam.CreateChild("AdminSettings");
  tdoParamAdminSettings << rstStruct.AdminSettings;
  staff::DataObject tdoParamOperSettings = rdoParam.CreateChild("OperSettings");
  tdoParamOperSettings << rstStruct.OperSettings;
  staff::DataObject tdoParamInterfaceType = rdoParam.CreateChild("InterfaceType");
  SerializeTypedef_IANA_IfTypes(tdoParamInterfaceType, rstStruct.InterfaceType);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterfaceLink& rstStruct)
{
  rdoParam.GetChildByLocalName("AdminSettings") >> rstStruct.AdminSettings;
  rdoParam.GetChildByLocalName("OperSettings") >> rstStruct.OperSettings;
  DeserializeTypedef_IANA_IfTypes(rdoParam.GetChildByLocalName("InterfaceType"), rstStruct.InterfaceType);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPv4Configuration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::PrefixedIPv4Address >::const_iterator itItem = (rstStruct.Manual).begin(), itItemEnd = (rstStruct.Manual).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Manual");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.LinkLocal).IsNull()) // Optional
  {
    staff::DataObject tdoParamLinkLocal = rdoParam.CreateChild("LinkLocal");
    tdoParamLinkLocal << *rstStruct.LinkLocal;
  }
  if (!(rstStruct.FromDHCP).IsNull()) // Optional
  {
    staff::DataObject tdoParamFromDHCP = rdoParam.CreateChild("FromDHCP");
    tdoParamFromDHCP << *rstStruct.FromDHCP;
  }
  rdoParam.CreateChild("DHCP", rstStruct.DHCP);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPv4Configuration& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Manual")
    {
      (rstStruct.Manual).resize((rstStruct.Manual).size() + 1);
      tdoItem >> (rstStruct.Manual).back();
    }
  }

  const staff::DataObject& rdoParamLinkLocal = rdoParam.GetChildByLocalNameOpt("LinkLocal");
  if (!rdoParamLinkLocal.IsNull()) // optional
  {
    rdoParamLinkLocal >> *rstStruct.LinkLocal;
  }
  const staff::DataObject& rdoParamFromDHCP = rdoParam.GetChildByLocalNameOpt("FromDHCP");
  if (!rdoParamFromDHCP.IsNull()) // optional
  {
    rdoParamFromDHCP >> *rstStruct.FromDHCP;
  }
  rdoParam.GetChildValueByLocalName("DHCP", rstStruct.DHCP);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPv4NetworkInterface& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Enabled", rstStruct.Enabled);
  staff::DataObject tdoParamConfig = rdoParam.CreateChild("Config");
  tdoParamConfig << rstStruct.Config;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPv4NetworkInterface& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Enabled", rstStruct.Enabled);
  rdoParam.GetChildByLocalName("Config") >> rstStruct.Config;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PrefixedIPv4Address& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamAddress = rdoParam.CreateChild("Address");
  SerializeTypedef_IPv4Address(tdoParamAddress, rstStruct.Address);
  rdoParam.CreateChild("PrefixLength", rstStruct.PrefixLength);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PrefixedIPv4Address& rstStruct)
{
  DeserializeTypedef_IPv4Address(rdoParam.GetChildByLocalName("Address"), rstStruct.Address);
  rdoParam.GetChildValueByLocalName("PrefixLength", rstStruct.PrefixLength);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPv6NetworkInterface& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Enabled", rstStruct.Enabled);
  if (!(rstStruct.Config).IsNull()) // Optional
  {
    staff::DataObject tdoParamConfig = rdoParam.CreateChild("Config");
    tdoParamConfig << *rstStruct.Config;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPv6NetworkInterface& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Enabled", rstStruct.Enabled);
  const staff::DataObject& rdoParamConfig = rdoParam.GetChildByLocalNameOpt("Config");
  if (!rdoParamConfig.IsNull()) // optional
  {
    rdoParamConfig >> *rstStruct.Config;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPv6Configuration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.AcceptRouterAdvert).IsNull()) // Optional
  {
    rdoParam.CreateChild("AcceptRouterAdvert", *rstStruct.AcceptRouterAdvert);
  }
  staff::DataObject tdoParamDHCP = rdoParam.CreateChild("DHCP");
  tdoParamDHCP << rstStruct.DHCP;
  for (std::list< ::PrefixedIPv6Address >::const_iterator itItem = (rstStruct.Manual).begin(), itItemEnd = (rstStruct.Manual).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Manual");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::PrefixedIPv6Address >::const_iterator itItem = (rstStruct.LinkLocal).begin(), itItemEnd = (rstStruct.LinkLocal).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("LinkLocal");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::PrefixedIPv6Address >::const_iterator itItem = (rstStruct.FromDHCP).begin(), itItemEnd = (rstStruct.FromDHCP).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("FromDHCP");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::PrefixedIPv6Address >::const_iterator itItem = (rstStruct.FromRA).begin(), itItemEnd = (rstStruct.FromRA).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("FromRA");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPv6Configuration& rstStruct)
{
  const staff::DataObject& rdoParamAcceptRouterAdvert = rdoParam.GetChildByLocalNameOpt("AcceptRouterAdvert");
  if (!rdoParamAcceptRouterAdvert.IsNull()) // optional
  {
    rdoParamAcceptRouterAdvert.GetValue(*rstStruct.AcceptRouterAdvert);
  }
  rdoParam.GetChildByLocalName("DHCP") >> rstStruct.DHCP;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Manual")
    {
      (rstStruct.Manual).resize((rstStruct.Manual).size() + 1);
      tdoItem >> (rstStruct.Manual).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "LinkLocal")
    {
      (rstStruct.LinkLocal).resize((rstStruct.LinkLocal).size() + 1);
      tdoItem >> (rstStruct.LinkLocal).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "FromDHCP")
    {
      (rstStruct.FromDHCP).resize((rstStruct.FromDHCP).size() + 1);
      tdoItem >> (rstStruct.FromDHCP).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "FromRA")
    {
      (rstStruct.FromRA).resize((rstStruct.FromRA).size() + 1);
      tdoItem >> (rstStruct.FromRA).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PrefixedIPv6Address& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamAddress = rdoParam.CreateChild("Address");
  SerializeTypedef_IPv6Address(tdoParamAddress, rstStruct.Address);
  rdoParam.CreateChild("PrefixLength", rstStruct.PrefixLength);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PrefixedIPv6Address& rstStruct)
{
  DeserializeTypedef_IPv6Address(rdoParam.GetChildByLocalName("Address"), rstStruct.Address);
  rdoParam.GetChildValueByLocalName("PrefixLength", rstStruct.PrefixLength);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPv6ConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPv6ConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterfaceExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  staff::DataObject tdoParamInterfaceType = rdoParam.CreateChild("InterfaceType");
  SerializeTypedef_IANA_IfTypes(tdoParamInterfaceType, rstStruct.InterfaceType);
  for (std::list< ::Dot3Configuration >::const_iterator itItem = (rstStruct.Dot3).begin(), itItemEnd = (rstStruct.Dot3).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Dot3");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Dot11Configuration >::const_iterator itItem = (rstStruct.Dot11).begin(), itItemEnd = (rstStruct.Dot11).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Dot11");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterfaceExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  DeserializeTypedef_IANA_IfTypes(rdoParam.GetChildByLocalName("InterfaceType"), rstStruct.InterfaceType);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Dot3")
    {
      (rstStruct.Dot3).resize((rstStruct.Dot3).size() + 1);
      tdoItem >> (rstStruct.Dot3).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Dot11")
    {
      (rstStruct.Dot11).resize((rstStruct.Dot11).size() + 1);
      tdoItem >> (rstStruct.Dot11).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot3Configuration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot3Configuration& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11SecurityConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  if (!(rstStruct.Algorithm).IsNull()) // Optional
  {
    staff::DataObject tdoParamAlgorithm = rdoParam.CreateChild("Algorithm");
    tdoParamAlgorithm << *rstStruct.Algorithm;
  }
  if (!(rstStruct.PSK).IsNull()) // Optional
  {
    staff::DataObject tdoParamPSK = rdoParam.CreateChild("PSK");
    tdoParamPSK << *rstStruct.PSK;
  }
  if (!(rstStruct.Dot1X).IsNull()) // Optional
  {
    staff::DataObject tdoParamDot1X = rdoParam.CreateChild("Dot1X");
    SerializeTypedef_ReferenceToken(tdoParamDot1X, *rstStruct.Dot1X);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11SecurityConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  const staff::DataObject& rdoParamAlgorithm = rdoParam.GetChildByLocalNameOpt("Algorithm");
  if (!rdoParamAlgorithm.IsNull()) // optional
  {
    rdoParamAlgorithm >> *rstStruct.Algorithm;
  }
  const staff::DataObject& rdoParamPSK = rdoParam.GetChildByLocalNameOpt("PSK");
  if (!rdoParamPSK.IsNull()) // optional
  {
    rdoParamPSK >> *rstStruct.PSK;
  }
  const staff::DataObject& rdoParamDot1X = rdoParam.GetChildByLocalNameOpt("Dot1X");
  if (!rdoParamDot1X.IsNull()) // optional
  {
    DeserializeTypedef_ReferenceToken(rdoParamDot1X, *rstStruct.Dot1X);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11Configuration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSSID = rdoParam.CreateChild("SSID");
  SerializeTypedef_Dot11SSIDType(tdoParamSSID, rstStruct.SSID);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  staff::DataObject tdoParamAlias = rdoParam.CreateChild("Alias");
  SerializeTypedef_Name(tdoParamAlias, rstStruct.Alias);
  staff::DataObject tdoParamPriority = rdoParam.CreateChild("Priority");
  SerializeTypedef_NetworkInterfaceConfigPriority(tdoParamPriority, rstStruct.Priority);
  staff::DataObject tdoParamSecurity = rdoParam.CreateChild("Security");
  tdoParamSecurity << rstStruct.Security;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11Configuration& rstStruct)
{
  DeserializeTypedef_Dot11SSIDType(rdoParam.GetChildByLocalName("SSID"), rstStruct.SSID);
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  DeserializeTypedef_Name(rdoParam.GetChildByLocalName("Alias"), rstStruct.Alias);
  DeserializeTypedef_NetworkInterfaceConfigPriority(rdoParam.GetChildByLocalName("Priority"), rstStruct.Priority);
  rdoParam.GetChildByLocalName("Security") >> rstStruct.Security;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11PSKSet& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Key).IsNull()) // Optional
  {
    staff::DataObject tdoParamKey = rdoParam.CreateChild("Key");
    SerializeTypedef_Dot11PSK(tdoParamKey, *rstStruct.Key);
  }
  if (!(rstStruct.Passphrase).IsNull()) // Optional
  {
    staff::DataObject tdoParamPassphrase = rdoParam.CreateChild("Passphrase");
    SerializeTypedef_Dot11PSKPassphrase(tdoParamPassphrase, *rstStruct.Passphrase);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11PSKSet& rstStruct)
{
  const staff::DataObject& rdoParamKey = rdoParam.GetChildByLocalNameOpt("Key");
  if (!rdoParamKey.IsNull()) // optional
  {
    DeserializeTypedef_Dot11PSK(rdoParamKey, *rstStruct.Key);
  }
  const staff::DataObject& rdoParamPassphrase = rdoParam.GetChildByLocalNameOpt("Passphrase");
  if (!rdoParamPassphrase.IsNull()) // optional
  {
    DeserializeTypedef_Dot11PSKPassphrase(rdoParamPassphrase, *rstStruct.Passphrase);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11PSKSetExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11PSKSetExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11SecurityConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11SecurityConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterfaceExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterfaceExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkProtocol& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamName = rdoParam.CreateChild("Name");
  tdoParamName << rstStruct.Name;
  rdoParam.CreateChild("Enabled", rstStruct.Enabled);
  for (std::list<int>::const_iterator itItem = (rstStruct.Port).begin(), itItemEnd = (rstStruct.Port).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("Port", (*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkProtocol& rstStruct)
{
  rdoParam.GetChildByLocalName("Name") >> rstStruct.Name;
  rdoParam.GetChildValueByLocalName("Enabled", rstStruct.Enabled);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Port")
    {
      int tItem = 0;
      tdoItem.GetValue(tItem);
      (rstStruct.Port).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkProtocolExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkProtocolExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkHost& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamType = rdoParam.CreateChild("Type");
  tdoParamType << rstStruct.Type;
  if (!(rstStruct.IPv4Address).IsNull()) // Optional
  {
    staff::DataObject tdoParamIPv4Address = rdoParam.CreateChild("IPv4Address");
    SerializeTypedef_IPv4Address(tdoParamIPv4Address, *rstStruct.IPv4Address);
  }
  if (!(rstStruct.IPv6Address).IsNull()) // Optional
  {
    staff::DataObject tdoParamIPv6Address = rdoParam.CreateChild("IPv6Address");
    SerializeTypedef_IPv6Address(tdoParamIPv6Address, *rstStruct.IPv6Address);
  }
  if (!(rstStruct.DNSname).IsNull()) // Optional
  {
    staff::DataObject tdoParamDNSname = rdoParam.CreateChild("DNSname");
    SerializeTypedef_DNSName(tdoParamDNSname, *rstStruct.DNSname);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkHost& rstStruct)
{
  rdoParam.GetChildByLocalName("Type") >> rstStruct.Type;
  const staff::DataObject& rdoParamIPv4Address = rdoParam.GetChildByLocalNameOpt("IPv4Address");
  if (!rdoParamIPv4Address.IsNull()) // optional
  {
    DeserializeTypedef_IPv4Address(rdoParamIPv4Address, *rstStruct.IPv4Address);
  }
  const staff::DataObject& rdoParamIPv6Address = rdoParam.GetChildByLocalNameOpt("IPv6Address");
  if (!rdoParamIPv6Address.IsNull()) // optional
  {
    DeserializeTypedef_IPv6Address(rdoParamIPv6Address, *rstStruct.IPv6Address);
  }
  const staff::DataObject& rdoParamDNSname = rdoParam.GetChildByLocalNameOpt("DNSname");
  if (!rdoParamDNSname.IsNull()) // optional
  {
    DeserializeTypedef_DNSName(rdoParamDNSname, *rstStruct.DNSname);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkHostExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkHostExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::HostnameInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("FromDHCP", rstStruct.FromDHCP);
  if (!(rstStruct.Name).IsNull()) // Optional
  {
    rdoParam.CreateChild("Name", *rstStruct.Name);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::HostnameInformation& rstStruct)
{
  rdoParam.GetChildValueByLocalName("FromDHCP", rstStruct.FromDHCP);
  const staff::DataObject& rdoParamName = rdoParam.GetChildByLocalNameOpt("Name");
  if (!rdoParamName.IsNull()) // optional
  {
    rdoParamName.GetValue(*rstStruct.Name);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::HostnameInformationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::HostnameInformationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DNSInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("FromDHCP", rstStruct.FromDHCP);
  for (std::list<staff::token>::const_iterator itItem = (rstStruct.SearchDomain).begin(), itItemEnd = (rstStruct.SearchDomain).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("SearchDomain", (*itItem));
  }

  for (std::list< ::IPAddress >::const_iterator itItem = (rstStruct.DNSFromDHCP).begin(), itItemEnd = (rstStruct.DNSFromDHCP).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("DNSFromDHCP");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::IPAddress >::const_iterator itItem = (rstStruct.DNSManual).begin(), itItemEnd = (rstStruct.DNSManual).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("DNSManual");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DNSInformation& rstStruct)
{
  rdoParam.GetChildValueByLocalName("FromDHCP", rstStruct.FromDHCP);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SearchDomain")
    {
      (rstStruct.SearchDomain).push_back(tdoItem.GetText());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "DNSFromDHCP")
    {
      (rstStruct.DNSFromDHCP).resize((rstStruct.DNSFromDHCP).size() + 1);
      tdoItem >> (rstStruct.DNSFromDHCP).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "DNSManual")
    {
      (rstStruct.DNSManual).resize((rstStruct.DNSManual).size() + 1);
      tdoItem >> (rstStruct.DNSManual).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DNSInformationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DNSInformationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NTPInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("FromDHCP", rstStruct.FromDHCP);
  for (std::list< ::NetworkHost >::const_iterator itItem = (rstStruct.NTPFromDHCP).begin(), itItemEnd = (rstStruct.NTPFromDHCP).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("NTPFromDHCP");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::NetworkHost >::const_iterator itItem = (rstStruct.NTPManual).begin(), itItemEnd = (rstStruct.NTPManual).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("NTPManual");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NTPInformation& rstStruct)
{
  rdoParam.GetChildValueByLocalName("FromDHCP", rstStruct.FromDHCP);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "NTPFromDHCP")
    {
      (rstStruct.NTPFromDHCP).resize((rstStruct.NTPFromDHCP).size() + 1);
      tdoItem >> (rstStruct.NTPFromDHCP).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "NTPManual")
    {
      (rstStruct.NTPManual).resize((rstStruct.NTPManual).size() + 1);
      tdoItem >> (rstStruct.NTPManual).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NTPInformationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NTPInformationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DynamicDNSInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamType = rdoParam.CreateChild("Type");
  tdoParamType << rstStruct.Type;
  if (!(rstStruct.Name).IsNull()) // Optional
  {
    staff::DataObject tdoParamName = rdoParam.CreateChild("Name");
    SerializeTypedef_DNSName(tdoParamName, *rstStruct.Name);
  }
  if (!(rstStruct.TTL).IsNull()) // Optional
  {
    rdoParam.CreateChild("TTL", *rstStruct.TTL);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DynamicDNSInformation& rstStruct)
{
  rdoParam.GetChildByLocalName("Type") >> rstStruct.Type;
  const staff::DataObject& rdoParamName = rdoParam.GetChildByLocalNameOpt("Name");
  if (!rdoParamName.IsNull()) // optional
  {
    DeserializeTypedef_DNSName(rdoParamName, *rstStruct.Name);
  }
  const staff::DataObject& rdoParamTTL = rdoParam.GetChildByLocalNameOpt("TTL");
  if (!rdoParamTTL.IsNull()) // optional
  {
    rdoParamTTL.GetValue(*rstStruct.TTL);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DynamicDNSInformationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DynamicDNSInformationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterfaceSetConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Enabled).IsNull()) // Optional
  {
    rdoParam.CreateChild("Enabled", *rstStruct.Enabled);
  }
  if (!(rstStruct.Link).IsNull()) // Optional
  {
    staff::DataObject tdoParamLink = rdoParam.CreateChild("Link");
    tdoParamLink << *rstStruct.Link;
  }
  if (!(rstStruct.MTU).IsNull()) // Optional
  {
    rdoParam.CreateChild("MTU", *rstStruct.MTU);
  }
  if (!(rstStruct.IPv4).IsNull()) // Optional
  {
    staff::DataObject tdoParamIPv4 = rdoParam.CreateChild("IPv4");
    tdoParamIPv4 << *rstStruct.IPv4;
  }
  if (!(rstStruct.IPv6).IsNull()) // Optional
  {
    staff::DataObject tdoParamIPv6 = rdoParam.CreateChild("IPv6");
    tdoParamIPv6 << *rstStruct.IPv6;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterfaceSetConfiguration& rstStruct)
{
  const staff::DataObject& rdoParamEnabled = rdoParam.GetChildByLocalNameOpt("Enabled");
  if (!rdoParamEnabled.IsNull()) // optional
  {
    rdoParamEnabled.GetValue(*rstStruct.Enabled);
  }
  const staff::DataObject& rdoParamLink = rdoParam.GetChildByLocalNameOpt("Link");
  if (!rdoParamLink.IsNull()) // optional
  {
    rdoParamLink >> *rstStruct.Link;
  }
  const staff::DataObject& rdoParamMTU = rdoParam.GetChildByLocalNameOpt("MTU");
  if (!rdoParamMTU.IsNull()) // optional
  {
    rdoParamMTU.GetValue(*rstStruct.MTU);
  }
  const staff::DataObject& rdoParamIPv4 = rdoParam.GetChildByLocalNameOpt("IPv4");
  if (!rdoParamIPv4.IsNull()) // optional
  {
    rdoParamIPv4 >> *rstStruct.IPv4;
  }
  const staff::DataObject& rdoParamIPv6 = rdoParam.GetChildByLocalNameOpt("IPv6");
  if (!rdoParamIPv6.IsNull()) // optional
  {
    rdoParamIPv6 >> *rstStruct.IPv6;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPv4NetworkInterfaceSetConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Enabled).IsNull()) // Optional
  {
    rdoParam.CreateChild("Enabled", *rstStruct.Enabled);
  }
  for (std::list< ::PrefixedIPv4Address >::const_iterator itItem = (rstStruct.Manual).begin(), itItemEnd = (rstStruct.Manual).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Manual");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.DHCP).IsNull()) // Optional
  {
    rdoParam.CreateChild("DHCP", *rstStruct.DHCP);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPv4NetworkInterfaceSetConfiguration& rstStruct)
{
  const staff::DataObject& rdoParamEnabled = rdoParam.GetChildByLocalNameOpt("Enabled");
  if (!rdoParamEnabled.IsNull()) // optional
  {
    rdoParamEnabled.GetValue(*rstStruct.Enabled);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Manual")
    {
      (rstStruct.Manual).resize((rstStruct.Manual).size() + 1);
      tdoItem >> (rstStruct.Manual).back();
    }
  }

  const staff::DataObject& rdoParamDHCP = rdoParam.GetChildByLocalNameOpt("DHCP");
  if (!rdoParamDHCP.IsNull()) // optional
  {
    rdoParamDHCP.GetValue(*rstStruct.DHCP);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPv6NetworkInterfaceSetConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Enabled).IsNull()) // Optional
  {
    rdoParam.CreateChild("Enabled", *rstStruct.Enabled);
  }
  if (!(rstStruct.AcceptRouterAdvert).IsNull()) // Optional
  {
    rdoParam.CreateChild("AcceptRouterAdvert", *rstStruct.AcceptRouterAdvert);
  }
  for (std::list< ::PrefixedIPv6Address >::const_iterator itItem = (rstStruct.Manual).begin(), itItemEnd = (rstStruct.Manual).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Manual");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.DHCP).IsNull()) // Optional
  {
    staff::DataObject tdoParamDHCP = rdoParam.CreateChild("DHCP");
    tdoParamDHCP << *rstStruct.DHCP;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPv6NetworkInterfaceSetConfiguration& rstStruct)
{
  const staff::DataObject& rdoParamEnabled = rdoParam.GetChildByLocalNameOpt("Enabled");
  if (!rdoParamEnabled.IsNull()) // optional
  {
    rdoParamEnabled.GetValue(*rstStruct.Enabled);
  }
  const staff::DataObject& rdoParamAcceptRouterAdvert = rdoParam.GetChildByLocalNameOpt("AcceptRouterAdvert");
  if (!rdoParamAcceptRouterAdvert.IsNull()) // optional
  {
    rdoParamAcceptRouterAdvert.GetValue(*rstStruct.AcceptRouterAdvert);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Manual")
    {
      (rstStruct.Manual).resize((rstStruct.Manual).size() + 1);
      tdoItem >> (rstStruct.Manual).back();
    }
  }

  const staff::DataObject& rdoParamDHCP = rdoParam.GetChildByLocalNameOpt("DHCP");
  if (!rdoParamDHCP.IsNull()) // optional
  {
    rdoParamDHCP >> *rstStruct.DHCP;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterfaceSetConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (std::list< ::Dot3Configuration >::const_iterator itItem = (rstStruct.Dot3).begin(), itItemEnd = (rstStruct.Dot3).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Dot3");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Dot11Configuration >::const_iterator itItem = (rstStruct.Dot11).begin(), itItemEnd = (rstStruct.Dot11).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Dot11");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterfaceSetConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Dot3")
    {
      (rstStruct.Dot3).resize((rstStruct.Dot3).size() + 1);
      tdoItem >> (rstStruct.Dot3).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Dot11")
    {
      (rstStruct.Dot11).resize((rstStruct.Dot11).size() + 1);
      tdoItem >> (rstStruct.Dot11).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkInterfaceSetConfigurationExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkInterfaceSetConfigurationExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkGateway& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::IPv4Address >::const_iterator itItem = (rstStruct.IPv4Address).begin(), itItemEnd = (rstStruct.IPv4Address).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("IPv4Address");
    SerializeTypedef_IPv4Address(tdoParamItem, (*itItem));
  }

  for (std::list< ::IPv6Address >::const_iterator itItem = (rstStruct.IPv6Address).begin(), itItemEnd = (rstStruct.IPv6Address).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("IPv6Address");
    SerializeTypedef_IPv6Address(tdoParamItem, (*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkGateway& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "IPv4Address")
    {
      (rstStruct.IPv4Address).resize((rstStruct.IPv4Address).size() + 1);
      DeserializeTypedef_IPv4Address(tdoItem, (rstStruct.IPv4Address).back());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "IPv6Address")
    {
      (rstStruct.IPv6Address).resize((rstStruct.IPv6Address).size() + 1);
      DeserializeTypedef_IPv6Address(tdoItem, (rstStruct.IPv6Address).back());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkZeroConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamInterfaceToken = rdoParam.CreateChild("InterfaceToken");
  SerializeTypedef_ReferenceToken(tdoParamInterfaceToken, rstStruct.InterfaceToken);
  rdoParam.CreateChild("Enabled", rstStruct.Enabled);
  for (std::list< ::IPv4Address >::const_iterator itItem = (rstStruct.Addresses).begin(), itItemEnd = (rstStruct.Addresses).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Addresses");
    SerializeTypedef_IPv4Address(tdoParamItem, (*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkZeroConfiguration& rstStruct)
{
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("InterfaceToken"), rstStruct.InterfaceToken);
  rdoParam.GetChildValueByLocalName("Enabled", rstStruct.Enabled);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Addresses")
    {
      (rstStruct.Addresses).resize((rstStruct.Addresses).size() + 1);
      DeserializeTypedef_IPv4Address(tdoItem, (rstStruct.Addresses).back());
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkZeroConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (std::list< ::NetworkZeroConfiguration >::const_iterator itItem = (rstStruct.Additional).begin(), itItemEnd = (rstStruct.Additional).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Additional");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkZeroConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Additional")
    {
      (rstStruct.Additional).resize((rstStruct.Additional).size() + 1);
      tdoItem >> (rstStruct.Additional).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkZeroConfigurationExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkZeroConfigurationExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPAddressFilter& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamType = rdoParam.CreateChild("Type");
  tdoParamType << rstStruct.Type;
  for (std::list< ::PrefixedIPv4Address >::const_iterator itItem = (rstStruct.IPv4Address).begin(), itItemEnd = (rstStruct.IPv4Address).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("IPv4Address");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::PrefixedIPv6Address >::const_iterator itItem = (rstStruct.IPv6Address).begin(), itItemEnd = (rstStruct.IPv6Address).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("IPv6Address");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPAddressFilter& rstStruct)
{
  rdoParam.GetChildByLocalName("Type") >> rstStruct.Type;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "IPv4Address")
    {
      (rstStruct.IPv4Address).resize((rstStruct.IPv4Address).size() + 1);
      tdoItem >> (rstStruct.IPv4Address).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "IPv6Address")
    {
      (rstStruct.IPv6Address).resize((rstStruct.IPv6Address).size() + 1);
      tdoItem >> (rstStruct.IPv6Address).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IPAddressFilterExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IPAddressFilterExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11Capabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("TKIP", rstStruct.TKIP);
  rdoParam.CreateChild("ScanAvailableNetworks", rstStruct.ScanAvailableNetworks);
  rdoParam.CreateChild("MultipleConfiguration", rstStruct.MultipleConfiguration);
  rdoParam.CreateChild("AdHocStationMode", rstStruct.AdHocStationMode);
  rdoParam.CreateChild("WEP", rstStruct.WEP);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11Capabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("TKIP", rstStruct.TKIP);
  rdoParam.GetChildValueByLocalName("ScanAvailableNetworks", rstStruct.ScanAvailableNetworks);
  rdoParam.GetChildValueByLocalName("MultipleConfiguration", rstStruct.MultipleConfiguration);
  rdoParam.GetChildValueByLocalName("AdHocStationMode", rstStruct.AdHocStationMode);
  rdoParam.GetChildValueByLocalName("WEP", rstStruct.WEP);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11Status& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSSID = rdoParam.CreateChild("SSID");
  SerializeTypedef_Dot11SSIDType(tdoParamSSID, rstStruct.SSID);
  if (!(rstStruct.BSSID).IsNull()) // Optional
  {
    rdoParam.CreateChild("BSSID", *rstStruct.BSSID);
  }
  if (!(rstStruct.PairCipher).IsNull()) // Optional
  {
    staff::DataObject tdoParamPairCipher = rdoParam.CreateChild("PairCipher");
    tdoParamPairCipher << *rstStruct.PairCipher;
  }
  if (!(rstStruct.GroupCipher).IsNull()) // Optional
  {
    staff::DataObject tdoParamGroupCipher = rdoParam.CreateChild("GroupCipher");
    tdoParamGroupCipher << *rstStruct.GroupCipher;
  }
  if (!(rstStruct.SignalStrength).IsNull()) // Optional
  {
    staff::DataObject tdoParamSignalStrength = rdoParam.CreateChild("SignalStrength");
    tdoParamSignalStrength << *rstStruct.SignalStrength;
  }
  staff::DataObject tdoParamActiveConfigAlias = rdoParam.CreateChild("ActiveConfigAlias");
  SerializeTypedef_ReferenceToken(tdoParamActiveConfigAlias, rstStruct.ActiveConfigAlias);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11Status& rstStruct)
{
  DeserializeTypedef_Dot11SSIDType(rdoParam.GetChildByLocalName("SSID"), rstStruct.SSID);
  const staff::DataObject& rdoParamBSSID = rdoParam.GetChildByLocalNameOpt("BSSID");
  if (!rdoParamBSSID.IsNull()) // optional
  {
    rdoParamBSSID.GetValue(*rstStruct.BSSID);
  }
  const staff::DataObject& rdoParamPairCipher = rdoParam.GetChildByLocalNameOpt("PairCipher");
  if (!rdoParamPairCipher.IsNull()) // optional
  {
    rdoParamPairCipher >> *rstStruct.PairCipher;
  }
  const staff::DataObject& rdoParamGroupCipher = rdoParam.GetChildByLocalNameOpt("GroupCipher");
  if (!rdoParamGroupCipher.IsNull()) // optional
  {
    rdoParamGroupCipher >> *rstStruct.GroupCipher;
  }
  const staff::DataObject& rdoParamSignalStrength = rdoParam.GetChildByLocalNameOpt("SignalStrength");
  if (!rdoParamSignalStrength.IsNull()) // optional
  {
    rdoParamSignalStrength >> *rstStruct.SignalStrength;
  }
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("ActiveConfigAlias"), rstStruct.ActiveConfigAlias);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11AvailableNetworks& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSSID = rdoParam.CreateChild("SSID");
  SerializeTypedef_Dot11SSIDType(tdoParamSSID, rstStruct.SSID);
  if (!(rstStruct.BSSID).IsNull()) // Optional
  {
    rdoParam.CreateChild("BSSID", *rstStruct.BSSID);
  }
  for (std::list< ::Dot11AuthAndMangementSuite >::const_iterator itItem = (rstStruct.AuthAndMangementSuite).begin(), itItemEnd = (rstStruct.AuthAndMangementSuite).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AuthAndMangementSuite");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Dot11Cipher >::const_iterator itItem = (rstStruct.PairCipher).begin(), itItemEnd = (rstStruct.PairCipher).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("PairCipher");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Dot11Cipher >::const_iterator itItem = (rstStruct.GroupCipher).begin(), itItemEnd = (rstStruct.GroupCipher).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("GroupCipher");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.SignalStrength).IsNull()) // Optional
  {
    staff::DataObject tdoParamSignalStrength = rdoParam.CreateChild("SignalStrength");
    tdoParamSignalStrength << *rstStruct.SignalStrength;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11AvailableNetworks& rstStruct)
{
  DeserializeTypedef_Dot11SSIDType(rdoParam.GetChildByLocalName("SSID"), rstStruct.SSID);
  const staff::DataObject& rdoParamBSSID = rdoParam.GetChildByLocalNameOpt("BSSID");
  if (!rdoParamBSSID.IsNull()) // optional
  {
    rdoParamBSSID.GetValue(*rstStruct.BSSID);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AuthAndMangementSuite")
    {
      ::Dot11AuthAndMangementSuite tItem;
      tdoItem >> tItem;
      (rstStruct.AuthAndMangementSuite).push_back(tItem);
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "PairCipher")
    {
      ::Dot11Cipher tItem;
      tdoItem >> tItem;
      (rstStruct.PairCipher).push_back(tItem);
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "GroupCipher")
    {
      ::Dot11Cipher tItem;
      tdoItem >> tItem;
      (rstStruct.GroupCipher).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamSignalStrength = rdoParam.GetChildByLocalNameOpt("SignalStrength");
  if (!rdoParamSignalStrength.IsNull()) // optional
  {
    rdoParamSignalStrength >> *rstStruct.SignalStrength;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot11AvailableNetworksExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot11AvailableNetworksExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Capabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Analytics).IsNull()) // Optional
  {
    staff::DataObject tdoParamAnalytics = rdoParam.CreateChild("Analytics");
    tdoParamAnalytics << *rstStruct.Analytics;
  }
  if (!(rstStruct.Device).IsNull()) // Optional
  {
    staff::DataObject tdoParamDevice = rdoParam.CreateChild("Device");
    tdoParamDevice << *rstStruct.Device;
  }
  if (!(rstStruct.Events).IsNull()) // Optional
  {
    staff::DataObject tdoParamEvents = rdoParam.CreateChild("Events");
    tdoParamEvents << *rstStruct.Events;
  }
  if (!(rstStruct.Imaging).IsNull()) // Optional
  {
    staff::DataObject tdoParamImaging = rdoParam.CreateChild("Imaging");
    tdoParamImaging << *rstStruct.Imaging;
  }
  if (!(rstStruct.Media).IsNull()) // Optional
  {
    staff::DataObject tdoParamMedia = rdoParam.CreateChild("Media");
    tdoParamMedia << *rstStruct.Media;
  }
  if (!(rstStruct.PTZ).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTZ = rdoParam.CreateChild("PTZ");
    tdoParamPTZ << *rstStruct.PTZ;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Capabilities& rstStruct)
{
  const staff::DataObject& rdoParamAnalytics = rdoParam.GetChildByLocalNameOpt("Analytics");
  if (!rdoParamAnalytics.IsNull()) // optional
  {
    rdoParamAnalytics >> *rstStruct.Analytics;
  }
  const staff::DataObject& rdoParamDevice = rdoParam.GetChildByLocalNameOpt("Device");
  if (!rdoParamDevice.IsNull()) // optional
  {
    rdoParamDevice >> *rstStruct.Device;
  }
  const staff::DataObject& rdoParamEvents = rdoParam.GetChildByLocalNameOpt("Events");
  if (!rdoParamEvents.IsNull()) // optional
  {
    rdoParamEvents >> *rstStruct.Events;
  }
  const staff::DataObject& rdoParamImaging = rdoParam.GetChildByLocalNameOpt("Imaging");
  if (!rdoParamImaging.IsNull()) // optional
  {
    rdoParamImaging >> *rstStruct.Imaging;
  }
  const staff::DataObject& rdoParamMedia = rdoParam.GetChildByLocalNameOpt("Media");
  if (!rdoParamMedia.IsNull()) // optional
  {
    rdoParamMedia >> *rstStruct.Media;
  }
  const staff::DataObject& rdoParamPTZ = rdoParam.GetChildByLocalNameOpt("PTZ");
  if (!rdoParamPTZ.IsNull()) // optional
  {
    rdoParamPTZ >> *rstStruct.PTZ;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  rdoParam.CreateChild("RuleSupport", rstStruct.RuleSupport);
  rdoParam.CreateChild("AnalyticsModuleSupport", rstStruct.AnalyticsModuleSupport);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  rdoParam.GetChildValueByLocalName("RuleSupport", rstStruct.RuleSupport);
  rdoParam.GetChildValueByLocalName("AnalyticsModuleSupport", rstStruct.AnalyticsModuleSupport);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DeviceCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  if (!(rstStruct.Network).IsNull()) // Optional
  {
    staff::DataObject tdoParamNetwork = rdoParam.CreateChild("Network");
    tdoParamNetwork << *rstStruct.Network;
  }
  if (!(rstStruct.System).IsNull()) // Optional
  {
    staff::DataObject tdoParamSystem = rdoParam.CreateChild("System");
    tdoParamSystem << *rstStruct.System;
  }
  if (!(rstStruct.IO).IsNull()) // Optional
  {
    staff::DataObject tdoParamIO = rdoParam.CreateChild("IO");
    tdoParamIO << *rstStruct.IO;
  }
  if (!(rstStruct.Security).IsNull()) // Optional
  {
    staff::DataObject tdoParamSecurity = rdoParam.CreateChild("Security");
    tdoParamSecurity << *rstStruct.Security;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DeviceCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  const staff::DataObject& rdoParamNetwork = rdoParam.GetChildByLocalNameOpt("Network");
  if (!rdoParamNetwork.IsNull()) // optional
  {
    rdoParamNetwork >> *rstStruct.Network;
  }
  const staff::DataObject& rdoParamSystem = rdoParam.GetChildByLocalNameOpt("System");
  if (!rdoParamSystem.IsNull()) // optional
  {
    rdoParamSystem >> *rstStruct.System;
  }
  const staff::DataObject& rdoParamIO = rdoParam.GetChildByLocalNameOpt("IO");
  if (!rdoParamIO.IsNull()) // optional
  {
    rdoParamIO >> *rstStruct.IO;
  }
  const staff::DataObject& rdoParamSecurity = rdoParam.GetChildByLocalNameOpt("Security");
  if (!rdoParamSecurity.IsNull()) // optional
  {
    rdoParamSecurity >> *rstStruct.Security;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.IPFilter).IsNull()) // Optional
  {
    rdoParam.CreateChild("IPFilter", *rstStruct.IPFilter);
  }
  if (!(rstStruct.ZeroConfiguration).IsNull()) // Optional
  {
    rdoParam.CreateChild("ZeroConfiguration", *rstStruct.ZeroConfiguration);
  }
  if (!(rstStruct.IPVersion6).IsNull()) // Optional
  {
    rdoParam.CreateChild("IPVersion6", *rstStruct.IPVersion6);
  }
  if (!(rstStruct.DynDNS).IsNull()) // Optional
  {
    rdoParam.CreateChild("DynDNS", *rstStruct.DynDNS);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkCapabilities& rstStruct)
{
  const staff::DataObject& rdoParamIPFilter = rdoParam.GetChildByLocalNameOpt("IPFilter");
  if (!rdoParamIPFilter.IsNull()) // optional
  {
    rdoParamIPFilter.GetValue(*rstStruct.IPFilter);
  }
  const staff::DataObject& rdoParamZeroConfiguration = rdoParam.GetChildByLocalNameOpt("ZeroConfiguration");
  if (!rdoParamZeroConfiguration.IsNull()) // optional
  {
    rdoParamZeroConfiguration.GetValue(*rstStruct.ZeroConfiguration);
  }
  const staff::DataObject& rdoParamIPVersion6 = rdoParam.GetChildByLocalNameOpt("IPVersion6");
  if (!rdoParamIPVersion6.IsNull()) // optional
  {
    rdoParamIPVersion6.GetValue(*rstStruct.IPVersion6);
  }
  const staff::DataObject& rdoParamDynDNS = rdoParam.GetChildByLocalNameOpt("DynDNS");
  if (!rdoParamDynDNS.IsNull()) // optional
  {
    rdoParamDynDNS.GetValue(*rstStruct.DynDNS);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkCapabilitiesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.Dot11Configuration).IsNull()) // Optional
  {
    rdoParam.CreateChild("Dot11Configuration", *rstStruct.Dot11Configuration);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkCapabilitiesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamDot11Configuration = rdoParam.GetChildByLocalNameOpt("Dot11Configuration");
  if (!rdoParamDot11Configuration.IsNull()) // optional
  {
    rdoParamDot11Configuration.GetValue(*rstStruct.Dot11Configuration);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NetworkCapabilitiesExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NetworkCapabilitiesExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SystemCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("DiscoveryResolve", rstStruct.DiscoveryResolve);
  rdoParam.CreateChild("DiscoveryBye", rstStruct.DiscoveryBye);
  rdoParam.CreateChild("RemoteDiscovery", rstStruct.RemoteDiscovery);
  rdoParam.CreateChild("SystemBackup", rstStruct.SystemBackup);
  rdoParam.CreateChild("SystemLogging", rstStruct.SystemLogging);
  rdoParam.CreateChild("FirmwareUpgrade", rstStruct.FirmwareUpgrade);
  for (std::list< ::OnvifVersion >::const_iterator itItem = (rstStruct.SupportedVersions).begin(), itItemEnd = (rstStruct.SupportedVersions).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("SupportedVersions");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SystemCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("DiscoveryResolve", rstStruct.DiscoveryResolve);
  rdoParam.GetChildValueByLocalName("DiscoveryBye", rstStruct.DiscoveryBye);
  rdoParam.GetChildValueByLocalName("RemoteDiscovery", rstStruct.RemoteDiscovery);
  rdoParam.GetChildValueByLocalName("SystemBackup", rstStruct.SystemBackup);
  rdoParam.GetChildValueByLocalName("SystemLogging", rstStruct.SystemLogging);
  rdoParam.GetChildValueByLocalName("FirmwareUpgrade", rstStruct.FirmwareUpgrade);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SupportedVersions")
    {
      (rstStruct.SupportedVersions).resize((rstStruct.SupportedVersions).size() + 1);
      tdoItem >> (rstStruct.SupportedVersions).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::OnvifVersion& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Major", rstStruct.Major);
  rdoParam.CreateChild("Minor", rstStruct.Minor);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::OnvifVersion& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Major", rstStruct.Major);
  rdoParam.GetChildValueByLocalName("Minor", rstStruct.Minor);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SystemCapabilitiesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.HttpFirmwareUpgrade).IsNull()) // Optional
  {
    rdoParam.CreateChild("HttpFirmwareUpgrade", *rstStruct.HttpFirmwareUpgrade);
  }
  if (!(rstStruct.HttpSystemBackup).IsNull()) // Optional
  {
    rdoParam.CreateChild("HttpSystemBackup", *rstStruct.HttpSystemBackup);
  }
  if (!(rstStruct.HttpSystemLogging).IsNull()) // Optional
  {
    rdoParam.CreateChild("HttpSystemLogging", *rstStruct.HttpSystemLogging);
  }
  if (!(rstStruct.HttpSupportInformation).IsNull()) // Optional
  {
    rdoParam.CreateChild("HttpSupportInformation", *rstStruct.HttpSupportInformation);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SystemCapabilitiesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamHttpFirmwareUpgrade = rdoParam.GetChildByLocalNameOpt("HttpFirmwareUpgrade");
  if (!rdoParamHttpFirmwareUpgrade.IsNull()) // optional
  {
    rdoParamHttpFirmwareUpgrade.GetValue(*rstStruct.HttpFirmwareUpgrade);
  }
  const staff::DataObject& rdoParamHttpSystemBackup = rdoParam.GetChildByLocalNameOpt("HttpSystemBackup");
  if (!rdoParamHttpSystemBackup.IsNull()) // optional
  {
    rdoParamHttpSystemBackup.GetValue(*rstStruct.HttpSystemBackup);
  }
  const staff::DataObject& rdoParamHttpSystemLogging = rdoParam.GetChildByLocalNameOpt("HttpSystemLogging");
  if (!rdoParamHttpSystemLogging.IsNull()) // optional
  {
    rdoParamHttpSystemLogging.GetValue(*rstStruct.HttpSystemLogging);
  }
  const staff::DataObject& rdoParamHttpSupportInformation = rdoParam.GetChildByLocalNameOpt("HttpSupportInformation");
  if (!rdoParamHttpSupportInformation.IsNull()) // optional
  {
    rdoParamHttpSupportInformation.GetValue(*rstStruct.HttpSupportInformation);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SystemCapabilitiesExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SystemCapabilitiesExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IOCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.InputConnectors).IsNull()) // Optional
  {
    rdoParam.CreateChild("InputConnectors", *rstStruct.InputConnectors);
  }
  if (!(rstStruct.RelayOutputs).IsNull()) // Optional
  {
    rdoParam.CreateChild("RelayOutputs", *rstStruct.RelayOutputs);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IOCapabilities& rstStruct)
{
  const staff::DataObject& rdoParamInputConnectors = rdoParam.GetChildByLocalNameOpt("InputConnectors");
  if (!rdoParamInputConnectors.IsNull()) // optional
  {
    rdoParamInputConnectors.GetValue(*rstStruct.InputConnectors);
  }
  const staff::DataObject& rdoParamRelayOutputs = rdoParam.GetChildByLocalNameOpt("RelayOutputs");
  if (!rdoParamRelayOutputs.IsNull()) // optional
  {
    rdoParamRelayOutputs.GetValue(*rstStruct.RelayOutputs);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IOCapabilitiesExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IOCapabilitiesExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::IOCapabilitiesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.Auxiliary).IsNull()) // Optional
  {
    rdoParam.CreateChild("Auxiliary", *rstStruct.Auxiliary);
  }
  for (std::list< ::AuxiliaryData >::const_iterator itItem = (rstStruct.AuxiliaryCommands).begin(), itItemEnd = (rstStruct.AuxiliaryCommands).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AuxiliaryCommands");
    SerializeTypedef_AuxiliaryData(tdoParamItem, (*itItem));
  }

  staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
  tdoParamExtension << rstStruct.Extension;
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::IOCapabilitiesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamAuxiliary = rdoParam.GetChildByLocalNameOpt("Auxiliary");
  if (!rdoParamAuxiliary.IsNull()) // optional
  {
    rdoParamAuxiliary.GetValue(*rstStruct.Auxiliary);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AuxiliaryCommands")
    {
      (rstStruct.AuxiliaryCommands).resize((rstStruct.AuxiliaryCommands).size() + 1);
      DeserializeTypedef_AuxiliaryData(tdoItem, (rstStruct.AuxiliaryCommands).back());
    }
  }

  rdoParam.GetChildByLocalName("Extension") >> rstStruct.Extension;
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SecurityCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("TLS1_1", rstStruct.TLS1_1);
  rdoParam.CreateChild("TLS1_2", rstStruct.TLS1_2);
  rdoParam.CreateChild("OnboardKeyGeneration", rstStruct.OnboardKeyGeneration);
  rdoParam.CreateChild("AccessPolicyConfig", rstStruct.AccessPolicyConfig);
  rdoParam.CreateChild("X_509Token", rstStruct.X_509Token);
  rdoParam.CreateChild("SAMLToken", rstStruct.SAMLToken);
  rdoParam.CreateChild("KerberosToken", rstStruct.KerberosToken);
  rdoParam.CreateChild("RELToken", rstStruct.RELToken);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SecurityCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("TLS1_1", rstStruct.TLS1_1);
  rdoParam.GetChildValueByLocalName("TLS1_2", rstStruct.TLS1_2);
  rdoParam.GetChildValueByLocalName("OnboardKeyGeneration", rstStruct.OnboardKeyGeneration);
  rdoParam.GetChildValueByLocalName("AccessPolicyConfig", rstStruct.AccessPolicyConfig);
  rdoParam.GetChildValueByLocalName("X_509Token", rstStruct.X_509Token);
  rdoParam.GetChildValueByLocalName("SAMLToken", rstStruct.SAMLToken);
  rdoParam.GetChildValueByLocalName("KerberosToken", rstStruct.KerberosToken);
  rdoParam.GetChildValueByLocalName("RELToken", rstStruct.RELToken);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SecurityCapabilitiesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("TLS1_0", rstStruct.TLS1_0);
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SecurityCapabilitiesExtension& rstStruct)
{
  rdoParam.GetChildValueByLocalName("TLS1_0", rstStruct.TLS1_0);
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SecurityCapabilitiesExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Dot1X", rstStruct.Dot1X);
  for (std::list<int>::const_iterator itItem = (rstStruct.SupportedEAPMethod).begin(), itItemEnd = (rstStruct.SupportedEAPMethod).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("SupportedEAPMethod", (*itItem));
  }

  rdoParam.CreateChild("RemoteUserHandling", rstStruct.RemoteUserHandling);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SecurityCapabilitiesExtension2& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Dot1X", rstStruct.Dot1X);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SupportedEAPMethod")
    {
      int tItem = 0;
      tdoItem.GetValue(tItem);
      (rstStruct.SupportedEAPMethod).push_back(tItem);
    }
  }

  rdoParam.GetChildValueByLocalName("RemoteUserHandling", rstStruct.RemoteUserHandling);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DeviceCapabilitiesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DeviceCapabilitiesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EventCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  rdoParam.CreateChild("WSSubscriptionPolicySupport", rstStruct.WSSubscriptionPolicySupport);
  rdoParam.CreateChild("WSPullPointSupport", rstStruct.WSPullPointSupport);
  rdoParam.CreateChild("WSPausableSubscriptionManagerInterfaceSupport", rstStruct.WSPausableSubscriptionManagerInterfaceSupport);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EventCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  rdoParam.GetChildValueByLocalName("WSSubscriptionPolicySupport", rstStruct.WSSubscriptionPolicySupport);
  rdoParam.GetChildValueByLocalName("WSPullPointSupport", rstStruct.WSPullPointSupport);
  rdoParam.GetChildValueByLocalName("WSPausableSubscriptionManagerInterfaceSupport", rstStruct.WSPausableSubscriptionManagerInterfaceSupport);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RealTimeStreamingCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.RTPMulticast).IsNull()) // Optional
  {
    rdoParam.CreateChild("RTPMulticast", *rstStruct.RTPMulticast);
  }
  if (!(rstStruct.RTP_TCP).IsNull()) // Optional
  {
    rdoParam.CreateChild("RTP_TCP", *rstStruct.RTP_TCP);
  }
  if (!(rstStruct.RTP_RTSP_TCP).IsNull()) // Optional
  {
    rdoParam.CreateChild("RTP_RTSP_TCP", *rstStruct.RTP_RTSP_TCP);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RealTimeStreamingCapabilities& rstStruct)
{
  const staff::DataObject& rdoParamRTPMulticast = rdoParam.GetChildByLocalNameOpt("RTPMulticast");
  if (!rdoParamRTPMulticast.IsNull()) // optional
  {
    rdoParamRTPMulticast.GetValue(*rstStruct.RTPMulticast);
  }
  const staff::DataObject& rdoParamRTP_TCP = rdoParam.GetChildByLocalNameOpt("RTP_TCP");
  if (!rdoParamRTP_TCP.IsNull()) // optional
  {
    rdoParamRTP_TCP.GetValue(*rstStruct.RTP_TCP);
  }
  const staff::DataObject& rdoParamRTP_RTSP_TCP = rdoParam.GetChildByLocalNameOpt("RTP_RTSP_TCP");
  if (!rdoParamRTP_RTSP_TCP.IsNull()) // optional
  {
    rdoParamRTP_RTSP_TCP.GetValue(*rstStruct.RTP_RTSP_TCP);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MediaCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  staff::DataObject tdoParamStreamingCapabilities = rdoParam.CreateChild("StreamingCapabilities");
  tdoParamStreamingCapabilities << rstStruct.StreamingCapabilities;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MediaCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  rdoParam.GetChildByLocalName("StreamingCapabilities") >> rstStruct.StreamingCapabilities;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RealTimeStreamingCapabilitiesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RealTimeStreamingCapabilitiesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ProfileCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("MaximumNumberOfProfiles", rstStruct.MaximumNumberOfProfiles);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ProfileCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("MaximumNumberOfProfiles", rstStruct.MaximumNumberOfProfiles);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MediaCapabilitiesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamProfileCapabilities = rdoParam.CreateChild("ProfileCapabilities");
  tdoParamProfileCapabilities << rstStruct.ProfileCapabilities;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MediaCapabilitiesExtension& rstStruct)
{
  rdoParam.GetChildByLocalName("ProfileCapabilities") >> rstStruct.ProfileCapabilities;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CapabilitiesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.DeviceIO).IsNull()) // Optional
  {
    staff::DataObject tdoParamDeviceIO = rdoParam.CreateChild("DeviceIO");
    tdoParamDeviceIO << *rstStruct.DeviceIO;
  }
  if (!(rstStruct.Display).IsNull()) // Optional
  {
    staff::DataObject tdoParamDisplay = rdoParam.CreateChild("Display");
    tdoParamDisplay << *rstStruct.Display;
  }
  if (!(rstStruct.Recording).IsNull()) // Optional
  {
    staff::DataObject tdoParamRecording = rdoParam.CreateChild("Recording");
    tdoParamRecording << *rstStruct.Recording;
  }
  if (!(rstStruct.Search).IsNull()) // Optional
  {
    staff::DataObject tdoParamSearch = rdoParam.CreateChild("Search");
    tdoParamSearch << *rstStruct.Search;
  }
  if (!(rstStruct.Replay).IsNull()) // Optional
  {
    staff::DataObject tdoParamReplay = rdoParam.CreateChild("Replay");
    tdoParamReplay << *rstStruct.Replay;
  }
  if (!(rstStruct.Receiver).IsNull()) // Optional
  {
    staff::DataObject tdoParamReceiver = rdoParam.CreateChild("Receiver");
    tdoParamReceiver << *rstStruct.Receiver;
  }
  if (!(rstStruct.AnalyticsDevice).IsNull()) // Optional
  {
    staff::DataObject tdoParamAnalyticsDevice = rdoParam.CreateChild("AnalyticsDevice");
    tdoParamAnalyticsDevice << *rstStruct.AnalyticsDevice;
  }
  if (!(rstStruct.Extensions).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtensions = rdoParam.CreateChild("Extensions");
    tdoParamExtensions << *rstStruct.Extensions;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CapabilitiesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamDeviceIO = rdoParam.GetChildByLocalNameOpt("DeviceIO");
  if (!rdoParamDeviceIO.IsNull()) // optional
  {
    rdoParamDeviceIO >> *rstStruct.DeviceIO;
  }
  const staff::DataObject& rdoParamDisplay = rdoParam.GetChildByLocalNameOpt("Display");
  if (!rdoParamDisplay.IsNull()) // optional
  {
    rdoParamDisplay >> *rstStruct.Display;
  }
  const staff::DataObject& rdoParamRecording = rdoParam.GetChildByLocalNameOpt("Recording");
  if (!rdoParamRecording.IsNull()) // optional
  {
    rdoParamRecording >> *rstStruct.Recording;
  }
  const staff::DataObject& rdoParamSearch = rdoParam.GetChildByLocalNameOpt("Search");
  if (!rdoParamSearch.IsNull()) // optional
  {
    rdoParamSearch >> *rstStruct.Search;
  }
  const staff::DataObject& rdoParamReplay = rdoParam.GetChildByLocalNameOpt("Replay");
  if (!rdoParamReplay.IsNull()) // optional
  {
    rdoParamReplay >> *rstStruct.Replay;
  }
  const staff::DataObject& rdoParamReceiver = rdoParam.GetChildByLocalNameOpt("Receiver");
  if (!rdoParamReceiver.IsNull()) // optional
  {
    rdoParamReceiver >> *rstStruct.Receiver;
  }
  const staff::DataObject& rdoParamAnalyticsDevice = rdoParam.GetChildByLocalNameOpt("AnalyticsDevice");
  if (!rdoParamAnalyticsDevice.IsNull()) // optional
  {
    rdoParamAnalyticsDevice >> *rstStruct.AnalyticsDevice;
  }
  const staff::DataObject& rdoParamExtensions = rdoParam.GetChildByLocalNameOpt("Extensions");
  if (!rdoParamExtensions.IsNull()) // optional
  {
    rdoParamExtensions >> *rstStruct.Extensions;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DeviceIOCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  rdoParam.CreateChild("VideoSources", rstStruct.VideoSources);
  rdoParam.CreateChild("VideoOutputs", rstStruct.VideoOutputs);
  rdoParam.CreateChild("AudioSources", rstStruct.AudioSources);
  rdoParam.CreateChild("AudioOutputs", rstStruct.AudioOutputs);
  rdoParam.CreateChild("RelayOutputs", rstStruct.RelayOutputs);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DeviceIOCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  rdoParam.GetChildValueByLocalName("VideoSources", rstStruct.VideoSources);
  rdoParam.GetChildValueByLocalName("VideoOutputs", rstStruct.VideoOutputs);
  rdoParam.GetChildValueByLocalName("AudioSources", rstStruct.AudioSources);
  rdoParam.GetChildValueByLocalName("AudioOutputs", rstStruct.AudioOutputs);
  rdoParam.GetChildValueByLocalName("RelayOutputs", rstStruct.RelayOutputs);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DisplayCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  rdoParam.CreateChild("FixedLayout", rstStruct.FixedLayout);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DisplayCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  rdoParam.GetChildValueByLocalName("FixedLayout", rstStruct.FixedLayout);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  rdoParam.CreateChild("ReceiverSource", rstStruct.ReceiverSource);
  rdoParam.CreateChild("MediaProfileSource", rstStruct.MediaProfileSource);
  rdoParam.CreateChild("DynamicRecordings", rstStruct.DynamicRecordings);
  rdoParam.CreateChild("DynamicTracks", rstStruct.DynamicTracks);
  rdoParam.CreateChild("MaxStringLength", rstStruct.MaxStringLength);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  rdoParam.GetChildValueByLocalName("ReceiverSource", rstStruct.ReceiverSource);
  rdoParam.GetChildValueByLocalName("MediaProfileSource", rstStruct.MediaProfileSource);
  rdoParam.GetChildValueByLocalName("DynamicRecordings", rstStruct.DynamicRecordings);
  rdoParam.GetChildValueByLocalName("DynamicTracks", rstStruct.DynamicTracks);
  rdoParam.GetChildValueByLocalName("MaxStringLength", rstStruct.MaxStringLength);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SearchCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  rdoParam.CreateChild("MetadataSearch", rstStruct.MetadataSearch);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SearchCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  rdoParam.GetChildValueByLocalName("MetadataSearch", rstStruct.MetadataSearch);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ReplayCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ReplayCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ReceiverCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  rdoParam.CreateChild("RTP_Multicast", rstStruct.RTP_Multicast);
  rdoParam.CreateChild("RTP_TCP", rstStruct.RTP_TCP);
  rdoParam.CreateChild("RTP_RTSP_TCP", rstStruct.RTP_RTSP_TCP);
  rdoParam.CreateChild("SupportedReceivers", rstStruct.SupportedReceivers);
  rdoParam.CreateChild("MaximumRTSPURILength", rstStruct.MaximumRTSPURILength);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ReceiverCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  rdoParam.GetChildValueByLocalName("RTP_Multicast", rstStruct.RTP_Multicast);
  rdoParam.GetChildValueByLocalName("RTP_TCP", rstStruct.RTP_TCP);
  rdoParam.GetChildValueByLocalName("RTP_RTSP_TCP", rstStruct.RTP_RTSP_TCP);
  rdoParam.GetChildValueByLocalName("SupportedReceivers", rstStruct.SupportedReceivers);
  rdoParam.GetChildValueByLocalName("MaximumRTSPURILength", rstStruct.MaximumRTSPURILength);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsDeviceCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("XAddr", rstStruct.XAddr);
  if (!(rstStruct.RuleSupport).IsNull()) // Optional
  {
    rdoParam.CreateChild("RuleSupport", *rstStruct.RuleSupport);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsDeviceCapabilities& rstStruct)
{
  rdoParam.GetChildValueByLocalName("XAddr", rstStruct.XAddr);
  const staff::DataObject& rdoParamRuleSupport = rdoParam.GetChildByLocalNameOpt("RuleSupport");
  if (!rdoParamRuleSupport.IsNull()) // optional
  {
    rdoParamRuleSupport.GetValue(*rstStruct.RuleSupport);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsDeviceExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsDeviceExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CapabilitiesExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CapabilitiesExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SystemLog& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Binary).IsNull()) // Optional
  {
    staff::DataObject tdoParamBinary = rdoParam.CreateChild("Binary");
    tdoParamBinary << *rstStruct.Binary;
  }
  if (!(rstStruct.String).IsNull()) // Optional
  {
    rdoParam.CreateChild("String", *rstStruct.String);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SystemLog& rstStruct)
{
  const staff::DataObject& rdoParamBinary = rdoParam.GetChildByLocalNameOpt("Binary");
  if (!rdoParamBinary.IsNull()) // optional
  {
    rdoParamBinary >> *rstStruct.Binary;
  }
  const staff::DataObject& rdoParamString = rdoParam.GetChildByLocalNameOpt("String");
  if (!rdoParamString.IsNull()) // optional
  {
    rdoParamString.GetValue(*rstStruct.String);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AttachmentData& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamInclude = rdoParam.CreateChild("Include");
  tdoParamInclude << rstStruct.Include;
  if (!(rstStruct.contentType).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("contentType", *rstStruct.contentType);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AttachmentData& rstStruct)
{
  rdoParam.GetChildByLocalName("Include") >> rstStruct.Include;
  const staff::Attribute& rAttrcontentType = rdoParam.GetAttributeByLocalNameOpt("contentType");
  if (!rAttrcontentType.IsNull()) // optional attribute
  {
    rAttrcontentType.GetValue(*rstStruct.contentType);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SupportInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Binary).IsNull()) // Optional
  {
    staff::DataObject tdoParamBinary = rdoParam.CreateChild("Binary");
    tdoParamBinary << *rstStruct.Binary;
  }
  if (!(rstStruct.String).IsNull()) // Optional
  {
    rdoParam.CreateChild("String", *rstStruct.String);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SupportInformation& rstStruct)
{
  const staff::DataObject& rdoParamBinary = rdoParam.GetChildByLocalNameOpt("Binary");
  if (!rdoParamBinary.IsNull()) // optional
  {
    rdoParamBinary >> *rstStruct.Binary;
  }
  const staff::DataObject& rdoParamString = rdoParam.GetChildByLocalNameOpt("String");
  if (!rdoParamString.IsNull()) // optional
  {
    rdoParamString.GetValue(*rstStruct.String);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::BinaryData& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Data", rstStruct.Data);
  if (!(rstStruct.contentType).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("contentType", *rstStruct.contentType);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::BinaryData& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Data", rstStruct.Data);
  const staff::Attribute& rAttrcontentType = rdoParam.GetAttributeByLocalNameOpt("contentType");
  if (!rAttrcontentType.IsNull()) // optional attribute
  {
    rAttrcontentType.GetValue(*rstStruct.contentType);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::BackupFile& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Name", rstStruct.Name);
  staff::DataObject tdoParamData = rdoParam.CreateChild("Data");
  tdoParamData << rstStruct.Data;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::BackupFile& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Name", rstStruct.Name);
  rdoParam.GetChildByLocalName("Data") >> rstStruct.Data;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SystemLogUriList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::SystemLogUri >::const_iterator itItem = (rstStruct.SystemLog).begin(), itItemEnd = (rstStruct.SystemLog).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("SystemLog");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SystemLogUriList& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SystemLog")
    {
      (rstStruct.SystemLog).resize((rstStruct.SystemLog).size() + 1);
      tdoItem >> (rstStruct.SystemLog).back();
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SystemLogUri& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamType = rdoParam.CreateChild("Type");
  tdoParamType << rstStruct.Type;
  rdoParam.CreateChild("Uri", rstStruct.Uri);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SystemLogUri& rstStruct)
{
  rdoParam.GetChildByLocalName("Type") >> rstStruct.Type;
  rdoParam.GetChildValueByLocalName("Uri", rstStruct.Uri);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SystemDateTime& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamDateTimeType = rdoParam.CreateChild("DateTimeType");
  tdoParamDateTimeType << rstStruct.DateTimeType;
  rdoParam.CreateChild("DaylightSavings", rstStruct.DaylightSavings);
  if (!(rstStruct.TimeZone).IsNull()) // Optional
  {
    staff::DataObject tdoParamTimeZone = rdoParam.CreateChild("TimeZone");
    tdoParamTimeZone << *rstStruct.TimeZone;
  }
  if (!(rstStruct.UTCDateTime).IsNull()) // Optional
  {
    staff::DataObject tdoParamUTCDateTime = rdoParam.CreateChild("UTCDateTime");
    tdoParamUTCDateTime << *rstStruct.UTCDateTime;
  }
  if (!(rstStruct.LocalDateTime).IsNull()) // Optional
  {
    staff::DataObject tdoParamLocalDateTime = rdoParam.CreateChild("LocalDateTime");
    tdoParamLocalDateTime << *rstStruct.LocalDateTime;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SystemDateTime& rstStruct)
{
  rdoParam.GetChildByLocalName("DateTimeType") >> rstStruct.DateTimeType;
  rdoParam.GetChildValueByLocalName("DaylightSavings", rstStruct.DaylightSavings);
  const staff::DataObject& rdoParamTimeZone = rdoParam.GetChildByLocalNameOpt("TimeZone");
  if (!rdoParamTimeZone.IsNull()) // optional
  {
    rdoParamTimeZone >> *rstStruct.TimeZone;
  }
  const staff::DataObject& rdoParamUTCDateTime = rdoParam.GetChildByLocalNameOpt("UTCDateTime");
  if (!rdoParamUTCDateTime.IsNull()) // optional
  {
    rdoParamUTCDateTime >> *rstStruct.UTCDateTime;
  }
  const staff::DataObject& rdoParamLocalDateTime = rdoParam.GetChildByLocalNameOpt("LocalDateTime");
  if (!rdoParamLocalDateTime.IsNull()) // optional
  {
    rdoParamLocalDateTime >> *rstStruct.LocalDateTime;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TimeZone& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("TZ", rstStruct.TZ);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TimeZone& rstStruct)
{
  rdoParam.GetChildValueByLocalName("TZ", rstStruct.TZ);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Time& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Hour", rstStruct.Hour);
  rdoParam.CreateChild("Minute", rstStruct.Minute);
  rdoParam.CreateChild("Second", rstStruct.Second);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Time& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Hour", rstStruct.Hour);
  rdoParam.GetChildValueByLocalName("Minute", rstStruct.Minute);
  rdoParam.GetChildValueByLocalName("Second", rstStruct.Second);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Date& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Year", rstStruct.Year);
  rdoParam.CreateChild("Month", rstStruct.Month);
  rdoParam.CreateChild("Day", rstStruct.Day);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Date& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Year", rstStruct.Year);
  rdoParam.GetChildValueByLocalName("Month", rstStruct.Month);
  rdoParam.GetChildValueByLocalName("Day", rstStruct.Day);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DateTime& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamTime = rdoParam.CreateChild("Time");
  tdoParamTime << rstStruct.Time;
  staff::DataObject tdoParamDate = rdoParam.CreateChild("Date");
  tdoParamDate << rstStruct.Date;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DateTime& rstStruct)
{
  rdoParam.GetChildByLocalName("Time") >> rstStruct.Time;
  rdoParam.GetChildByLocalName("Date") >> rstStruct.Date;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SystemDateTimeExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SystemDateTimeExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RemoteUser& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Username", rstStruct.Username);
  if (!(rstStruct.Password).IsNull()) // Optional
  {
    rdoParam.CreateChild("Password", *rstStruct.Password);
  }
  rdoParam.CreateChild("UseDerivedPassword", rstStruct.UseDerivedPassword);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RemoteUser& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Username", rstStruct.Username);
  const staff::DataObject& rdoParamPassword = rdoParam.GetChildByLocalNameOpt("Password");
  if (!rdoParamPassword.IsNull()) // optional
  {
    rdoParamPassword.GetValue(*rstStruct.Password);
  }
  rdoParam.GetChildValueByLocalName("UseDerivedPassword", rstStruct.UseDerivedPassword);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::User& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Username", rstStruct.Username);
  if (!(rstStruct.Password).IsNull()) // Optional
  {
    rdoParam.CreateChild("Password", *rstStruct.Password);
  }
  staff::DataObject tdoParamUserLevel = rdoParam.CreateChild("UserLevel");
  tdoParamUserLevel << rstStruct.UserLevel;
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::User& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Username", rstStruct.Username);
  const staff::DataObject& rdoParamPassword = rdoParam.GetChildByLocalNameOpt("Password");
  if (!rdoParamPassword.IsNull()) // optional
  {
    rdoParamPassword.GetValue(*rstStruct.Password);
  }
  rdoParam.GetChildByLocalName("UserLevel") >> rstStruct.UserLevel;
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UserExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UserExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CertificateGenerationParameters& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.CertificateID).IsNull()) // Optional
  {
    rdoParam.CreateChild("CertificateID", *rstStruct.CertificateID);
  }
  if (!(rstStruct.Subject).IsNull()) // Optional
  {
    rdoParam.CreateChild("Subject", *rstStruct.Subject);
  }
  if (!(rstStruct.ValidNotBefore).IsNull()) // Optional
  {
    rdoParam.CreateChild("ValidNotBefore", *rstStruct.ValidNotBefore);
  }
  if (!(rstStruct.ValidNotAfter).IsNull()) // Optional
  {
    rdoParam.CreateChild("ValidNotAfter", *rstStruct.ValidNotAfter);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CertificateGenerationParameters& rstStruct)
{
  const staff::DataObject& rdoParamCertificateID = rdoParam.GetChildByLocalNameOpt("CertificateID");
  if (!rdoParamCertificateID.IsNull()) // optional
  {
    rdoParamCertificateID.GetValue(*rstStruct.CertificateID);
  }
  const staff::DataObject& rdoParamSubject = rdoParam.GetChildByLocalNameOpt("Subject");
  if (!rdoParamSubject.IsNull()) // optional
  {
    rdoParamSubject.GetValue(*rstStruct.Subject);
  }
  const staff::DataObject& rdoParamValidNotBefore = rdoParam.GetChildByLocalNameOpt("ValidNotBefore");
  if (!rdoParamValidNotBefore.IsNull()) // optional
  {
    rdoParamValidNotBefore.GetValue(*rstStruct.ValidNotBefore);
  }
  const staff::DataObject& rdoParamValidNotAfter = rdoParam.GetChildByLocalNameOpt("ValidNotAfter");
  if (!rdoParamValidNotAfter.IsNull()) // optional
  {
    rdoParamValidNotAfter.GetValue(*rstStruct.ValidNotAfter);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CertificateGenerationParametersExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CertificateGenerationParametersExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Certificate& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("CertificateID", rstStruct.CertificateID);
  staff::DataObject tdoParamCertificate = rdoParam.CreateChild("Certificate");
  tdoParamCertificate << rstStruct.Certificate;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Certificate& rstStruct)
{
  rdoParam.GetChildValueByLocalName("CertificateID", rstStruct.CertificateID);
  rdoParam.GetChildByLocalName("Certificate") >> rstStruct.Certificate;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CertificateStatus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("CertificateID", rstStruct.CertificateID);
  rdoParam.CreateChild("Status", rstStruct.Status);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CertificateStatus& rstStruct)
{
  rdoParam.GetChildValueByLocalName("CertificateID", rstStruct.CertificateID);
  rdoParam.GetChildValueByLocalName("Status", rstStruct.Status);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CertificateWithPrivateKey& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.CertificateID).IsNull()) // Optional
  {
    rdoParam.CreateChild("CertificateID", *rstStruct.CertificateID);
  }
  staff::DataObject tdoParamCertificate = rdoParam.CreateChild("Certificate");
  tdoParamCertificate << rstStruct.Certificate;
  staff::DataObject tdoParamPrivateKey = rdoParam.CreateChild("PrivateKey");
  tdoParamPrivateKey << rstStruct.PrivateKey;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CertificateWithPrivateKey& rstStruct)
{
  const staff::DataObject& rdoParamCertificateID = rdoParam.GetChildByLocalNameOpt("CertificateID");
  if (!rdoParamCertificateID.IsNull()) // optional
  {
    rdoParamCertificateID.GetValue(*rstStruct.CertificateID);
  }
  rdoParam.GetChildByLocalName("Certificate") >> rstStruct.Certificate;
  rdoParam.GetChildByLocalName("PrivateKey") >> rstStruct.PrivateKey;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CertificateInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("CertificateID", rstStruct.CertificateID);
  if (!(rstStruct.IssuerDN).IsNull()) // Optional
  {
    rdoParam.CreateChild("IssuerDN", *rstStruct.IssuerDN);
  }
  if (!(rstStruct.SubjectDN).IsNull()) // Optional
  {
    rdoParam.CreateChild("SubjectDN", *rstStruct.SubjectDN);
  }
  if (!(rstStruct.KeyUsage).IsNull()) // Optional
  {
    staff::DataObject tdoParamKeyUsage = rdoParam.CreateChild("KeyUsage");
    tdoParamKeyUsage << *rstStruct.KeyUsage;
  }
  if (!(rstStruct.ExtendedKeyUsage).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtendedKeyUsage = rdoParam.CreateChild("ExtendedKeyUsage");
    tdoParamExtendedKeyUsage << *rstStruct.ExtendedKeyUsage;
  }
  if (!(rstStruct.KeyLength).IsNull()) // Optional
  {
    rdoParam.CreateChild("KeyLength", *rstStruct.KeyLength);
  }
  if (!(rstStruct.Version).IsNull()) // Optional
  {
    rdoParam.CreateChild("Version", *rstStruct.Version);
  }
  if (!(rstStruct.SerialNum).IsNull()) // Optional
  {
    rdoParam.CreateChild("SerialNum", *rstStruct.SerialNum);
  }
  if (!(rstStruct.SignatureAlgorithm).IsNull()) // Optional
  {
    rdoParam.CreateChild("SignatureAlgorithm", *rstStruct.SignatureAlgorithm);
  }
  if (!(rstStruct.Validity).IsNull()) // Optional
  {
    staff::DataObject tdoParamValidity = rdoParam.CreateChild("Validity");
    tdoParamValidity << *rstStruct.Validity;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CertificateInformation& rstStruct)
{
  rdoParam.GetChildValueByLocalName("CertificateID", rstStruct.CertificateID);
  const staff::DataObject& rdoParamIssuerDN = rdoParam.GetChildByLocalNameOpt("IssuerDN");
  if (!rdoParamIssuerDN.IsNull()) // optional
  {
    rdoParamIssuerDN.GetValue(*rstStruct.IssuerDN);
  }
  const staff::DataObject& rdoParamSubjectDN = rdoParam.GetChildByLocalNameOpt("SubjectDN");
  if (!rdoParamSubjectDN.IsNull()) // optional
  {
    rdoParamSubjectDN.GetValue(*rstStruct.SubjectDN);
  }
  const staff::DataObject& rdoParamKeyUsage = rdoParam.GetChildByLocalNameOpt("KeyUsage");
  if (!rdoParamKeyUsage.IsNull()) // optional
  {
    rdoParamKeyUsage >> *rstStruct.KeyUsage;
  }
  const staff::DataObject& rdoParamExtendedKeyUsage = rdoParam.GetChildByLocalNameOpt("ExtendedKeyUsage");
  if (!rdoParamExtendedKeyUsage.IsNull()) // optional
  {
    rdoParamExtendedKeyUsage >> *rstStruct.ExtendedKeyUsage;
  }
  const staff::DataObject& rdoParamKeyLength = rdoParam.GetChildByLocalNameOpt("KeyLength");
  if (!rdoParamKeyLength.IsNull()) // optional
  {
    rdoParamKeyLength.GetValue(*rstStruct.KeyLength);
  }
  const staff::DataObject& rdoParamVersion = rdoParam.GetChildByLocalNameOpt("Version");
  if (!rdoParamVersion.IsNull()) // optional
  {
    rdoParamVersion.GetValue(*rstStruct.Version);
  }
  const staff::DataObject& rdoParamSerialNum = rdoParam.GetChildByLocalNameOpt("SerialNum");
  if (!rdoParamSerialNum.IsNull()) // optional
  {
    rdoParamSerialNum.GetValue(*rstStruct.SerialNum);
  }
  const staff::DataObject& rdoParamSignatureAlgorithm = rdoParam.GetChildByLocalNameOpt("SignatureAlgorithm");
  if (!rdoParamSignatureAlgorithm.IsNull()) // optional
  {
    rdoParamSignatureAlgorithm.GetValue(*rstStruct.SignatureAlgorithm);
  }
  const staff::DataObject& rdoParamValidity = rdoParam.GetChildByLocalNameOpt("Validity");
  if (!rdoParamValidity.IsNull()) // optional
  {
    rdoParamValidity >> *rstStruct.Validity;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CertificateUsage& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetValue(rstStruct.tParent);
  rdoParam.CreateAttribute("Critical", rstStruct.Critical);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CertificateUsage& rstStruct)
{
  rdoParam.GetValue(rstStruct.tParent);
  rdoParam.GetAttributeValueByName("Critical", rstStruct.Critical);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DateTimeRange& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("From", rstStruct.From);
  rdoParam.CreateChild("Until", rstStruct.Until);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DateTimeRange& rstStruct)
{
  rdoParam.GetChildValueByLocalName("From", rstStruct.From);
  rdoParam.GetChildValueByLocalName("Until", rstStruct.Until);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CertificateInformationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CertificateInformationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot1XConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamDot1XConfigurationToken = rdoParam.CreateChild("Dot1XConfigurationToken");
  SerializeTypedef_ReferenceToken(tdoParamDot1XConfigurationToken, rstStruct.Dot1XConfigurationToken);
  rdoParam.CreateChild("Identity", rstStruct.Identity);
  if (!(rstStruct.AnonymousID).IsNull()) // Optional
  {
    rdoParam.CreateChild("AnonymousID", *rstStruct.AnonymousID);
  }
  rdoParam.CreateChild("EAPMethod", rstStruct.EAPMethod);
  for (std::list<staff::token>::const_iterator itItem = (rstStruct.CACertificateID).begin(), itItemEnd = (rstStruct.CACertificateID).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("CACertificateID", (*itItem));
  }

  if (!(rstStruct.EAPMethodConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamEAPMethodConfiguration = rdoParam.CreateChild("EAPMethodConfiguration");
    tdoParamEAPMethodConfiguration << *rstStruct.EAPMethodConfiguration;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot1XConfiguration& rstStruct)
{
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("Dot1XConfigurationToken"), rstStruct.Dot1XConfigurationToken);
  rdoParam.GetChildValueByLocalName("Identity", rstStruct.Identity);
  const staff::DataObject& rdoParamAnonymousID = rdoParam.GetChildByLocalNameOpt("AnonymousID");
  if (!rdoParamAnonymousID.IsNull()) // optional
  {
    rdoParamAnonymousID.GetValue(*rstStruct.AnonymousID);
  }
  rdoParam.GetChildValueByLocalName("EAPMethod", rstStruct.EAPMethod);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "CACertificateID")
    {
      (rstStruct.CACertificateID).push_back(tdoItem.GetText());
    }
  }

  const staff::DataObject& rdoParamEAPMethodConfiguration = rdoParam.GetChildByLocalNameOpt("EAPMethodConfiguration");
  if (!rdoParamEAPMethodConfiguration.IsNull()) // optional
  {
    rdoParamEAPMethodConfiguration >> *rstStruct.EAPMethodConfiguration;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EAPMethodConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.TLSConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamTLSConfiguration = rdoParam.CreateChild("TLSConfiguration");
    tdoParamTLSConfiguration << *rstStruct.TLSConfiguration;
  }
  if (!(rstStruct.Password).IsNull()) // Optional
  {
    rdoParam.CreateChild("Password", *rstStruct.Password);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EAPMethodConfiguration& rstStruct)
{
  const staff::DataObject& rdoParamTLSConfiguration = rdoParam.GetChildByLocalNameOpt("TLSConfiguration");
  if (!rdoParamTLSConfiguration.IsNull()) // optional
  {
    rdoParamTLSConfiguration >> *rstStruct.TLSConfiguration;
  }
  const staff::DataObject& rdoParamPassword = rdoParam.GetChildByLocalNameOpt("Password");
  if (!rdoParamPassword.IsNull()) // optional
  {
    rdoParamPassword.GetValue(*rstStruct.Password);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TLSConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("CertificateID", rstStruct.CertificateID);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TLSConfiguration& rstStruct)
{
  rdoParam.GetChildValueByLocalName("CertificateID", rstStruct.CertificateID);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EapMethodExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EapMethodExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Dot1XConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Dot1XConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GenericEapPwdConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GenericEapPwdConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RelayOutputSettings& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  rdoParam.CreateChild("DelayTime", rstStruct.DelayTime);
  staff::DataObject tdoParamIdleState = rdoParam.CreateChild("IdleState");
  tdoParamIdleState << rstStruct.IdleState;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RelayOutputSettings& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  rdoParam.GetChildValueByLocalName("DelayTime", rstStruct.DelayTime);
  rdoParam.GetChildByLocalName("IdleState") >> rstStruct.IdleState;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RelayOutput& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::DeviceEntity& >(rstStruct);

  staff::DataObject tdoParamProperties = rdoParam.CreateChild("Properties");
  tdoParamProperties << rstStruct.Properties;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RelayOutput& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::DeviceEntity& >(rstStruct);

  rdoParam.GetChildByLocalName("Properties") >> rstStruct.Properties;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DigitalInput& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::DeviceEntity& >(rstStruct);

  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DigitalInput& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::DeviceEntity& >(rstStruct);

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZSpaces& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Space2DDescription >::const_iterator itItem = (rstStruct.AbsolutePanTiltPositionSpace).begin(), itItemEnd = (rstStruct.AbsolutePanTiltPositionSpace).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AbsolutePanTiltPositionSpace");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Space1DDescription >::const_iterator itItem = (rstStruct.AbsoluteZoomPositionSpace).begin(), itItemEnd = (rstStruct.AbsoluteZoomPositionSpace).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AbsoluteZoomPositionSpace");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Space2DDescription >::const_iterator itItem = (rstStruct.RelativePanTiltTranslationSpace).begin(), itItemEnd = (rstStruct.RelativePanTiltTranslationSpace).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("RelativePanTiltTranslationSpace");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Space1DDescription >::const_iterator itItem = (rstStruct.RelativeZoomTranslationSpace).begin(), itItemEnd = (rstStruct.RelativeZoomTranslationSpace).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("RelativeZoomTranslationSpace");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Space2DDescription >::const_iterator itItem = (rstStruct.ContinuousPanTiltVelocitySpace).begin(), itItemEnd = (rstStruct.ContinuousPanTiltVelocitySpace).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ContinuousPanTiltVelocitySpace");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Space1DDescription >::const_iterator itItem = (rstStruct.ContinuousZoomVelocitySpace).begin(), itItemEnd = (rstStruct.ContinuousZoomVelocitySpace).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ContinuousZoomVelocitySpace");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Space1DDescription >::const_iterator itItem = (rstStruct.PanTiltSpeedSpace).begin(), itItemEnd = (rstStruct.PanTiltSpeedSpace).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("PanTiltSpeedSpace");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Space1DDescription >::const_iterator itItem = (rstStruct.ZoomSpeedSpace).begin(), itItemEnd = (rstStruct.ZoomSpeedSpace).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ZoomSpeedSpace");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZSpaces& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AbsolutePanTiltPositionSpace")
    {
      (rstStruct.AbsolutePanTiltPositionSpace).resize((rstStruct.AbsolutePanTiltPositionSpace).size() + 1);
      tdoItem >> (rstStruct.AbsolutePanTiltPositionSpace).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AbsoluteZoomPositionSpace")
    {
      (rstStruct.AbsoluteZoomPositionSpace).resize((rstStruct.AbsoluteZoomPositionSpace).size() + 1);
      tdoItem >> (rstStruct.AbsoluteZoomPositionSpace).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "RelativePanTiltTranslationSpace")
    {
      (rstStruct.RelativePanTiltTranslationSpace).resize((rstStruct.RelativePanTiltTranslationSpace).size() + 1);
      tdoItem >> (rstStruct.RelativePanTiltTranslationSpace).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "RelativeZoomTranslationSpace")
    {
      (rstStruct.RelativeZoomTranslationSpace).resize((rstStruct.RelativeZoomTranslationSpace).size() + 1);
      tdoItem >> (rstStruct.RelativeZoomTranslationSpace).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ContinuousPanTiltVelocitySpace")
    {
      (rstStruct.ContinuousPanTiltVelocitySpace).resize((rstStruct.ContinuousPanTiltVelocitySpace).size() + 1);
      tdoItem >> (rstStruct.ContinuousPanTiltVelocitySpace).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ContinuousZoomVelocitySpace")
    {
      (rstStruct.ContinuousZoomVelocitySpace).resize((rstStruct.ContinuousZoomVelocitySpace).size() + 1);
      tdoItem >> (rstStruct.ContinuousZoomVelocitySpace).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "PanTiltSpeedSpace")
    {
      (rstStruct.PanTiltSpeedSpace).resize((rstStruct.PanTiltSpeedSpace).size() + 1);
      tdoItem >> (rstStruct.PanTiltSpeedSpace).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ZoomSpeedSpace")
    {
      (rstStruct.ZoomSpeedSpace).resize((rstStruct.ZoomSpeedSpace).size() + 1);
      tdoItem >> (rstStruct.ZoomSpeedSpace).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZNode& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::DeviceEntity& >(rstStruct);

  if (!(rstStruct.Name).IsNull()) // Optional
  {
    staff::DataObject tdoParamName = rdoParam.CreateChild("Name");
    SerializeTypedef_Name(tdoParamName, *rstStruct.Name);
  }
  staff::DataObject tdoParamSupportedPTZSpaces = rdoParam.CreateChild("SupportedPTZSpaces");
  tdoParamSupportedPTZSpaces << rstStruct.SupportedPTZSpaces;
  rdoParam.CreateChild("MaximumNumberOfPresets", rstStruct.MaximumNumberOfPresets);
  rdoParam.CreateChild("HomeSupported", rstStruct.HomeSupported);
  for (std::list< ::AuxiliaryData >::const_iterator itItem = (rstStruct.AuxiliaryCommands).begin(), itItemEnd = (rstStruct.AuxiliaryCommands).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AuxiliaryCommands");
    SerializeTypedef_AuxiliaryData(tdoParamItem, (*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  if (!(rstStruct.FixedHomePosition).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("FixedHomePosition", *rstStruct.FixedHomePosition);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZNode& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::DeviceEntity& >(rstStruct);

  const staff::DataObject& rdoParamName = rdoParam.GetChildByLocalNameOpt("Name");
  if (!rdoParamName.IsNull()) // optional
  {
    DeserializeTypedef_Name(rdoParamName, *rstStruct.Name);
  }
  rdoParam.GetChildByLocalName("SupportedPTZSpaces") >> rstStruct.SupportedPTZSpaces;
  rdoParam.GetChildValueByLocalName("MaximumNumberOfPresets", rstStruct.MaximumNumberOfPresets);
  rdoParam.GetChildValueByLocalName("HomeSupported", rstStruct.HomeSupported);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AuxiliaryCommands")
    {
      (rstStruct.AuxiliaryCommands).resize((rstStruct.AuxiliaryCommands).size() + 1);
      DeserializeTypedef_AuxiliaryData(tdoItem, (rstStruct.AuxiliaryCommands).back());
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  const staff::Attribute& rAttrFixedHomePosition = rdoParam.GetAttributeByLocalNameOpt("FixedHomePosition");
  if (!rAttrFixedHomePosition.IsNull()) // optional attribute
  {
    rAttrFixedHomePosition.GetValue(*rstStruct.FixedHomePosition);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZSpacesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZSpacesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourSupported& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("MaximumNumberOfPresetTours", rstStruct.MaximumNumberOfPresetTours);
  for (std::list< ::PTZPresetTourOperation >::const_iterator itItem = (rstStruct.PTZPresetTourOperation).begin(), itItemEnd = (rstStruct.PTZPresetTourOperation).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("PTZPresetTourOperation");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourSupported& rstStruct)
{
  rdoParam.GetChildValueByLocalName("MaximumNumberOfPresetTours", rstStruct.MaximumNumberOfPresetTours);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "PTZPresetTourOperation")
    {
      ::PTZPresetTourOperation tItem;
      tdoItem >> tItem;
      (rstStruct.PTZPresetTourOperation).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZNodeExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  staff::DataObject tdoParamSupportedPresetTour = rdoParam.CreateChild("SupportedPresetTour");
  tdoParamSupportedPresetTour << rstStruct.SupportedPresetTour;
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZNodeExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  rdoParam.GetChildByLocalName("SupportedPresetTour") >> rstStruct.SupportedPresetTour;
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourSupportedExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourSupportedExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZNodeExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZNodeExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZConfigurationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSpaces = rdoParam.CreateChild("Spaces");
  tdoParamSpaces << rstStruct.Spaces;
  staff::DataObject tdoParamPTZTimeout = rdoParam.CreateChild("PTZTimeout");
  tdoParamPTZTimeout << rstStruct.PTZTimeout;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.PTControlDirection).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTControlDirection = rdoParam.CreateChild("PTControlDirection");
    tdoParamPTControlDirection << *rstStruct.PTControlDirection;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZConfigurationOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("Spaces") >> rstStruct.Spaces;
  rdoParam.GetChildByLocalName("PTZTimeout") >> rstStruct.PTZTimeout;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamPTControlDirection = rdoParam.GetChildByLocalNameOpt("PTControlDirection");
  if (!rdoParamPTControlDirection.IsNull()) // optional
  {
    rdoParamPTControlDirection >> *rstStruct.PTControlDirection;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTControlDirectionOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.EFlip).IsNull()) // Optional
  {
    staff::DataObject tdoParamEFlip = rdoParam.CreateChild("EFlip");
    tdoParamEFlip << *rstStruct.EFlip;
  }
  if (!(rstStruct.Reverse).IsNull()) // Optional
  {
    staff::DataObject tdoParamReverse = rdoParam.CreateChild("Reverse");
    tdoParamReverse << *rstStruct.Reverse;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTControlDirectionOptions& rstStruct)
{
  const staff::DataObject& rdoParamEFlip = rdoParam.GetChildByLocalNameOpt("EFlip");
  if (!rdoParamEFlip.IsNull()) // optional
  {
    rdoParamEFlip >> *rstStruct.EFlip;
  }
  const staff::DataObject& rdoParamReverse = rdoParam.GetChildByLocalNameOpt("Reverse");
  if (!rdoParamReverse.IsNull()) // optional
  {
    rdoParamReverse >> *rstStruct.Reverse;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EFlipOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::EFlipMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EFlipOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::EFlipMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EFlipOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EFlipOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ReverseOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::ReverseMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ReverseOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::ReverseMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ReverseOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ReverseOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTControlDirectionOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTControlDirectionOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZConfigurationOptions2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZConfigurationOptions2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZVector& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.PanTilt).IsNull()) // Optional
  {
    staff::DataObject tdoParamPanTilt = rdoParam.CreateChild("PanTilt");
    tdoParamPanTilt << *rstStruct.PanTilt;
  }
  if (!(rstStruct.Zoom).IsNull()) // Optional
  {
    staff::DataObject tdoParamZoom = rdoParam.CreateChild("Zoom");
    tdoParamZoom << *rstStruct.Zoom;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZVector& rstStruct)
{
  const staff::DataObject& rdoParamPanTilt = rdoParam.GetChildByLocalNameOpt("PanTilt");
  if (!rdoParamPanTilt.IsNull()) // optional
  {
    rdoParamPanTilt >> *rstStruct.PanTilt;
  }
  const staff::DataObject& rdoParamZoom = rdoParam.GetChildByLocalNameOpt("Zoom");
  if (!rdoParamZoom.IsNull()) // optional
  {
    rdoParamZoom >> *rstStruct.Zoom;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZStatus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Position).IsNull()) // Optional
  {
    staff::DataObject tdoParamPosition = rdoParam.CreateChild("Position");
    tdoParamPosition << *rstStruct.Position;
  }
  if (!(rstStruct.MoveStatus).IsNull()) // Optional
  {
    staff::DataObject tdoParamMoveStatus = rdoParam.CreateChild("MoveStatus");
    tdoParamMoveStatus << *rstStruct.MoveStatus;
  }
  if (!(rstStruct.Error).IsNull()) // Optional
  {
    rdoParam.CreateChild("Error", *rstStruct.Error);
  }
  rdoParam.CreateChild("UtcTime", rstStruct.UtcTime);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZStatus& rstStruct)
{
  const staff::DataObject& rdoParamPosition = rdoParam.GetChildByLocalNameOpt("Position");
  if (!rdoParamPosition.IsNull()) // optional
  {
    rdoParamPosition >> *rstStruct.Position;
  }
  const staff::DataObject& rdoParamMoveStatus = rdoParam.GetChildByLocalNameOpt("MoveStatus");
  if (!rdoParamMoveStatus.IsNull()) // optional
  {
    rdoParamMoveStatus >> *rstStruct.MoveStatus;
  }
  const staff::DataObject& rdoParamError = rdoParam.GetChildByLocalNameOpt("Error");
  if (!rdoParamError.IsNull()) // optional
  {
    rdoParamError.GetValue(*rstStruct.Error);
  }
  rdoParam.GetChildValueByLocalName("UtcTime", rstStruct.UtcTime);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZMoveStatus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.PanTilt).IsNull()) // Optional
  {
    staff::DataObject tdoParamPanTilt = rdoParam.CreateChild("PanTilt");
    tdoParamPanTilt << *rstStruct.PanTilt;
  }
  if (!(rstStruct.Zoom).IsNull()) // Optional
  {
    staff::DataObject tdoParamZoom = rdoParam.CreateChild("Zoom");
    tdoParamZoom << *rstStruct.Zoom;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZMoveStatus& rstStruct)
{
  const staff::DataObject& rdoParamPanTilt = rdoParam.GetChildByLocalNameOpt("PanTilt");
  if (!rdoParamPanTilt.IsNull()) // optional
  {
    rdoParamPanTilt >> *rstStruct.PanTilt;
  }
  const staff::DataObject& rdoParamZoom = rdoParam.GetChildByLocalNameOpt("Zoom");
  if (!rdoParamZoom.IsNull()) // optional
  {
    rdoParamZoom >> *rstStruct.Zoom;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPreset& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Name).IsNull()) // Optional
  {
    staff::DataObject tdoParamName = rdoParam.CreateChild("Name");
    SerializeTypedef_Name(tdoParamName, *rstStruct.Name);
  }
  if (!(rstStruct.PTZPosition).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTZPosition = rdoParam.CreateChild("PTZPosition");
    tdoParamPTZPosition << *rstStruct.PTZPosition;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  if (!(rstStruct.token).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("token", *rstStruct.token);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPreset& rstStruct)
{
  const staff::DataObject& rdoParamName = rdoParam.GetChildByLocalNameOpt("Name");
  if (!rdoParamName.IsNull()) // optional
  {
    DeserializeTypedef_Name(rdoParamName, *rstStruct.Name);
  }
  const staff::DataObject& rdoParamPTZPosition = rdoParam.GetChildByLocalNameOpt("PTZPosition");
  if (!rdoParamPTZPosition.IsNull()) // optional
  {
    rdoParamPTZPosition >> *rstStruct.PTZPosition;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  const staff::Attribute& rAttrtoken = rdoParam.GetAttributeByLocalNameOpt("token");
  if (!rAttrtoken.IsNull()) // optional attribute
  {
    rAttrtoken.GetValue(*rstStruct.token);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourStatus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamState = rdoParam.CreateChild("State");
  tdoParamState << rstStruct.State;
  if (!(rstStruct.CurrentTourSpot).IsNull()) // Optional
  {
    staff::DataObject tdoParamCurrentTourSpot = rdoParam.CreateChild("CurrentTourSpot");
    tdoParamCurrentTourSpot << *rstStruct.CurrentTourSpot;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourStatus& rstStruct)
{
  rdoParam.GetChildByLocalName("State") >> rstStruct.State;
  const staff::DataObject& rdoParamCurrentTourSpot = rdoParam.GetChildByLocalNameOpt("CurrentTourSpot");
  if (!rdoParamCurrentTourSpot.IsNull()) // optional
  {
    rdoParamCurrentTourSpot >> *rstStruct.CurrentTourSpot;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourStartingCondition& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.RecurringTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("RecurringTime", *rstStruct.RecurringTime);
  }
  if (!(rstStruct.RecurringDuration).IsNull()) // Optional
  {
    rdoParam.CreateChild("RecurringDuration", *rstStruct.RecurringDuration);
  }
  if (!(rstStruct.Direction).IsNull()) // Optional
  {
    staff::DataObject tdoParamDirection = rdoParam.CreateChild("Direction");
    tdoParamDirection << *rstStruct.Direction;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourStartingCondition& rstStruct)
{
  const staff::DataObject& rdoParamRecurringTime = rdoParam.GetChildByLocalNameOpt("RecurringTime");
  if (!rdoParamRecurringTime.IsNull()) // optional
  {
    rdoParamRecurringTime.GetValue(*rstStruct.RecurringTime);
  }
  const staff::DataObject& rdoParamRecurringDuration = rdoParam.GetChildByLocalNameOpt("RecurringDuration");
  if (!rdoParamRecurringDuration.IsNull()) // optional
  {
    rdoParamRecurringDuration.GetValue(*rstStruct.RecurringDuration);
  }
  const staff::DataObject& rdoParamDirection = rdoParam.GetChildByLocalNameOpt("Direction");
  if (!rdoParamDirection.IsNull()) // optional
  {
    rdoParamDirection >> *rstStruct.Direction;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PresetTour& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Name).IsNull()) // Optional
  {
    staff::DataObject tdoParamName = rdoParam.CreateChild("Name");
    SerializeTypedef_Name(tdoParamName, *rstStruct.Name);
  }
  staff::DataObject tdoParamStatus = rdoParam.CreateChild("Status");
  tdoParamStatus << rstStruct.Status;
  rdoParam.CreateChild("AutoStart", rstStruct.AutoStart);
  staff::DataObject tdoParamStartingCondition = rdoParam.CreateChild("StartingCondition");
  tdoParamStartingCondition << rstStruct.StartingCondition;
  for (std::list< ::PTZPresetTourSpot >::const_iterator itItem = (rstStruct.TourSpot).begin(), itItemEnd = (rstStruct.TourSpot).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("TourSpot");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  if (!(rstStruct.token).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("token", *rstStruct.token);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PresetTour& rstStruct)
{
  const staff::DataObject& rdoParamName = rdoParam.GetChildByLocalNameOpt("Name");
  if (!rdoParamName.IsNull()) // optional
  {
    DeserializeTypedef_Name(rdoParamName, *rstStruct.Name);
  }
  rdoParam.GetChildByLocalName("Status") >> rstStruct.Status;
  rdoParam.GetChildValueByLocalName("AutoStart", rstStruct.AutoStart);
  rdoParam.GetChildByLocalName("StartingCondition") >> rstStruct.StartingCondition;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "TourSpot")
    {
      (rstStruct.TourSpot).resize((rstStruct.TourSpot).size() + 1);
      tdoItem >> (rstStruct.TourSpot).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  const staff::Attribute& rAttrtoken = rdoParam.GetAttributeByLocalNameOpt("token");
  if (!rAttrtoken.IsNull()) // optional attribute
  {
    rAttrtoken.GetValue(*rstStruct.token);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourPresetDetail& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.PresetToken).IsNull()) // Optional
  {
    staff::DataObject tdoParamPresetToken = rdoParam.CreateChild("PresetToken");
    SerializeTypedef_ReferenceToken(tdoParamPresetToken, *rstStruct.PresetToken);
  }
  if (!(rstStruct.Home).IsNull()) // Optional
  {
    rdoParam.CreateChild("Home", *rstStruct.Home);
  }
  if (!(rstStruct.PTZPosition).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTZPosition = rdoParam.CreateChild("PTZPosition");
    tdoParamPTZPosition << *rstStruct.PTZPosition;
  }
  if (!(rstStruct.TypeExtension).IsNull()) // Optional
  {
    staff::DataObject tdoParamTypeExtension = rdoParam.CreateChild("TypeExtension");
    tdoParamTypeExtension << *rstStruct.TypeExtension;
  }
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourPresetDetail& rstStruct)
{
  const staff::DataObject& rdoParamPresetToken = rdoParam.GetChildByLocalNameOpt("PresetToken");
  if (!rdoParamPresetToken.IsNull()) // optional
  {
    DeserializeTypedef_ReferenceToken(rdoParamPresetToken, *rstStruct.PresetToken);
  }
  const staff::DataObject& rdoParamHome = rdoParam.GetChildByLocalNameOpt("Home");
  if (!rdoParamHome.IsNull()) // optional
  {
    rdoParamHome.GetValue(*rstStruct.Home);
  }
  const staff::DataObject& rdoParamPTZPosition = rdoParam.GetChildByLocalNameOpt("PTZPosition");
  if (!rdoParamPTZPosition.IsNull()) // optional
  {
    rdoParamPTZPosition >> *rstStruct.PTZPosition;
  }
  const staff::DataObject& rdoParamTypeExtension = rdoParam.GetChildByLocalNameOpt("TypeExtension");
  if (!rdoParamTypeExtension.IsNull()) // optional
  {
    rdoParamTypeExtension >> *rstStruct.TypeExtension;
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourSpot& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamPresetDetail = rdoParam.CreateChild("PresetDetail");
  tdoParamPresetDetail << rstStruct.PresetDetail;
  if (!(rstStruct.Speed).IsNull()) // Optional
  {
    staff::DataObject tdoParamSpeed = rdoParam.CreateChild("Speed");
    tdoParamSpeed << *rstStruct.Speed;
  }
  if (!(rstStruct.StayTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("StayTime", *rstStruct.StayTime);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourSpot& rstStruct)
{
  rdoParam.GetChildByLocalName("PresetDetail") >> rstStruct.PresetDetail;
  const staff::DataObject& rdoParamSpeed = rdoParam.GetChildByLocalNameOpt("Speed");
  if (!rdoParamSpeed.IsNull()) // optional
  {
    rdoParamSpeed >> *rstStruct.Speed;
  }
  const staff::DataObject& rdoParamStayTime = rdoParam.GetChildByLocalNameOpt("StayTime");
  if (!rdoParamStayTime.IsNull()) // optional
  {
    rdoParamStayTime.GetValue(*rstStruct.StayTime);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourTypeExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourTypeExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourSpotExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourSpotExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourStatusExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourStatusExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourStartingConditionExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourStartingConditionExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourStartingConditionOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.RecurringTime).IsNull()) // Optional
  {
    staff::DataObject tdoParamRecurringTime = rdoParam.CreateChild("RecurringTime");
    tdoParamRecurringTime << *rstStruct.RecurringTime;
  }
  if (!(rstStruct.RecurringDuration).IsNull()) // Optional
  {
    staff::DataObject tdoParamRecurringDuration = rdoParam.CreateChild("RecurringDuration");
    tdoParamRecurringDuration << *rstStruct.RecurringDuration;
  }
  for (std::list< ::PTZPresetTourDirection >::const_iterator itItem = (rstStruct.Direction).begin(), itItemEnd = (rstStruct.Direction).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Direction");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourStartingConditionOptions& rstStruct)
{
  const staff::DataObject& rdoParamRecurringTime = rdoParam.GetChildByLocalNameOpt("RecurringTime");
  if (!rdoParamRecurringTime.IsNull()) // optional
  {
    rdoParamRecurringTime >> *rstStruct.RecurringTime;
  }
  const staff::DataObject& rdoParamRecurringDuration = rdoParam.GetChildByLocalNameOpt("RecurringDuration");
  if (!rdoParamRecurringDuration.IsNull()) // optional
  {
    rdoParamRecurringDuration >> *rstStruct.RecurringDuration;
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Direction")
    {
      ::PTZPresetTourDirection tItem;
      tdoItem >> tItem;
      (rstStruct.Direction).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourPresetDetailOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::ReferenceToken >::const_iterator itItem = (rstStruct.PresetToken).begin(), itItemEnd = (rstStruct.PresetToken).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("PresetToken");
    SerializeTypedef_ReferenceToken(tdoParamItem, (*itItem));
  }

  if (!(rstStruct.Home).IsNull()) // Optional
  {
    rdoParam.CreateChild("Home", *rstStruct.Home);
  }
  if (!(rstStruct.PanTiltPositionSpace).IsNull()) // Optional
  {
    staff::DataObject tdoParamPanTiltPositionSpace = rdoParam.CreateChild("PanTiltPositionSpace");
    tdoParamPanTiltPositionSpace << *rstStruct.PanTiltPositionSpace;
  }
  if (!(rstStruct.ZoomPositionSpace).IsNull()) // Optional
  {
    staff::DataObject tdoParamZoomPositionSpace = rdoParam.CreateChild("ZoomPositionSpace");
    tdoParamZoomPositionSpace << *rstStruct.ZoomPositionSpace;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourPresetDetailOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "PresetToken")
    {
      (rstStruct.PresetToken).resize((rstStruct.PresetToken).size() + 1);
      DeserializeTypedef_ReferenceToken(tdoItem, (rstStruct.PresetToken).back());
    }
  }

  const staff::DataObject& rdoParamHome = rdoParam.GetChildByLocalNameOpt("Home");
  if (!rdoParamHome.IsNull()) // optional
  {
    rdoParamHome.GetValue(*rstStruct.Home);
  }
  const staff::DataObject& rdoParamPanTiltPositionSpace = rdoParam.GetChildByLocalNameOpt("PanTiltPositionSpace");
  if (!rdoParamPanTiltPositionSpace.IsNull()) // optional
  {
    rdoParamPanTiltPositionSpace >> *rstStruct.PanTiltPositionSpace;
  }
  const staff::DataObject& rdoParamZoomPositionSpace = rdoParam.GetChildByLocalNameOpt("ZoomPositionSpace");
  if (!rdoParamZoomPositionSpace.IsNull()) // optional
  {
    rdoParamZoomPositionSpace >> *rstStruct.ZoomPositionSpace;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourSpotOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamPresetDetail = rdoParam.CreateChild("PresetDetail");
  tdoParamPresetDetail << rstStruct.PresetDetail;
  staff::DataObject tdoParamStayTime = rdoParam.CreateChild("StayTime");
  tdoParamStayTime << rstStruct.StayTime;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourSpotOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("PresetDetail") >> rstStruct.PresetDetail;
  rdoParam.GetChildByLocalName("StayTime") >> rstStruct.StayTime;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("AutoStart", rstStruct.AutoStart);
  staff::DataObject tdoParamStartingCondition = rdoParam.CreateChild("StartingCondition");
  tdoParamStartingCondition << rstStruct.StartingCondition;
  staff::DataObject tdoParamTourSpot = rdoParam.CreateChild("TourSpot");
  tdoParamTourSpot << rstStruct.TourSpot;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourOptions& rstStruct)
{
  rdoParam.GetChildValueByLocalName("AutoStart", rstStruct.AutoStart);
  rdoParam.GetChildByLocalName("StartingCondition") >> rstStruct.StartingCondition;
  rdoParam.GetChildByLocalName("TourSpot") >> rstStruct.TourSpot;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourStartingConditionOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourStartingConditionOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPresetTourPresetDetailOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPresetTourPresetDetailOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusStatus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Position", rstStruct.Position);
  staff::DataObject tdoParamMoveStatus = rdoParam.CreateChild("MoveStatus");
  tdoParamMoveStatus << rstStruct.MoveStatus;
  rdoParam.CreateChild("Error", rstStruct.Error);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusStatus& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Position", rstStruct.Position);
  rdoParam.GetChildByLocalName("MoveStatus") >> rstStruct.MoveStatus;
  rdoParam.GetChildValueByLocalName("Error", rstStruct.Error);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingStatus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamFocusStatus = rdoParam.CreateChild("FocusStatus");
  tdoParamFocusStatus << rstStruct.FocusStatus;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingStatus& rstStruct)
{
  rdoParam.GetChildByLocalName("FocusStatus") >> rstStruct.FocusStatus;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::BacklightCompensationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::WideDynamicMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamLevel = rdoParam.CreateChild("Level");
  tdoParamLevel << rstStruct.Level;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::BacklightCompensationOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::WideDynamicMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  rdoParam.GetChildByLocalName("Level") >> rstStruct.Level;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ExposureOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::ExposureMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::ExposurePriority >::const_iterator itItem = (rstStruct.Priority).begin(), itItemEnd = (rstStruct.Priority).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Priority");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamMinExposureTime = rdoParam.CreateChild("MinExposureTime");
  tdoParamMinExposureTime << rstStruct.MinExposureTime;
  staff::DataObject tdoParamMaxExposureTime = rdoParam.CreateChild("MaxExposureTime");
  tdoParamMaxExposureTime << rstStruct.MaxExposureTime;
  staff::DataObject tdoParamMinGain = rdoParam.CreateChild("MinGain");
  tdoParamMinGain << rstStruct.MinGain;
  staff::DataObject tdoParamMaxGain = rdoParam.CreateChild("MaxGain");
  tdoParamMaxGain << rstStruct.MaxGain;
  staff::DataObject tdoParamMinIris = rdoParam.CreateChild("MinIris");
  tdoParamMinIris << rstStruct.MinIris;
  staff::DataObject tdoParamMaxIris = rdoParam.CreateChild("MaxIris");
  tdoParamMaxIris << rstStruct.MaxIris;
  staff::DataObject tdoParamExposureTime = rdoParam.CreateChild("ExposureTime");
  tdoParamExposureTime << rstStruct.ExposureTime;
  staff::DataObject tdoParamGain = rdoParam.CreateChild("Gain");
  tdoParamGain << rstStruct.Gain;
  staff::DataObject tdoParamIris = rdoParam.CreateChild("Iris");
  tdoParamIris << rstStruct.Iris;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ExposureOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::ExposureMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Priority")
    {
      ::ExposurePriority tItem;
      tdoItem >> tItem;
      (rstStruct.Priority).push_back(tItem);
    }
  }

  rdoParam.GetChildByLocalName("MinExposureTime") >> rstStruct.MinExposureTime;
  rdoParam.GetChildByLocalName("MaxExposureTime") >> rstStruct.MaxExposureTime;
  rdoParam.GetChildByLocalName("MinGain") >> rstStruct.MinGain;
  rdoParam.GetChildByLocalName("MaxGain") >> rstStruct.MaxGain;
  rdoParam.GetChildByLocalName("MinIris") >> rstStruct.MinIris;
  rdoParam.GetChildByLocalName("MaxIris") >> rstStruct.MaxIris;
  rdoParam.GetChildByLocalName("ExposureTime") >> rstStruct.ExposureTime;
  rdoParam.GetChildByLocalName("Gain") >> rstStruct.Gain;
  rdoParam.GetChildByLocalName("Iris") >> rstStruct.Iris;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::AutoFocusMode >::const_iterator itItem = (rstStruct.AutoFocusModes).begin(), itItemEnd = (rstStruct.AutoFocusModes).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AutoFocusModes");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamDefaultSpeed = rdoParam.CreateChild("DefaultSpeed");
  tdoParamDefaultSpeed << rstStruct.DefaultSpeed;
  staff::DataObject tdoParamNearLimit = rdoParam.CreateChild("NearLimit");
  tdoParamNearLimit << rstStruct.NearLimit;
  staff::DataObject tdoParamFarLimit = rdoParam.CreateChild("FarLimit");
  tdoParamFarLimit << rstStruct.FarLimit;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AutoFocusModes")
    {
      ::AutoFocusMode tItem;
      tdoItem >> tItem;
      (rstStruct.AutoFocusModes).push_back(tItem);
    }
  }

  rdoParam.GetChildByLocalName("DefaultSpeed") >> rstStruct.DefaultSpeed;
  rdoParam.GetChildByLocalName("NearLimit") >> rstStruct.NearLimit;
  rdoParam.GetChildByLocalName("FarLimit") >> rstStruct.FarLimit;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WideDynamicRangeOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::WideDynamicMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamLevel = rdoParam.CreateChild("Level");
  tdoParamLevel << rstStruct.Level;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WideDynamicRangeOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::WideDynamicMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  rdoParam.GetChildByLocalName("Level") >> rstStruct.Level;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WhiteBalanceOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::WhiteBalanceMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamYrGain = rdoParam.CreateChild("YrGain");
  tdoParamYrGain << rstStruct.YrGain;
  staff::DataObject tdoParamYbGain = rdoParam.CreateChild("YbGain");
  tdoParamYbGain << rstStruct.YbGain;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WhiteBalanceOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::WhiteBalanceMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  rdoParam.GetChildByLocalName("YrGain") >> rstStruct.YrGain;
  rdoParam.GetChildByLocalName("YbGain") >> rstStruct.YbGain;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamBacklightCompensation = rdoParam.CreateChild("BacklightCompensation");
  tdoParamBacklightCompensation << rstStruct.BacklightCompensation;
  staff::DataObject tdoParamBrightness = rdoParam.CreateChild("Brightness");
  tdoParamBrightness << rstStruct.Brightness;
  staff::DataObject tdoParamColorSaturation = rdoParam.CreateChild("ColorSaturation");
  tdoParamColorSaturation << rstStruct.ColorSaturation;
  staff::DataObject tdoParamContrast = rdoParam.CreateChild("Contrast");
  tdoParamContrast << rstStruct.Contrast;
  staff::DataObject tdoParamExposure = rdoParam.CreateChild("Exposure");
  tdoParamExposure << rstStruct.Exposure;
  staff::DataObject tdoParamFocus = rdoParam.CreateChild("Focus");
  tdoParamFocus << rstStruct.Focus;
  for (std::list< ::IrCutFilterMode >::const_iterator itItem = (rstStruct.IrCutFilterModes).begin(), itItemEnd = (rstStruct.IrCutFilterModes).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("IrCutFilterModes");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamSharpness = rdoParam.CreateChild("Sharpness");
  tdoParamSharpness << rstStruct.Sharpness;
  staff::DataObject tdoParamWideDynamicRange = rdoParam.CreateChild("WideDynamicRange");
  tdoParamWideDynamicRange << rstStruct.WideDynamicRange;
  staff::DataObject tdoParamWhiteBalance = rdoParam.CreateChild("WhiteBalance");
  tdoParamWhiteBalance << rstStruct.WhiteBalance;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("BacklightCompensation") >> rstStruct.BacklightCompensation;
  rdoParam.GetChildByLocalName("Brightness") >> rstStruct.Brightness;
  rdoParam.GetChildByLocalName("ColorSaturation") >> rstStruct.ColorSaturation;
  rdoParam.GetChildByLocalName("Contrast") >> rstStruct.Contrast;
  rdoParam.GetChildByLocalName("Exposure") >> rstStruct.Exposure;
  rdoParam.GetChildByLocalName("Focus") >> rstStruct.Focus;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "IrCutFilterModes")
    {
      ::IrCutFilterMode tItem;
      tdoItem >> tItem;
      (rstStruct.IrCutFilterModes).push_back(tItem);
    }
  }

  rdoParam.GetChildByLocalName("Sharpness") >> rstStruct.Sharpness;
  rdoParam.GetChildByLocalName("WideDynamicRange") >> rstStruct.WideDynamicRange;
  rdoParam.GetChildByLocalName("WhiteBalance") >> rstStruct.WhiteBalance;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusMove& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Absolute).IsNull()) // Optional
  {
    staff::DataObject tdoParamAbsolute = rdoParam.CreateChild("Absolute");
    tdoParamAbsolute << *rstStruct.Absolute;
  }
  if (!(rstStruct.Relative).IsNull()) // Optional
  {
    staff::DataObject tdoParamRelative = rdoParam.CreateChild("Relative");
    tdoParamRelative << *rstStruct.Relative;
  }
  if (!(rstStruct.Continuous).IsNull()) // Optional
  {
    staff::DataObject tdoParamContinuous = rdoParam.CreateChild("Continuous");
    tdoParamContinuous << *rstStruct.Continuous;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusMove& rstStruct)
{
  const staff::DataObject& rdoParamAbsolute = rdoParam.GetChildByLocalNameOpt("Absolute");
  if (!rdoParamAbsolute.IsNull()) // optional
  {
    rdoParamAbsolute >> *rstStruct.Absolute;
  }
  const staff::DataObject& rdoParamRelative = rdoParam.GetChildByLocalNameOpt("Relative");
  if (!rdoParamRelative.IsNull()) // optional
  {
    rdoParamRelative >> *rstStruct.Relative;
  }
  const staff::DataObject& rdoParamContinuous = rdoParam.GetChildByLocalNameOpt("Continuous");
  if (!rdoParamContinuous.IsNull()) // optional
  {
    rdoParamContinuous >> *rstStruct.Continuous;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AbsoluteFocus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Position", rstStruct.Position);
  if (!(rstStruct.Speed).IsNull()) // Optional
  {
    rdoParam.CreateChild("Speed", *rstStruct.Speed);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AbsoluteFocus& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Position", rstStruct.Position);
  const staff::DataObject& rdoParamSpeed = rdoParam.GetChildByLocalNameOpt("Speed");
  if (!rdoParamSpeed.IsNull()) // optional
  {
    rdoParamSpeed.GetValue(*rstStruct.Speed);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RelativeFocus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Distance", rstStruct.Distance);
  if (!(rstStruct.Speed).IsNull()) // Optional
  {
    rdoParam.CreateChild("Speed", *rstStruct.Speed);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RelativeFocus& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Distance", rstStruct.Distance);
  const staff::DataObject& rdoParamSpeed = rdoParam.GetChildByLocalNameOpt("Speed");
  if (!rdoParamSpeed.IsNull()) // optional
  {
    rdoParamSpeed.GetValue(*rstStruct.Speed);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ContinuousFocus& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Speed", rstStruct.Speed);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ContinuousFocus& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Speed", rstStruct.Speed);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MoveOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Absolute).IsNull()) // Optional
  {
    staff::DataObject tdoParamAbsolute = rdoParam.CreateChild("Absolute");
    tdoParamAbsolute << *rstStruct.Absolute;
  }
  if (!(rstStruct.Relative).IsNull()) // Optional
  {
    staff::DataObject tdoParamRelative = rdoParam.CreateChild("Relative");
    tdoParamRelative << *rstStruct.Relative;
  }
  if (!(rstStruct.Continuous).IsNull()) // Optional
  {
    staff::DataObject tdoParamContinuous = rdoParam.CreateChild("Continuous");
    tdoParamContinuous << *rstStruct.Continuous;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MoveOptions& rstStruct)
{
  const staff::DataObject& rdoParamAbsolute = rdoParam.GetChildByLocalNameOpt("Absolute");
  if (!rdoParamAbsolute.IsNull()) // optional
  {
    rdoParamAbsolute >> *rstStruct.Absolute;
  }
  const staff::DataObject& rdoParamRelative = rdoParam.GetChildByLocalNameOpt("Relative");
  if (!rdoParamRelative.IsNull()) // optional
  {
    rdoParamRelative >> *rstStruct.Relative;
  }
  const staff::DataObject& rdoParamContinuous = rdoParam.GetChildByLocalNameOpt("Continuous");
  if (!rdoParamContinuous.IsNull()) // optional
  {
    rdoParamContinuous >> *rstStruct.Continuous;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AbsoluteFocusOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamPosition = rdoParam.CreateChild("Position");
  tdoParamPosition << rstStruct.Position;
  if (!(rstStruct.Speed).IsNull()) // Optional
  {
    staff::DataObject tdoParamSpeed = rdoParam.CreateChild("Speed");
    tdoParamSpeed << *rstStruct.Speed;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AbsoluteFocusOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("Position") >> rstStruct.Position;
  const staff::DataObject& rdoParamSpeed = rdoParam.GetChildByLocalNameOpt("Speed");
  if (!rdoParamSpeed.IsNull()) // optional
  {
    rdoParamSpeed >> *rstStruct.Speed;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RelativeFocusOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamDistance = rdoParam.CreateChild("Distance");
  tdoParamDistance << rstStruct.Distance;
  staff::DataObject tdoParamSpeed = rdoParam.CreateChild("Speed");
  tdoParamSpeed << rstStruct.Speed;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RelativeFocusOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("Distance") >> rstStruct.Distance;
  rdoParam.GetChildByLocalName("Speed") >> rstStruct.Speed;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ContinuousFocusOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSpeed = rdoParam.CreateChild("Speed");
  tdoParamSpeed << rstStruct.Speed;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ContinuousFocusOptions& rstStruct)
{
  rdoParam.GetChildByLocalName("Speed") >> rstStruct.Speed;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingStatus20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.FocusStatus20).IsNull()) // Optional
  {
    staff::DataObject tdoParamFocusStatus20 = rdoParam.CreateChild("FocusStatus20");
    tdoParamFocusStatus20 << *rstStruct.FocusStatus20;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingStatus20& rstStruct)
{
  const staff::DataObject& rdoParamFocusStatus20 = rdoParam.GetChildByLocalNameOpt("FocusStatus20");
  if (!rdoParamFocusStatus20.IsNull()) // optional
  {
    rdoParamFocusStatus20 >> *rstStruct.FocusStatus20;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusStatus20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Position", rstStruct.Position);
  staff::DataObject tdoParamMoveStatus = rdoParam.CreateChild("MoveStatus");
  tdoParamMoveStatus << rstStruct.MoveStatus;
  if (!(rstStruct.Error).IsNull()) // Optional
  {
    rdoParam.CreateChild("Error", *rstStruct.Error);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusStatus20& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Position", rstStruct.Position);
  rdoParam.GetChildByLocalName("MoveStatus") >> rstStruct.MoveStatus;
  const staff::DataObject& rdoParamError = rdoParam.GetChildByLocalNameOpt("Error");
  if (!rdoParamError.IsNull()) // optional
  {
    rdoParamError.GetValue(*rstStruct.Error);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusStatus20Extension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusStatus20Extension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingStatus20Extension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingStatus20Extension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingOptions20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.BacklightCompensation).IsNull()) // Optional
  {
    staff::DataObject tdoParamBacklightCompensation = rdoParam.CreateChild("BacklightCompensation");
    tdoParamBacklightCompensation << *rstStruct.BacklightCompensation;
  }
  if (!(rstStruct.Brightness).IsNull()) // Optional
  {
    staff::DataObject tdoParamBrightness = rdoParam.CreateChild("Brightness");
    tdoParamBrightness << *rstStruct.Brightness;
  }
  if (!(rstStruct.ColorSaturation).IsNull()) // Optional
  {
    staff::DataObject tdoParamColorSaturation = rdoParam.CreateChild("ColorSaturation");
    tdoParamColorSaturation << *rstStruct.ColorSaturation;
  }
  if (!(rstStruct.Contrast).IsNull()) // Optional
  {
    staff::DataObject tdoParamContrast = rdoParam.CreateChild("Contrast");
    tdoParamContrast << *rstStruct.Contrast;
  }
  if (!(rstStruct.Exposure).IsNull()) // Optional
  {
    staff::DataObject tdoParamExposure = rdoParam.CreateChild("Exposure");
    tdoParamExposure << *rstStruct.Exposure;
  }
  if (!(rstStruct.Focus).IsNull()) // Optional
  {
    staff::DataObject tdoParamFocus = rdoParam.CreateChild("Focus");
    tdoParamFocus << *rstStruct.Focus;
  }
  for (std::list< ::IrCutFilterMode >::const_iterator itItem = (rstStruct.IrCutFilterModes).begin(), itItemEnd = (rstStruct.IrCutFilterModes).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("IrCutFilterModes");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Sharpness).IsNull()) // Optional
  {
    staff::DataObject tdoParamSharpness = rdoParam.CreateChild("Sharpness");
    tdoParamSharpness << *rstStruct.Sharpness;
  }
  if (!(rstStruct.WideDynamicRange).IsNull()) // Optional
  {
    staff::DataObject tdoParamWideDynamicRange = rdoParam.CreateChild("WideDynamicRange");
    tdoParamWideDynamicRange << *rstStruct.WideDynamicRange;
  }
  if (!(rstStruct.WhiteBalance).IsNull()) // Optional
  {
    staff::DataObject tdoParamWhiteBalance = rdoParam.CreateChild("WhiteBalance");
    tdoParamWhiteBalance << *rstStruct.WhiteBalance;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingOptions20& rstStruct)
{
  const staff::DataObject& rdoParamBacklightCompensation = rdoParam.GetChildByLocalNameOpt("BacklightCompensation");
  if (!rdoParamBacklightCompensation.IsNull()) // optional
  {
    rdoParamBacklightCompensation >> *rstStruct.BacklightCompensation;
  }
  const staff::DataObject& rdoParamBrightness = rdoParam.GetChildByLocalNameOpt("Brightness");
  if (!rdoParamBrightness.IsNull()) // optional
  {
    rdoParamBrightness >> *rstStruct.Brightness;
  }
  const staff::DataObject& rdoParamColorSaturation = rdoParam.GetChildByLocalNameOpt("ColorSaturation");
  if (!rdoParamColorSaturation.IsNull()) // optional
  {
    rdoParamColorSaturation >> *rstStruct.ColorSaturation;
  }
  const staff::DataObject& rdoParamContrast = rdoParam.GetChildByLocalNameOpt("Contrast");
  if (!rdoParamContrast.IsNull()) // optional
  {
    rdoParamContrast >> *rstStruct.Contrast;
  }
  const staff::DataObject& rdoParamExposure = rdoParam.GetChildByLocalNameOpt("Exposure");
  if (!rdoParamExposure.IsNull()) // optional
  {
    rdoParamExposure >> *rstStruct.Exposure;
  }
  const staff::DataObject& rdoParamFocus = rdoParam.GetChildByLocalNameOpt("Focus");
  if (!rdoParamFocus.IsNull()) // optional
  {
    rdoParamFocus >> *rstStruct.Focus;
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "IrCutFilterModes")
    {
      ::IrCutFilterMode tItem;
      tdoItem >> tItem;
      (rstStruct.IrCutFilterModes).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamSharpness = rdoParam.GetChildByLocalNameOpt("Sharpness");
  if (!rdoParamSharpness.IsNull()) // optional
  {
    rdoParamSharpness >> *rstStruct.Sharpness;
  }
  const staff::DataObject& rdoParamWideDynamicRange = rdoParam.GetChildByLocalNameOpt("WideDynamicRange");
  if (!rdoParamWideDynamicRange.IsNull()) // optional
  {
    rdoParamWideDynamicRange >> *rstStruct.WideDynamicRange;
  }
  const staff::DataObject& rdoParamWhiteBalance = rdoParam.GetChildByLocalNameOpt("WhiteBalance");
  if (!rdoParamWhiteBalance.IsNull()) // optional
  {
    rdoParamWhiteBalance >> *rstStruct.WhiteBalance;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::BacklightCompensationOptions20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::BacklightCompensationMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Level).IsNull()) // Optional
  {
    staff::DataObject tdoParamLevel = rdoParam.CreateChild("Level");
    tdoParamLevel << *rstStruct.Level;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::BacklightCompensationOptions20& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::BacklightCompensationMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamLevel = rdoParam.GetChildByLocalNameOpt("Level");
  if (!rdoParamLevel.IsNull()) // optional
  {
    rdoParamLevel >> *rstStruct.Level;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ExposureOptions20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::ExposureMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::ExposurePriority >::const_iterator itItem = (rstStruct.Priority).begin(), itItemEnd = (rstStruct.Priority).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Priority");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.MinExposureTime).IsNull()) // Optional
  {
    staff::DataObject tdoParamMinExposureTime = rdoParam.CreateChild("MinExposureTime");
    tdoParamMinExposureTime << *rstStruct.MinExposureTime;
  }
  if (!(rstStruct.MaxExposureTime).IsNull()) // Optional
  {
    staff::DataObject tdoParamMaxExposureTime = rdoParam.CreateChild("MaxExposureTime");
    tdoParamMaxExposureTime << *rstStruct.MaxExposureTime;
  }
  if (!(rstStruct.MinGain).IsNull()) // Optional
  {
    staff::DataObject tdoParamMinGain = rdoParam.CreateChild("MinGain");
    tdoParamMinGain << *rstStruct.MinGain;
  }
  if (!(rstStruct.MaxGain).IsNull()) // Optional
  {
    staff::DataObject tdoParamMaxGain = rdoParam.CreateChild("MaxGain");
    tdoParamMaxGain << *rstStruct.MaxGain;
  }
  if (!(rstStruct.MinIris).IsNull()) // Optional
  {
    staff::DataObject tdoParamMinIris = rdoParam.CreateChild("MinIris");
    tdoParamMinIris << *rstStruct.MinIris;
  }
  if (!(rstStruct.MaxIris).IsNull()) // Optional
  {
    staff::DataObject tdoParamMaxIris = rdoParam.CreateChild("MaxIris");
    tdoParamMaxIris << *rstStruct.MaxIris;
  }
  if (!(rstStruct.ExposureTime).IsNull()) // Optional
  {
    staff::DataObject tdoParamExposureTime = rdoParam.CreateChild("ExposureTime");
    tdoParamExposureTime << *rstStruct.ExposureTime;
  }
  if (!(rstStruct.Gain).IsNull()) // Optional
  {
    staff::DataObject tdoParamGain = rdoParam.CreateChild("Gain");
    tdoParamGain << *rstStruct.Gain;
  }
  if (!(rstStruct.Iris).IsNull()) // Optional
  {
    staff::DataObject tdoParamIris = rdoParam.CreateChild("Iris");
    tdoParamIris << *rstStruct.Iris;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ExposureOptions20& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::ExposureMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Priority")
    {
      ::ExposurePriority tItem;
      tdoItem >> tItem;
      (rstStruct.Priority).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamMinExposureTime = rdoParam.GetChildByLocalNameOpt("MinExposureTime");
  if (!rdoParamMinExposureTime.IsNull()) // optional
  {
    rdoParamMinExposureTime >> *rstStruct.MinExposureTime;
  }
  const staff::DataObject& rdoParamMaxExposureTime = rdoParam.GetChildByLocalNameOpt("MaxExposureTime");
  if (!rdoParamMaxExposureTime.IsNull()) // optional
  {
    rdoParamMaxExposureTime >> *rstStruct.MaxExposureTime;
  }
  const staff::DataObject& rdoParamMinGain = rdoParam.GetChildByLocalNameOpt("MinGain");
  if (!rdoParamMinGain.IsNull()) // optional
  {
    rdoParamMinGain >> *rstStruct.MinGain;
  }
  const staff::DataObject& rdoParamMaxGain = rdoParam.GetChildByLocalNameOpt("MaxGain");
  if (!rdoParamMaxGain.IsNull()) // optional
  {
    rdoParamMaxGain >> *rstStruct.MaxGain;
  }
  const staff::DataObject& rdoParamMinIris = rdoParam.GetChildByLocalNameOpt("MinIris");
  if (!rdoParamMinIris.IsNull()) // optional
  {
    rdoParamMinIris >> *rstStruct.MinIris;
  }
  const staff::DataObject& rdoParamMaxIris = rdoParam.GetChildByLocalNameOpt("MaxIris");
  if (!rdoParamMaxIris.IsNull()) // optional
  {
    rdoParamMaxIris >> *rstStruct.MaxIris;
  }
  const staff::DataObject& rdoParamExposureTime = rdoParam.GetChildByLocalNameOpt("ExposureTime");
  if (!rdoParamExposureTime.IsNull()) // optional
  {
    rdoParamExposureTime >> *rstStruct.ExposureTime;
  }
  const staff::DataObject& rdoParamGain = rdoParam.GetChildByLocalNameOpt("Gain");
  if (!rdoParamGain.IsNull()) // optional
  {
    rdoParamGain >> *rstStruct.Gain;
  }
  const staff::DataObject& rdoParamIris = rdoParam.GetChildByLocalNameOpt("Iris");
  if (!rdoParamIris.IsNull()) // optional
  {
    rdoParamIris >> *rstStruct.Iris;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusOptions20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::AutoFocusMode >::const_iterator itItem = (rstStruct.AutoFocusModes).begin(), itItemEnd = (rstStruct.AutoFocusModes).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AutoFocusModes");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.DefaultSpeed).IsNull()) // Optional
  {
    staff::DataObject tdoParamDefaultSpeed = rdoParam.CreateChild("DefaultSpeed");
    tdoParamDefaultSpeed << *rstStruct.DefaultSpeed;
  }
  if (!(rstStruct.NearLimit).IsNull()) // Optional
  {
    staff::DataObject tdoParamNearLimit = rdoParam.CreateChild("NearLimit");
    tdoParamNearLimit << *rstStruct.NearLimit;
  }
  if (!(rstStruct.FarLimit).IsNull()) // Optional
  {
    staff::DataObject tdoParamFarLimit = rdoParam.CreateChild("FarLimit");
    tdoParamFarLimit << *rstStruct.FarLimit;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusOptions20& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AutoFocusModes")
    {
      ::AutoFocusMode tItem;
      tdoItem >> tItem;
      (rstStruct.AutoFocusModes).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamDefaultSpeed = rdoParam.GetChildByLocalNameOpt("DefaultSpeed");
  if (!rdoParamDefaultSpeed.IsNull()) // optional
  {
    rdoParamDefaultSpeed >> *rstStruct.DefaultSpeed;
  }
  const staff::DataObject& rdoParamNearLimit = rdoParam.GetChildByLocalNameOpt("NearLimit");
  if (!rdoParamNearLimit.IsNull()) // optional
  {
    rdoParamNearLimit >> *rstStruct.NearLimit;
  }
  const staff::DataObject& rdoParamFarLimit = rdoParam.GetChildByLocalNameOpt("FarLimit");
  if (!rdoParamFarLimit.IsNull()) // optional
  {
    rdoParamFarLimit >> *rstStruct.FarLimit;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FocusOptions20Extension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FocusOptions20Extension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WideDynamicRangeOptions20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::WideDynamicMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Level).IsNull()) // Optional
  {
    staff::DataObject tdoParamLevel = rdoParam.CreateChild("Level");
    tdoParamLevel << *rstStruct.Level;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WideDynamicRangeOptions20& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::WideDynamicMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamLevel = rdoParam.GetChildByLocalNameOpt("Level");
  if (!rdoParamLevel.IsNull()) // optional
  {
    rdoParamLevel >> *rstStruct.Level;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WhiteBalanceOptions20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::WhiteBalanceMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.YrGain).IsNull()) // Optional
  {
    staff::DataObject tdoParamYrGain = rdoParam.CreateChild("YrGain");
    tdoParamYrGain << *rstStruct.YrGain;
  }
  if (!(rstStruct.YbGain).IsNull()) // Optional
  {
    staff::DataObject tdoParamYbGain = rdoParam.CreateChild("YbGain");
    tdoParamYbGain << *rstStruct.YbGain;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WhiteBalanceOptions20& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::WhiteBalanceMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamYrGain = rdoParam.GetChildByLocalNameOpt("YrGain");
  if (!rdoParamYrGain.IsNull()) // optional
  {
    rdoParamYrGain >> *rstStruct.YrGain;
  }
  const staff::DataObject& rdoParamYbGain = rdoParam.GetChildByLocalNameOpt("YbGain");
  if (!rdoParamYbGain.IsNull()) // optional
  {
    rdoParamYbGain >> *rstStruct.YbGain;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::WhiteBalanceOptions20Extension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::WhiteBalanceOptions20Extension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingOptions20Extension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.ImageStabilization).IsNull()) // Optional
  {
    staff::DataObject tdoParamImageStabilization = rdoParam.CreateChild("ImageStabilization");
    tdoParamImageStabilization << *rstStruct.ImageStabilization;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingOptions20Extension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamImageStabilization = rdoParam.GetChildByLocalNameOpt("ImageStabilization");
  if (!rdoParamImageStabilization.IsNull()) // optional
  {
    rdoParamImageStabilization >> *rstStruct.ImageStabilization;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImageStabilizationOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::ImageStabilizationMode >::const_iterator itItem = (rstStruct.Mode).begin(), itItemEnd = (rstStruct.Mode).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Mode");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Level).IsNull()) // Optional
  {
    staff::DataObject tdoParamLevel = rdoParam.CreateChild("Level");
    tdoParamLevel << *rstStruct.Level;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImageStabilizationOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Mode")
    {
      ::ImageStabilizationMode tItem;
      tdoItem >> tItem;
      (rstStruct.Mode).push_back(tItem);
    }
  }

  const staff::DataObject& rdoParamLevel = rdoParam.GetChildByLocalNameOpt("Level");
  if (!rdoParamLevel.IsNull()) // optional
  {
    rdoParamLevel >> *rstStruct.Level;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImageStabilizationOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImageStabilizationOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ImagingOptions20Extension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ImagingOptions20Extension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MoveOptions20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Absolute).IsNull()) // Optional
  {
    staff::DataObject tdoParamAbsolute = rdoParam.CreateChild("Absolute");
    tdoParamAbsolute << *rstStruct.Absolute;
  }
  if (!(rstStruct.Relative).IsNull()) // Optional
  {
    staff::DataObject tdoParamRelative = rdoParam.CreateChild("Relative");
    tdoParamRelative << *rstStruct.Relative;
  }
  if (!(rstStruct.Continuous).IsNull()) // Optional
  {
    staff::DataObject tdoParamContinuous = rdoParam.CreateChild("Continuous");
    tdoParamContinuous << *rstStruct.Continuous;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MoveOptions20& rstStruct)
{
  const staff::DataObject& rdoParamAbsolute = rdoParam.GetChildByLocalNameOpt("Absolute");
  if (!rdoParamAbsolute.IsNull()) // optional
  {
    rdoParamAbsolute >> *rstStruct.Absolute;
  }
  const staff::DataObject& rdoParamRelative = rdoParam.GetChildByLocalNameOpt("Relative");
  if (!rdoParamRelative.IsNull()) // optional
  {
    rdoParamRelative >> *rstStruct.Relative;
  }
  const staff::DataObject& rdoParamContinuous = rdoParam.GetChildByLocalNameOpt("Continuous");
  if (!rdoParamContinuous.IsNull()) // optional
  {
    rdoParamContinuous >> *rstStruct.Continuous;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RelativeFocusOptions20& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamDistance = rdoParam.CreateChild("Distance");
  tdoParamDistance << rstStruct.Distance;
  if (!(rstStruct.Speed).IsNull()) // Optional
  {
    staff::DataObject tdoParamSpeed = rdoParam.CreateChild("Speed");
    tdoParamSpeed << *rstStruct.Speed;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RelativeFocusOptions20& rstStruct)
{
  rdoParam.GetChildByLocalName("Distance") >> rstStruct.Distance;
  const staff::DataObject& rdoParamSpeed = rdoParam.GetChildByLocalNameOpt("Speed");
  if (!rdoParamSpeed.IsNull()) // optional
  {
    rdoParamSpeed >> *rstStruct.Speed;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MessageExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MessageExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MessageDescription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Source).IsNull()) // Optional
  {
    staff::DataObject tdoParamSource = rdoParam.CreateChild("Source");
    tdoParamSource << *rstStruct.Source;
  }
  if (!(rstStruct.Key).IsNull()) // Optional
  {
    staff::DataObject tdoParamKey = rdoParam.CreateChild("Key");
    tdoParamKey << *rstStruct.Key;
  }
  if (!(rstStruct.Data).IsNull()) // Optional
  {
    staff::DataObject tdoParamData = rdoParam.CreateChild("Data");
    tdoParamData << *rstStruct.Data;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  if (!(rstStruct.IsProperty).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("IsProperty", *rstStruct.IsProperty);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MessageDescription& rstStruct)
{
  const staff::DataObject& rdoParamSource = rdoParam.GetChildByLocalNameOpt("Source");
  if (!rdoParamSource.IsNull()) // optional
  {
    rdoParamSource >> *rstStruct.Source;
  }
  const staff::DataObject& rdoParamKey = rdoParam.GetChildByLocalNameOpt("Key");
  if (!rdoParamKey.IsNull()) // optional
  {
    rdoParamKey >> *rstStruct.Key;
  }
  const staff::DataObject& rdoParamData = rdoParam.GetChildByLocalNameOpt("Data");
  if (!rdoParamData.IsNull()) // optional
  {
    rdoParamData >> *rstStruct.Data;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  const staff::Attribute& rAttrIsProperty = rdoParam.GetAttributeByLocalNameOpt("IsProperty");
  if (!rAttrIsProperty.IsNull()) // optional attribute
  {
    rAttrIsProperty.GetValue(*rstStruct.IsProperty);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ItemListDescription::SimpleItemDescription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("Name", rstStruct.Name);
  rdoParam.CreateAttribute("Type", rstStruct.Type);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ItemListDescription::SimpleItemDescription& rstStruct)
{
  rdoParam.GetAttributeValueByName("Name", rstStruct.Name);
  rdoParam.GetAttributeValueByName("Type", rstStruct.Type);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ItemListDescription::ElementItemDescription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("Name", rstStruct.Name);
  rdoParam.CreateAttribute("Type", rstStruct.Type);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ItemListDescription::ElementItemDescription& rstStruct)
{
  rdoParam.GetAttributeValueByName("Name", rstStruct.Name);
  rdoParam.GetAttributeValueByName("Type", rstStruct.Type);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ItemListDescription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<struct ::ItemListDescription::SimpleItemDescription>::const_iterator itItem = (rstStruct.SimpleItemDescription).begin(), itItemEnd = (rstStruct.SimpleItemDescription).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("SimpleItemDescription");
    tdoParamItem << (*itItem);
  }

  for (std::list<struct ::ItemListDescription::ElementItemDescription>::const_iterator itItem = (rstStruct.ElementItemDescription).begin(), itItemEnd = (rstStruct.ElementItemDescription).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ElementItemDescription");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ItemListDescription& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "SimpleItemDescription")
    {
      (rstStruct.SimpleItemDescription).resize((rstStruct.SimpleItemDescription).size() + 1);
      tdoItem >> (rstStruct.SimpleItemDescription).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ElementItemDescription")
    {
      (rstStruct.ElementItemDescription).resize((rstStruct.ElementItemDescription).size() + 1);
      tdoItem >> (rstStruct.ElementItemDescription).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ItemListDescriptionExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ItemListDescriptionExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MessageDescriptionExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MessageDescriptionExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Vector& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.x).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("x", *rstStruct.x);
  }
  if (!(rstStruct.y).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("y", *rstStruct.y);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Vector& rstStruct)
{
  const staff::Attribute& rAttrx = rdoParam.GetAttributeByLocalNameOpt("x");
  if (!rAttrx.IsNull()) // optional attribute
  {
    rAttrx.GetValue(*rstStruct.x);
  }
  const staff::Attribute& rAttry = rdoParam.GetAttributeByLocalNameOpt("y");
  if (!rAttry.IsNull()) // optional attribute
  {
    rAttry.GetValue(*rstStruct.y);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Polygon& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Vector >::const_iterator itItem = (rstStruct.Point).begin(), itItemEnd = (rstStruct.Point).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Point");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Polygon& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Point")
    {
      (rstStruct.Point).resize((rstStruct.Point).size() + 1);
      tdoItem >> (rstStruct.Point).back();
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Polyline& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Vector >::const_iterator itItem = (rstStruct.Point).begin(), itItemEnd = (rstStruct.Point).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Point");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Polyline& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Point")
    {
      (rstStruct.Point).resize((rstStruct.Point).size() + 1);
      tdoItem >> (rstStruct.Point).back();
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Color& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("X", rstStruct.X);
  rdoParam.CreateAttribute("Y", rstStruct.Y);
  rdoParam.CreateAttribute("Z", rstStruct.Z);
  if (!(rstStruct.Colorspace).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("Colorspace", *rstStruct.Colorspace);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Color& rstStruct)
{
  rdoParam.GetAttributeValueByName("X", rstStruct.X);
  rdoParam.GetAttributeValueByName("Y", rstStruct.Y);
  rdoParam.GetAttributeValueByName("Z", rstStruct.Z);
  const staff::Attribute& rAttrColorspace = rdoParam.GetAttributeByLocalNameOpt("Colorspace");
  if (!rAttrColorspace.IsNull()) // optional attribute
  {
    rAttrColorspace.GetValue(*rstStruct.Colorspace);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ColorCovariance& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateAttribute("XX", rstStruct.XX);
  rdoParam.CreateAttribute("YY", rstStruct.YY);
  rdoParam.CreateAttribute("ZZ", rstStruct.ZZ);
  if (!(rstStruct.XY).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("XY", *rstStruct.XY);
  }
  if (!(rstStruct.XZ).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("XZ", *rstStruct.XZ);
  }
  if (!(rstStruct.YZ).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("YZ", *rstStruct.YZ);
  }
  if (!(rstStruct.Colorspace).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("Colorspace", *rstStruct.Colorspace);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ColorCovariance& rstStruct)
{
  rdoParam.GetAttributeValueByName("XX", rstStruct.XX);
  rdoParam.GetAttributeValueByName("YY", rstStruct.YY);
  rdoParam.GetAttributeValueByName("ZZ", rstStruct.ZZ);
  const staff::Attribute& rAttrXY = rdoParam.GetAttributeByLocalNameOpt("XY");
  if (!rAttrXY.IsNull()) // optional attribute
  {
    rAttrXY.GetValue(*rstStruct.XY);
  }
  const staff::Attribute& rAttrXZ = rdoParam.GetAttributeByLocalNameOpt("XZ");
  if (!rAttrXZ.IsNull()) // optional attribute
  {
    rAttrXZ.GetValue(*rstStruct.XZ);
  }
  const staff::Attribute& rAttrYZ = rdoParam.GetAttributeByLocalNameOpt("YZ");
  if (!rAttrYZ.IsNull()) // optional attribute
  {
    rAttrYZ.GetValue(*rstStruct.YZ);
  }
  const staff::Attribute& rAttrColorspace = rdoParam.GetAttributeByLocalNameOpt("Colorspace");
  if (!rAttrColorspace.IsNull()) // optional attribute
  {
    rAttrColorspace.GetValue(*rstStruct.Colorspace);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Appearance& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Transformation).IsNull()) // Optional
  {
    staff::DataObject tdoParamTransformation = rdoParam.CreateChild("Transformation");
    tdoParamTransformation << *rstStruct.Transformation;
  }
  if (!(rstStruct.Shape).IsNull()) // Optional
  {
    staff::DataObject tdoParamShape = rdoParam.CreateChild("Shape");
    tdoParamShape << *rstStruct.Shape;
  }
  if (!(rstStruct.Color).IsNull()) // Optional
  {
    staff::DataObject tdoParamColor = rdoParam.CreateChild("Color");
    tdoParamColor << *rstStruct.Color;
  }
  if (!(rstStruct.Class).IsNull()) // Optional
  {
    staff::DataObject tdoParamClass = rdoParam.CreateChild("Class");
    tdoParamClass << *rstStruct.Class;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Appearance& rstStruct)
{
  const staff::DataObject& rdoParamTransformation = rdoParam.GetChildByLocalNameOpt("Transformation");
  if (!rdoParamTransformation.IsNull()) // optional
  {
    rdoParamTransformation >> *rstStruct.Transformation;
  }
  const staff::DataObject& rdoParamShape = rdoParam.GetChildByLocalNameOpt("Shape");
  if (!rdoParamShape.IsNull()) // optional
  {
    rdoParamShape >> *rstStruct.Shape;
  }
  const staff::DataObject& rdoParamColor = rdoParam.GetChildByLocalNameOpt("Color");
  if (!rdoParamColor.IsNull()) // optional
  {
    rdoParamColor >> *rstStruct.Color;
  }
  const staff::DataObject& rdoParamClass = rdoParam.GetChildByLocalNameOpt("Class");
  if (!rdoParamClass.IsNull()) // optional
  {
    rdoParamClass >> *rstStruct.Class;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Transformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Translate).IsNull()) // Optional
  {
    staff::DataObject tdoParamTranslate = rdoParam.CreateChild("Translate");
    tdoParamTranslate << *rstStruct.Translate;
  }
  if (!(rstStruct.Scale).IsNull()) // Optional
  {
    staff::DataObject tdoParamScale = rdoParam.CreateChild("Scale");
    tdoParamScale << *rstStruct.Scale;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Transformation& rstStruct)
{
  const staff::DataObject& rdoParamTranslate = rdoParam.GetChildByLocalNameOpt("Translate");
  if (!rdoParamTranslate.IsNull()) // optional
  {
    rdoParamTranslate >> *rstStruct.Translate;
  }
  const staff::DataObject& rdoParamScale = rdoParam.GetChildByLocalNameOpt("Scale");
  if (!rdoParamScale.IsNull()) // optional
  {
    rdoParamScale >> *rstStruct.Scale;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TransformationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TransformationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ShapeDescriptor& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamBoundingBox = rdoParam.CreateChild("BoundingBox");
  tdoParamBoundingBox << rstStruct.BoundingBox;
  staff::DataObject tdoParamCenterOfGravity = rdoParam.CreateChild("CenterOfGravity");
  tdoParamCenterOfGravity << rstStruct.CenterOfGravity;
  for (std::list< ::Polygon >::const_iterator itItem = (rstStruct.Polygon).begin(), itItemEnd = (rstStruct.Polygon).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Polygon");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ShapeDescriptor& rstStruct)
{
  rdoParam.GetChildByLocalName("BoundingBox") >> rstStruct.BoundingBox;
  rdoParam.GetChildByLocalName("CenterOfGravity") >> rstStruct.CenterOfGravity;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Polygon")
    {
      (rstStruct.Polygon).resize((rstStruct.Polygon).size() + 1);
      tdoItem >> (rstStruct.Polygon).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ShapeDescriptorExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ShapeDescriptorExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ColorDescriptor::ColorCluster& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamColor = rdoParam.CreateChild("Color");
  tdoParamColor << rstStruct.Color;
  if (!(rstStruct.Weight).IsNull()) // Optional
  {
    rdoParam.CreateChild("Weight", *rstStruct.Weight);
  }
  if (!(rstStruct.Covariance).IsNull()) // Optional
  {
    staff::DataObject tdoParamCovariance = rdoParam.CreateChild("Covariance");
    tdoParamCovariance << *rstStruct.Covariance;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ColorDescriptor::ColorCluster& rstStruct)
{
  rdoParam.GetChildByLocalName("Color") >> rstStruct.Color;
  const staff::DataObject& rdoParamWeight = rdoParam.GetChildByLocalNameOpt("Weight");
  if (!rdoParamWeight.IsNull()) // optional
  {
    rdoParamWeight.GetValue(*rstStruct.Weight);
  }
  const staff::DataObject& rdoParamCovariance = rdoParam.GetChildByLocalNameOpt("Covariance");
  if (!rdoParamCovariance.IsNull()) // optional
  {
    rdoParamCovariance >> *rstStruct.Covariance;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ColorDescriptor& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<struct ::ColorDescriptor::ColorCluster>::const_iterator itItem = (rstStruct.ColorCluster).begin(), itItemEnd = (rstStruct.ColorCluster).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ColorCluster");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ColorDescriptor& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ColorCluster")
    {
      (rstStruct.ColorCluster).resize((rstStruct.ColorCluster).size() + 1);
      tdoItem >> (rstStruct.ColorCluster).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ColorDescriptorExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ColorDescriptorExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ClassDescriptor::ClassCandidate& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamType = rdoParam.CreateChild("Type");
  tdoParamType << rstStruct.Type;
  rdoParam.CreateChild("Likelihood", rstStruct.Likelihood);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ClassDescriptor::ClassCandidate& rstStruct)
{
  rdoParam.GetChildByLocalName("Type") >> rstStruct.Type;
  rdoParam.GetChildValueByLocalName("Likelihood", rstStruct.Likelihood);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ClassDescriptor& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<struct ::ClassDescriptor::ClassCandidate>::const_iterator itItem = (rstStruct.ClassCandidate).begin(), itItemEnd = (rstStruct.ClassCandidate).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ClassCandidate");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ClassDescriptor& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ClassCandidate")
    {
      (rstStruct.ClassCandidate).resize((rstStruct.ClassCandidate).size() + 1);
      tdoItem >> (rstStruct.ClassCandidate).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ClassDescriptorExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (std::list< ::OtherType >::const_iterator itItem = (rstStruct.OtherTypes).begin(), itItemEnd = (rstStruct.OtherTypes).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("OtherTypes");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ClassDescriptorExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "OtherTypes")
    {
      (rstStruct.OtherTypes).resize((rstStruct.OtherTypes).size() + 1);
      tdoItem >> (rstStruct.OtherTypes).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::OtherType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Type", rstStruct.Type);
  rdoParam.CreateChild("Likelihood", rstStruct.Likelihood);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::OtherType& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Type", rstStruct.Type);
  rdoParam.GetChildValueByLocalName("Likelihood", rstStruct.Likelihood);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ClassDescriptorExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ClassDescriptorExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AppearanceExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AppearanceExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ObjectId& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.ObjectId).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("ObjectId", *rstStruct.ObjectId);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ObjectId& rstStruct)
{
  const staff::Attribute& rAttrObjectId = rdoParam.GetAttributeByLocalNameOpt("ObjectId");
  if (!rAttrObjectId.IsNull()) // optional attribute
  {
    rAttrObjectId.GetValue(*rstStruct.ObjectId);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Object& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ObjectId& >(rstStruct);

  if (!(rstStruct.Appearance).IsNull()) // Optional
  {
    staff::DataObject tdoParamAppearance = rdoParam.CreateChild("Appearance");
    tdoParamAppearance << *rstStruct.Appearance;
  }
  if (!(rstStruct.Behaviour).IsNull()) // Optional
  {
    staff::DataObject tdoParamBehaviour = rdoParam.CreateChild("Behaviour");
    tdoParamBehaviour << *rstStruct.Behaviour;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Object& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ObjectId& >(rstStruct);

  const staff::DataObject& rdoParamAppearance = rdoParam.GetChildByLocalNameOpt("Appearance");
  if (!rdoParamAppearance.IsNull()) // optional
  {
    rdoParamAppearance >> *rstStruct.Appearance;
  }
  const staff::DataObject& rdoParamBehaviour = rdoParam.GetChildByLocalNameOpt("Behaviour");
  if (!rdoParamBehaviour.IsNull()) // optional
  {
    rdoParamBehaviour >> *rstStruct.Behaviour;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Behaviour::Removed& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Behaviour::Removed& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Behaviour::Idle& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Behaviour::Idle& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Behaviour& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Removed).IsNull()) // Optional
  {
    staff::DataObject tdoParamRemoved = rdoParam.CreateChild("Removed");
    tdoParamRemoved << *rstStruct.Removed;
  }
  if (!(rstStruct.Idle).IsNull()) // Optional
  {
    staff::DataObject tdoParamIdle = rdoParam.CreateChild("Idle");
    tdoParamIdle << *rstStruct.Idle;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Behaviour& rstStruct)
{
  const staff::DataObject& rdoParamRemoved = rdoParam.GetChildByLocalNameOpt("Removed");
  if (!rdoParamRemoved.IsNull()) // optional
  {
    rdoParamRemoved >> *rstStruct.Removed;
  }
  const staff::DataObject& rdoParamIdle = rdoParam.GetChildByLocalNameOpt("Idle");
  if (!rdoParamIdle.IsNull()) // optional
  {
    rdoParamIdle >> *rstStruct.Idle;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::BehaviourExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::BehaviourExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ObjectExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ObjectExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Frame& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.PTZStatus).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTZStatus = rdoParam.CreateChild("PTZStatus");
    tdoParamPTZStatus << *rstStruct.PTZStatus;
  }
  if (!(rstStruct.Transformation).IsNull()) // Optional
  {
    staff::DataObject tdoParamTransformation = rdoParam.CreateChild("Transformation");
    tdoParamTransformation << *rstStruct.Transformation;
  }
  for (std::list< ::Object >::const_iterator itItem = (rstStruct.Object).begin(), itItemEnd = (rstStruct.Object).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Object");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.ObjectTree).IsNull()) // Optional
  {
    staff::DataObject tdoParamObjectTree = rdoParam.CreateChild("ObjectTree");
    tdoParamObjectTree << *rstStruct.ObjectTree;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  rdoParam.CreateAttribute("UtcTime", rstStruct.UtcTime);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Frame& rstStruct)
{
  const staff::DataObject& rdoParamPTZStatus = rdoParam.GetChildByLocalNameOpt("PTZStatus");
  if (!rdoParamPTZStatus.IsNull()) // optional
  {
    rdoParamPTZStatus >> *rstStruct.PTZStatus;
  }
  const staff::DataObject& rdoParamTransformation = rdoParam.GetChildByLocalNameOpt("Transformation");
  if (!rdoParamTransformation.IsNull()) // optional
  {
    rdoParamTransformation >> *rstStruct.Transformation;
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Object")
    {
      (rstStruct.Object).resize((rstStruct.Object).size() + 1);
      tdoItem >> (rstStruct.Object).back();
    }
  }

  const staff::DataObject& rdoParamObjectTree = rdoParam.GetChildByLocalNameOpt("ObjectTree");
  if (!rdoParamObjectTree.IsNull()) // optional
  {
    rdoParamObjectTree >> *rstStruct.ObjectTree;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  rdoParam.GetAttributeValueByName("UtcTime", rstStruct.UtcTime);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ObjectTree& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Rename >::const_iterator itItem = (rstStruct.Rename).begin(), itItemEnd = (rstStruct.Rename).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Rename");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Split >::const_iterator itItem = (rstStruct.Split).begin(), itItemEnd = (rstStruct.Split).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Split");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::Merge >::const_iterator itItem = (rstStruct.Merge).begin(), itItemEnd = (rstStruct.Merge).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Merge");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::ObjectId >::const_iterator itItem = (rstStruct.Delete).begin(), itItemEnd = (rstStruct.Delete).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Delete");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ObjectTree& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Rename")
    {
      (rstStruct.Rename).resize((rstStruct.Rename).size() + 1);
      tdoItem >> (rstStruct.Rename).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Split")
    {
      (rstStruct.Split).resize((rstStruct.Split).size() + 1);
      tdoItem >> (rstStruct.Split).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Merge")
    {
      (rstStruct.Merge).resize((rstStruct.Merge).size() + 1);
      tdoItem >> (rstStruct.Merge).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Delete")
    {
      (rstStruct.Delete).resize((rstStruct.Delete).size() + 1);
      tdoItem >> (rstStruct.Delete).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Rename& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamfrom = rdoParam.CreateChild("from");
  tdoParamfrom << rstStruct.from;
  staff::DataObject tdoParamto = rdoParam.CreateChild("to");
  tdoParamto << rstStruct.to;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Rename& rstStruct)
{
  rdoParam.GetChildByLocalName("from") >> rstStruct.from;
  rdoParam.GetChildByLocalName("to") >> rstStruct.to;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Split& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamfrom = rdoParam.CreateChild("from");
  tdoParamfrom << rstStruct.from;
  for (std::list< ::ObjectId >::const_iterator itItem = (rstStruct.to).begin(), itItemEnd = (rstStruct.to).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("to");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Split& rstStruct)
{
  rdoParam.GetChildByLocalName("from") >> rstStruct.from;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "to")
    {
      (rstStruct.to).resize((rstStruct.to).size() + 1);
      tdoItem >> (rstStruct.to).back();
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Merge& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::ObjectId >::const_iterator itItem = (rstStruct.from).begin(), itItemEnd = (rstStruct.from).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("from");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamto = rdoParam.CreateChild("to");
  tdoParamto << rstStruct.to;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Merge& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "from")
    {
      (rstStruct.from).resize((rstStruct.from).size() + 1);
      tdoItem >> (rstStruct.from).back();
    }
  }

  rdoParam.GetChildByLocalName("to") >> rstStruct.to;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ObjectTreeExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ObjectTreeExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FrameExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.MotionInCells).IsNull()) // Optional
  {
    staff::DataObject tdoParamMotionInCells = rdoParam.CreateChild("MotionInCells");
    tdoParamMotionInCells << *rstStruct.MotionInCells;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FrameExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::DataObject& rdoParamMotionInCells = rdoParam.GetChildByLocalNameOpt("MotionInCells");
  if (!rdoParamMotionInCells.IsNull()) // optional
  {
    rdoParamMotionInCells >> *rstStruct.MotionInCells;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MotionInCells& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  rdoParam.CreateAttribute("Columns", rstStruct.Columns);
  rdoParam.CreateAttribute("Rows", rstStruct.Rows);
  rdoParam.CreateAttribute("Cells", rstStruct.Cells);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MotionInCells& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  rdoParam.GetAttributeValueByName("Columns", rstStruct.Columns);
  rdoParam.GetAttributeValueByName("Rows", rstStruct.Rows);
  rdoParam.GetAttributeValueByName("Cells", rstStruct.Cells);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FrameExtension2& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FrameExtension2& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ConfigDescription::Messages& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct MessageDescription& >(rstStruct);

  rdoParam.CreateChild("ParentTopic", rstStruct.ParentTopic);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ConfigDescription::Messages& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct MessageDescription& >(rstStruct);

  rdoParam.GetChildValueByLocalName("ParentTopic", rstStruct.ParentTopic);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ConfigDescription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamParameters = rdoParam.CreateChild("Parameters");
  tdoParamParameters << rstStruct.Parameters;
  for (std::list<struct ::ConfigDescription::Messages>::const_iterator itItem = (rstStruct.Messages).begin(), itItemEnd = (rstStruct.Messages).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Messages");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  rdoParam.CreateAttribute("Name", rstStruct.Name);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ConfigDescription& rstStruct)
{
  rdoParam.GetChildByLocalName("Parameters") >> rstStruct.Parameters;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Messages")
    {
      (rstStruct.Messages).resize((rstStruct.Messages).size() + 1);
      tdoItem >> (rstStruct.Messages).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  rdoParam.GetAttributeValueByName("Name", rstStruct.Name);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ConfigDescriptionExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ConfigDescriptionExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SupportedRules& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::anyURI>::const_iterator itItem = (rstStruct.RuleContentSchemaLocation).begin(), itItemEnd = (rstStruct.RuleContentSchemaLocation).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("RuleContentSchemaLocation", (*itItem));
  }

  for (std::list< ::ConfigDescription >::const_iterator itItem = (rstStruct.RuleDescription).begin(), itItemEnd = (rstStruct.RuleDescription).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("RuleDescription");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SupportedRules& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "RuleContentSchemaLocation")
    {
      (rstStruct.RuleContentSchemaLocation).push_back(tdoItem.GetText());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "RuleDescription")
    {
      (rstStruct.RuleDescription).resize((rstStruct.RuleDescription).size() + 1);
      tdoItem >> (rstStruct.RuleDescription).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SupportedRulesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SupportedRulesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SupportedAnalyticsModules& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::anyURI>::const_iterator itItem = (rstStruct.AnalyticsModuleContentSchemaLocation).begin(), itItemEnd = (rstStruct.AnalyticsModuleContentSchemaLocation).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("AnalyticsModuleContentSchemaLocation", (*itItem));
  }

  for (std::list< ::ConfigDescription >::const_iterator itItem = (rstStruct.AnalyticsModuleDescription).begin(), itItemEnd = (rstStruct.AnalyticsModuleDescription).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("AnalyticsModuleDescription");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SupportedAnalyticsModules& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AnalyticsModuleContentSchemaLocation")
    {
      (rstStruct.AnalyticsModuleContentSchemaLocation).push_back(tdoItem.GetText());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "AnalyticsModuleDescription")
    {
      (rstStruct.AnalyticsModuleDescription).resize((rstStruct.AnalyticsModuleDescription).size() + 1);
      tdoItem >> (rstStruct.AnalyticsModuleDescription).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SupportedAnalyticsModulesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SupportedAnalyticsModulesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PolygonConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamPolygon = rdoParam.CreateChild("Polygon");
  tdoParamPolygon << rstStruct.Polygon;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PolygonConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("Polygon") >> rstStruct.Polygon;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PolylineArray& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Polyline >::const_iterator itItem = (rstStruct.Segment).begin(), itItemEnd = (rstStruct.Segment).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Segment");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PolylineArray& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Segment")
    {
      (rstStruct.Segment).resize((rstStruct.Segment).size() + 1);
      tdoItem >> (rstStruct.Segment).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PolylineArrayExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PolylineArrayExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PolylineArrayConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamPolylineArray = rdoParam.CreateChild("PolylineArray");
  tdoParamPolylineArray << rstStruct.PolylineArray;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PolylineArrayConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("PolylineArray") >> rstStruct.PolylineArray;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MotionExpression& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Expression", rstStruct.Expression);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  if (!(rstStruct.Type).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("Type", *rstStruct.Type);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MotionExpression& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Expression", rstStruct.Expression);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  const staff::Attribute& rAttrType = rdoParam.GetAttributeByLocalNameOpt("Type");
  if (!rAttrType.IsNull()) // optional attribute
  {
    rAttrType.GetValue(*rstStruct.Type);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MotionExpressionConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMotionExpression = rdoParam.CreateChild("MotionExpression");
  tdoParamMotionExpression << rstStruct.MotionExpression;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MotionExpressionConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("MotionExpression") >> rstStruct.MotionExpression;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CellLayout& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamTransformation = rdoParam.CreateChild("Transformation");
  tdoParamTransformation << rstStruct.Transformation;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  rdoParam.CreateAttribute("Columns", rstStruct.Columns);
  rdoParam.CreateAttribute("Rows", rstStruct.Rows);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CellLayout& rstStruct)
{
  rdoParam.GetChildByLocalName("Transformation") >> rstStruct.Transformation;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  rdoParam.GetAttributeValueByName("Columns", rstStruct.Columns);
  rdoParam.GetAttributeValueByName("Rows", rstStruct.Rows);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataStreamItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.VideoAnalytics).IsNull()) // Optional
  {
    staff::DataObject tdoParamVideoAnalytics = rdoParam.CreateChild("VideoAnalytics");
    SerializeTypedef_VideoAnalyticsStream(tdoParamVideoAnalytics, *rstStruct.VideoAnalytics);
  }
  else
  if (!(rstStruct.PTZ).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTZ = rdoParam.CreateChild("PTZ");
    SerializeTypedef_PTZStream(tdoParamPTZ, *rstStruct.PTZ);
  }
  else
  if (!(rstStruct.Event).IsNull()) // Optional
  {
    staff::DataObject tdoParamEvent = rdoParam.CreateChild("Event");
    SerializeTypedef_EventStream(tdoParamEvent, *rstStruct.Event);
  }
  else
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  else
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataStreamItem& rstStruct)
{
  if (rdoParam.GetLocalName() == "VideoAnalytics")
  {
    if (!rdoParam.IsNull()) // optional
    {
      DeserializeTypedef_VideoAnalyticsStream(rdoParam, *rstStruct.VideoAnalytics);
    }
  }
  else
  if (rdoParam.GetLocalName() == "PTZ")
  {
    if (!rdoParam.IsNull()) // optional
    {
      DeserializeTypedef_PTZStream(rdoParam, *rstStruct.PTZ);
    }
  }
  else
  if (rdoParam.GetLocalName() == "Event")
  {
    if (!rdoParam.IsNull()) // optional
    {
      DeserializeTypedef_EventStream(rdoParam, *rstStruct.Event);
    }
  }
  else
  if (rdoParam.GetLocalName() == "Extension")
  {
    if (!rdoParam.IsNull()) // optional
    {
      rdoParam >> *rstStruct.Extension;
    }
  }
  else
  if (rdoParam.GetLocalName() == "lsAnyAttributes")
  {
    for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
         itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
    {
      (rstStruct.lsAnyAttributes).push_back(*itAttr);
    }
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoAnalyticsStreamItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Frame).IsNull()) // Optional
  {
    staff::DataObject tdoParamFrame = rdoParam.CreateChild("Frame");
    tdoParamFrame << *rstStruct.Frame;
  }
  else
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoAnalyticsStreamItem& rstStruct)
{
  if (rdoParam.GetLocalName() == "Frame")
  {
    if (!rdoParam.IsNull()) // optional
    {
      rdoParam >> *rstStruct.Frame;
    }
  }
  else
  if (rdoParam.GetLocalName() == "Extension")
  {
    if (!rdoParam.IsNull()) // optional
    {
      rdoParam >> *rstStruct.Extension;
    }
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoAnalyticsStreamExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoAnalyticsStreamExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZStreamItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.PTZStatus).IsNull()) // Optional
  {
    staff::DataObject tdoParamPTZStatus = rdoParam.CreateChild("PTZStatus");
    tdoParamPTZStatus << *rstStruct.PTZStatus;
  }
  else
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZStreamItem& rstStruct)
{
  if (rdoParam.GetLocalName() == "PTZStatus")
  {
    if (!rdoParam.IsNull()) // optional
    {
      rdoParam >> *rstStruct.PTZStatus;
    }
  }
  else
  if (rdoParam.GetLocalName() == "Extension")
  {
    if (!rdoParam.IsNull()) // optional
    {
      rdoParam >> *rstStruct.Extension;
    }
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZStreamExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZStreamExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EventStreamItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.NotificationMessage).IsNull()) // Optional
  {
    staff::DataObject tdoParamNotificationMessage = rdoParam.CreateChild("NotificationMessage");
    tdoParamNotificationMessage << *rstStruct.NotificationMessage;
  }
  else
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EventStreamItem& rstStruct)
{
  if (rdoParam.GetLocalName() == "NotificationMessage")
  {
    if (!rdoParam.IsNull()) // optional
    {
      rdoParam >> *rstStruct.NotificationMessage;
    }
  }
  else
  if (rdoParam.GetLocalName() == "Extension")
  {
    if (!rdoParam.IsNull()) // optional
    {
      rdoParam >> *rstStruct.Extension;
    }
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EventStreamExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EventStreamExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataStreamExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataStreamExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PaneConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.PaneName).IsNull()) // Optional
  {
    rdoParam.CreateChild("PaneName", *rstStruct.PaneName);
  }
  if (!(rstStruct.AudioOutputToken).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioOutputToken = rdoParam.CreateChild("AudioOutputToken");
    SerializeTypedef_ReferenceToken(tdoParamAudioOutputToken, *rstStruct.AudioOutputToken);
  }
  if (!(rstStruct.AudioSourceToken).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioSourceToken = rdoParam.CreateChild("AudioSourceToken");
    SerializeTypedef_ReferenceToken(tdoParamAudioSourceToken, *rstStruct.AudioSourceToken);
  }
  if (!(rstStruct.AudioEncoderConfiguration).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioEncoderConfiguration = rdoParam.CreateChild("AudioEncoderConfiguration");
    tdoParamAudioEncoderConfiguration << *rstStruct.AudioEncoderConfiguration;
  }
  if (!(rstStruct.ReceiverToken).IsNull()) // Optional
  {
    staff::DataObject tdoParamReceiverToken = rdoParam.CreateChild("ReceiverToken");
    SerializeTypedef_ReferenceToken(tdoParamReceiverToken, *rstStruct.ReceiverToken);
  }
  staff::DataObject tdoParamToken = rdoParam.CreateChild("Token");
  SerializeTypedef_ReferenceToken(tdoParamToken, rstStruct.Token);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PaneConfiguration& rstStruct)
{
  const staff::DataObject& rdoParamPaneName = rdoParam.GetChildByLocalNameOpt("PaneName");
  if (!rdoParamPaneName.IsNull()) // optional
  {
    rdoParamPaneName.GetValue(*rstStruct.PaneName);
  }
  const staff::DataObject& rdoParamAudioOutputToken = rdoParam.GetChildByLocalNameOpt("AudioOutputToken");
  if (!rdoParamAudioOutputToken.IsNull()) // optional
  {
    DeserializeTypedef_ReferenceToken(rdoParamAudioOutputToken, *rstStruct.AudioOutputToken);
  }
  const staff::DataObject& rdoParamAudioSourceToken = rdoParam.GetChildByLocalNameOpt("AudioSourceToken");
  if (!rdoParamAudioSourceToken.IsNull()) // optional
  {
    DeserializeTypedef_ReferenceToken(rdoParamAudioSourceToken, *rstStruct.AudioSourceToken);
  }
  const staff::DataObject& rdoParamAudioEncoderConfiguration = rdoParam.GetChildByLocalNameOpt("AudioEncoderConfiguration");
  if (!rdoParamAudioEncoderConfiguration.IsNull()) // optional
  {
    rdoParamAudioEncoderConfiguration >> *rstStruct.AudioEncoderConfiguration;
  }
  const staff::DataObject& rdoParamReceiverToken = rdoParam.GetChildByLocalNameOpt("ReceiverToken");
  if (!rdoParamReceiverToken.IsNull()) // optional
  {
    DeserializeTypedef_ReferenceToken(rdoParamReceiverToken, *rstStruct.ReceiverToken);
  }
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("Token"), rstStruct.Token);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CodingCapabilities& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.AudioEncodingCapabilities).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioEncodingCapabilities = rdoParam.CreateChild("AudioEncodingCapabilities");
    tdoParamAudioEncodingCapabilities << *rstStruct.AudioEncodingCapabilities;
  }
  if (!(rstStruct.AudioDecodingCapabilities).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioDecodingCapabilities = rdoParam.CreateChild("AudioDecodingCapabilities");
    tdoParamAudioDecodingCapabilities << *rstStruct.AudioDecodingCapabilities;
  }
  staff::DataObject tdoParamVideoDecodingCapabilities = rdoParam.CreateChild("VideoDecodingCapabilities");
  tdoParamVideoDecodingCapabilities << rstStruct.VideoDecodingCapabilities;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CodingCapabilities& rstStruct)
{
  const staff::DataObject& rdoParamAudioEncodingCapabilities = rdoParam.GetChildByLocalNameOpt("AudioEncodingCapabilities");
  if (!rdoParamAudioEncodingCapabilities.IsNull()) // optional
  {
    rdoParamAudioEncodingCapabilities >> *rstStruct.AudioEncodingCapabilities;
  }
  const staff::DataObject& rdoParamAudioDecodingCapabilities = rdoParam.GetChildByLocalNameOpt("AudioDecodingCapabilities");
  if (!rdoParamAudioDecodingCapabilities.IsNull()) // optional
  {
    rdoParamAudioDecodingCapabilities >> *rstStruct.AudioDecodingCapabilities;
  }
  rdoParam.GetChildByLocalName("VideoDecodingCapabilities") >> rstStruct.VideoDecodingCapabilities;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::LayoutOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::PaneLayoutOptions >::const_iterator itItem = (rstStruct.PaneLayoutOptions).begin(), itItemEnd = (rstStruct.PaneLayoutOptions).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("PaneLayoutOptions");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::LayoutOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "PaneLayoutOptions")
    {
      (rstStruct.PaneLayoutOptions).resize((rstStruct.PaneLayoutOptions).size() + 1);
      tdoItem >> (rstStruct.PaneLayoutOptions).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PaneLayoutOptions& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Rectangle >::const_iterator itItem = (rstStruct.Area).begin(), itItemEnd = (rstStruct.Area).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Area");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PaneLayoutOptions& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Area")
    {
      (rstStruct.Area).resize((rstStruct.Area).size() + 1);
      tdoItem >> (rstStruct.Area).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PaneOptionExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PaneOptionExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::LayoutOptionsExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::LayoutOptionsExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ReceiverConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  rdoParam.CreateChild("MediaUri", rstStruct.MediaUri);
  staff::DataObject tdoParamStreamSetup = rdoParam.CreateChild("StreamSetup");
  tdoParamStreamSetup << rstStruct.StreamSetup;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ReceiverConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  rdoParam.GetChildValueByLocalName("MediaUri", rstStruct.MediaUri);
  rdoParam.GetChildByLocalName("StreamSetup") >> rstStruct.StreamSetup;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Receiver& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamToken = rdoParam.CreateChild("Token");
  SerializeTypedef_ReferenceToken(tdoParamToken, rstStruct.Token);
  staff::DataObject tdoParamConfiguration = rdoParam.CreateChild("Configuration");
  tdoParamConfiguration << rstStruct.Configuration;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Receiver& rstStruct)
{
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("Token"), rstStruct.Token);
  rdoParam.GetChildByLocalName("Configuration") >> rstStruct.Configuration;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ReceiverStateInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamState = rdoParam.CreateChild("State");
  tdoParamState << rstStruct.State;
  rdoParam.CreateChild("AutoCreated", rstStruct.AutoCreated);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ReceiverStateInformation& rstStruct)
{
  rdoParam.GetChildByLocalName("State") >> rstStruct.State;
  rdoParam.GetChildValueByLocalName("AutoCreated", rstStruct.AutoCreated);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SourceReference& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamToken = rdoParam.CreateChild("Token");
  SerializeTypedef_ReferenceToken(tdoParamToken, rstStruct.Token);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  if (!(rstStruct.Type).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("Type", *rstStruct.Type);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SourceReference& rstStruct)
{
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("Token"), rstStruct.Token);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  const staff::Attribute& rAttrType = rdoParam.GetAttributeByLocalNameOpt("Type");
  if (!rAttrType.IsNull()) // optional attribute
  {
    rAttrType.GetValue(*rstStruct.Type);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingSummary& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("DataFrom", rstStruct.DataFrom);
  rdoParam.CreateChild("DataUntil", rstStruct.DataUntil);
  rdoParam.CreateChild("NumberRecordings", rstStruct.NumberRecordings);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingSummary& rstStruct)
{
  rdoParam.GetChildValueByLocalName("DataFrom", rstStruct.DataFrom);
  rdoParam.GetChildValueByLocalName("DataUntil", rstStruct.DataUntil);
  rdoParam.GetChildValueByLocalName("NumberRecordings", rstStruct.NumberRecordings);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SearchScope& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::SourceReference >::const_iterator itItem = (rstStruct.IncludedSources).begin(), itItemEnd = (rstStruct.IncludedSources).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("IncludedSources");
    tdoParamItem << (*itItem);
  }

  for (std::list< ::RecordingReference >::const_iterator itItem = (rstStruct.IncludedRecordings).begin(), itItemEnd = (rstStruct.IncludedRecordings).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("IncludedRecordings");
    SerializeTypedef_RecordingReference(tdoParamItem, (*itItem));
  }

  if (!(rstStruct.RecordingInformationFilter).IsNull()) // Optional
  {
    staff::DataObject tdoParamRecordingInformationFilter = rdoParam.CreateChild("RecordingInformationFilter");
    SerializeTypedef_XPathExpression(tdoParamRecordingInformationFilter, *rstStruct.RecordingInformationFilter);
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SearchScope& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "IncludedSources")
    {
      (rstStruct.IncludedSources).resize((rstStruct.IncludedSources).size() + 1);
      tdoItem >> (rstStruct.IncludedSources).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "IncludedRecordings")
    {
      (rstStruct.IncludedRecordings).resize((rstStruct.IncludedRecordings).size() + 1);
      DeserializeTypedef_RecordingReference(tdoItem, (rstStruct.IncludedRecordings).back());
    }
  }

  const staff::DataObject& rdoParamRecordingInformationFilter = rdoParam.GetChildByLocalNameOpt("RecordingInformationFilter");
  if (!rdoParamRecordingInformationFilter.IsNull()) // optional
  {
    DeserializeTypedef_XPathExpression(rdoParamRecordingInformationFilter, *rstStruct.RecordingInformationFilter);
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SearchScopeExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SearchScopeExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EventFilter& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::FilterType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EventFilter& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::FilterType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PTZPositionFilter& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMinPosition = rdoParam.CreateChild("MinPosition");
  tdoParamMinPosition << rstStruct.MinPosition;
  staff::DataObject tdoParamMaxPosition = rdoParam.CreateChild("MaxPosition");
  tdoParamMaxPosition << rstStruct.MaxPosition;
  rdoParam.CreateChild("EnterOrExit", rstStruct.EnterOrExit);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PTZPositionFilter& rstStruct)
{
  rdoParam.GetChildByLocalName("MinPosition") >> rstStruct.MinPosition;
  rdoParam.GetChildByLocalName("MaxPosition") >> rstStruct.MaxPosition;
  rdoParam.GetChildValueByLocalName("EnterOrExit", rstStruct.EnterOrExit);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataFilter& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamMetadataStreamFilter = rdoParam.CreateChild("MetadataStreamFilter");
  SerializeTypedef_XPathExpression(tdoParamMetadataStreamFilter, rstStruct.MetadataStreamFilter);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataFilter& rstStruct)
{
  DeserializeTypedef_XPathExpression(rdoParam.GetChildByLocalName("MetadataStreamFilter"), rstStruct.MetadataStreamFilter);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FindRecordingResultList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSearchState = rdoParam.CreateChild("SearchState");
  tdoParamSearchState << rstStruct.SearchState;
  for (std::list< ::RecordingInformation >::const_iterator itItem = (rstStruct.RecordingInformation).begin(), itItemEnd = (rstStruct.RecordingInformation).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("RecordingInformation");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FindRecordingResultList& rstStruct)
{
  rdoParam.GetChildByLocalName("SearchState") >> rstStruct.SearchState;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "RecordingInformation")
    {
      (rstStruct.RecordingInformation).resize((rstStruct.RecordingInformation).size() + 1);
      tdoItem >> (rstStruct.RecordingInformation).back();
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingSourceInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("SourceId", rstStruct.SourceId);
  staff::DataObject tdoParamName = rdoParam.CreateChild("Name");
  SerializeTypedef_Name(tdoParamName, rstStruct.Name);
  staff::DataObject tdoParamLocation = rdoParam.CreateChild("Location");
  SerializeTypedef_Description(tdoParamLocation, rstStruct.Location);
  staff::DataObject tdoParamDescription = rdoParam.CreateChild("Description");
  SerializeTypedef_Description(tdoParamDescription, rstStruct.Description);
  rdoParam.CreateChild("Address", rstStruct.Address);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingSourceInformation& rstStruct)
{
  rdoParam.GetChildValueByLocalName("SourceId", rstStruct.SourceId);
  DeserializeTypedef_Name(rdoParam.GetChildByLocalName("Name"), rstStruct.Name);
  DeserializeTypedef_Description(rdoParam.GetChildByLocalName("Location"), rstStruct.Location);
  DeserializeTypedef_Description(rdoParam.GetChildByLocalName("Description"), rstStruct.Description);
  rdoParam.GetChildValueByLocalName("Address", rstStruct.Address);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRecordingToken = rdoParam.CreateChild("RecordingToken");
  SerializeTypedef_RecordingReference(tdoParamRecordingToken, rstStruct.RecordingToken);
  staff::DataObject tdoParamSource = rdoParam.CreateChild("Source");
  tdoParamSource << rstStruct.Source;
  if (!(rstStruct.EarliestRecording).IsNull()) // Optional
  {
    rdoParam.CreateChild("EarliestRecording", *rstStruct.EarliestRecording);
  }
  if (!(rstStruct.LatestRecording).IsNull()) // Optional
  {
    rdoParam.CreateChild("LatestRecording", *rstStruct.LatestRecording);
  }
  staff::DataObject tdoParamContent = rdoParam.CreateChild("Content");
  SerializeTypedef_Description(tdoParamContent, rstStruct.Content);
  for (std::list< ::TrackInformation >::const_iterator itItem = (rstStruct.Track).begin(), itItemEnd = (rstStruct.Track).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Track");
    tdoParamItem << (*itItem);
  }

  staff::DataObject tdoParamRecordingStatus = rdoParam.CreateChild("RecordingStatus");
  tdoParamRecordingStatus << rstStruct.RecordingStatus;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingInformation& rstStruct)
{
  DeserializeTypedef_RecordingReference(rdoParam.GetChildByLocalName("RecordingToken"), rstStruct.RecordingToken);
  rdoParam.GetChildByLocalName("Source") >> rstStruct.Source;
  const staff::DataObject& rdoParamEarliestRecording = rdoParam.GetChildByLocalNameOpt("EarliestRecording");
  if (!rdoParamEarliestRecording.IsNull()) // optional
  {
    rdoParamEarliestRecording.GetValue(*rstStruct.EarliestRecording);
  }
  const staff::DataObject& rdoParamLatestRecording = rdoParam.GetChildByLocalNameOpt("LatestRecording");
  if (!rdoParamLatestRecording.IsNull()) // optional
  {
    rdoParamLatestRecording.GetValue(*rstStruct.LatestRecording);
  }
  DeserializeTypedef_Description(rdoParam.GetChildByLocalName("Content"), rstStruct.Content);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Track")
    {
      (rstStruct.Track).resize((rstStruct.Track).size() + 1);
      tdoItem >> (rstStruct.Track).back();
    }
  }

  rdoParam.GetChildByLocalName("RecordingStatus") >> rstStruct.RecordingStatus;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TrackInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamTrackToken = rdoParam.CreateChild("TrackToken");
  SerializeTypedef_TrackReference(tdoParamTrackToken, rstStruct.TrackToken);
  staff::DataObject tdoParamTrackType = rdoParam.CreateChild("TrackType");
  tdoParamTrackType << rstStruct.TrackType;
  staff::DataObject tdoParamDescription = rdoParam.CreateChild("Description");
  SerializeTypedef_Description(tdoParamDescription, rstStruct.Description);
  rdoParam.CreateChild("DataFrom", rstStruct.DataFrom);
  rdoParam.CreateChild("DataTo", rstStruct.DataTo);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TrackInformation& rstStruct)
{
  DeserializeTypedef_TrackReference(rdoParam.GetChildByLocalName("TrackToken"), rstStruct.TrackToken);
  rdoParam.GetChildByLocalName("TrackType") >> rstStruct.TrackType;
  DeserializeTypedef_Description(rdoParam.GetChildByLocalName("Description"), rstStruct.Description);
  rdoParam.GetChildValueByLocalName("DataFrom", rstStruct.DataFrom);
  rdoParam.GetChildValueByLocalName("DataTo", rstStruct.DataTo);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FindEventResultList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSearchState = rdoParam.CreateChild("SearchState");
  tdoParamSearchState << rstStruct.SearchState;
  for (std::list< ::FindEventResult >::const_iterator itItem = (rstStruct.Result).begin(), itItemEnd = (rstStruct.Result).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Result");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FindEventResultList& rstStruct)
{
  rdoParam.GetChildByLocalName("SearchState") >> rstStruct.SearchState;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Result")
    {
      (rstStruct.Result).resize((rstStruct.Result).size() + 1);
      tdoItem >> (rstStruct.Result).back();
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FindEventResult& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRecordingToken = rdoParam.CreateChild("RecordingToken");
  SerializeTypedef_RecordingReference(tdoParamRecordingToken, rstStruct.RecordingToken);
  staff::DataObject tdoParamTrackToken = rdoParam.CreateChild("TrackToken");
  SerializeTypedef_TrackReference(tdoParamTrackToken, rstStruct.TrackToken);
  rdoParam.CreateChild("Time", rstStruct.Time);
  staff::DataObject tdoParamEvent = rdoParam.CreateChild("Event");
  tdoParamEvent << rstStruct.Event;
  rdoParam.CreateChild("StartStateEvent", rstStruct.StartStateEvent);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FindEventResult& rstStruct)
{
  DeserializeTypedef_RecordingReference(rdoParam.GetChildByLocalName("RecordingToken"), rstStruct.RecordingToken);
  DeserializeTypedef_TrackReference(rdoParam.GetChildByLocalName("TrackToken"), rstStruct.TrackToken);
  rdoParam.GetChildValueByLocalName("Time", rstStruct.Time);
  rdoParam.GetChildByLocalName("Event") >> rstStruct.Event;
  rdoParam.GetChildValueByLocalName("StartStateEvent", rstStruct.StartStateEvent);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FindPTZPositionResultList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSearchState = rdoParam.CreateChild("SearchState");
  tdoParamSearchState << rstStruct.SearchState;
  for (std::list< ::FindPTZPositionResult >::const_iterator itItem = (rstStruct.Result).begin(), itItemEnd = (rstStruct.Result).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Result");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FindPTZPositionResultList& rstStruct)
{
  rdoParam.GetChildByLocalName("SearchState") >> rstStruct.SearchState;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Result")
    {
      (rstStruct.Result).resize((rstStruct.Result).size() + 1);
      tdoItem >> (rstStruct.Result).back();
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FindPTZPositionResult& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRecordingToken = rdoParam.CreateChild("RecordingToken");
  SerializeTypedef_RecordingReference(tdoParamRecordingToken, rstStruct.RecordingToken);
  staff::DataObject tdoParamTrackToken = rdoParam.CreateChild("TrackToken");
  SerializeTypedef_TrackReference(tdoParamTrackToken, rstStruct.TrackToken);
  rdoParam.CreateChild("Time", rstStruct.Time);
  staff::DataObject tdoParamPosition = rdoParam.CreateChild("Position");
  tdoParamPosition << rstStruct.Position;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FindPTZPositionResult& rstStruct)
{
  DeserializeTypedef_RecordingReference(rdoParam.GetChildByLocalName("RecordingToken"), rstStruct.RecordingToken);
  DeserializeTypedef_TrackReference(rdoParam.GetChildByLocalName("TrackToken"), rstStruct.TrackToken);
  rdoParam.GetChildValueByLocalName("Time", rstStruct.Time);
  rdoParam.GetChildByLocalName("Position") >> rstStruct.Position;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FindMetadataResultList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSearchState = rdoParam.CreateChild("SearchState");
  tdoParamSearchState << rstStruct.SearchState;
  for (std::list< ::FindMetadataResult >::const_iterator itItem = (rstStruct.Result).begin(), itItemEnd = (rstStruct.Result).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Result");
    tdoParamItem << (*itItem);
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FindMetadataResultList& rstStruct)
{
  rdoParam.GetChildByLocalName("SearchState") >> rstStruct.SearchState;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Result")
    {
      (rstStruct.Result).resize((rstStruct.Result).size() + 1);
      tdoItem >> (rstStruct.Result).back();
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FindMetadataResult& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRecordingToken = rdoParam.CreateChild("RecordingToken");
  SerializeTypedef_RecordingReference(tdoParamRecordingToken, rstStruct.RecordingToken);
  staff::DataObject tdoParamTrackToken = rdoParam.CreateChild("TrackToken");
  SerializeTypedef_TrackReference(tdoParamTrackToken, rstStruct.TrackToken);
  rdoParam.CreateChild("Time", rstStruct.Time);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FindMetadataResult& rstStruct)
{
  DeserializeTypedef_RecordingReference(rdoParam.GetChildByLocalName("RecordingToken"), rstStruct.RecordingToken);
  DeserializeTypedef_TrackReference(rdoParam.GetChildByLocalName("TrackToken"), rstStruct.TrackToken);
  rdoParam.GetChildValueByLocalName("Time", rstStruct.Time);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MediaAttributes& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRecordingToken = rdoParam.CreateChild("RecordingToken");
  SerializeTypedef_RecordingReference(tdoParamRecordingToken, rstStruct.RecordingToken);
  for (std::list< ::TrackAttributes >::const_iterator itItem = (rstStruct.TrackAttributes).begin(), itItemEnd = (rstStruct.TrackAttributes).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("TrackAttributes");
    tdoParamItem << (*itItem);
  }

  rdoParam.CreateChild("From", rstStruct.From);
  rdoParam.CreateChild("Until", rstStruct.Until);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MediaAttributes& rstStruct)
{
  DeserializeTypedef_RecordingReference(rdoParam.GetChildByLocalName("RecordingToken"), rstStruct.RecordingToken);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "TrackAttributes")
    {
      (rstStruct.TrackAttributes).resize((rstStruct.TrackAttributes).size() + 1);
      tdoItem >> (rstStruct.TrackAttributes).back();
    }
  }

  rdoParam.GetChildValueByLocalName("From", rstStruct.From);
  rdoParam.GetChildValueByLocalName("Until", rstStruct.Until);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TrackAttributes& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamTrackInformation = rdoParam.CreateChild("TrackInformation");
  tdoParamTrackInformation << rstStruct.TrackInformation;
  if (!(rstStruct.VideoAttributes).IsNull()) // Optional
  {
    staff::DataObject tdoParamVideoAttributes = rdoParam.CreateChild("VideoAttributes");
    tdoParamVideoAttributes << *rstStruct.VideoAttributes;
  }
  if (!(rstStruct.AudioAttributes).IsNull()) // Optional
  {
    staff::DataObject tdoParamAudioAttributes = rdoParam.CreateChild("AudioAttributes");
    tdoParamAudioAttributes << *rstStruct.AudioAttributes;
  }
  if (!(rstStruct.MetadataAttributes).IsNull()) // Optional
  {
    staff::DataObject tdoParamMetadataAttributes = rdoParam.CreateChild("MetadataAttributes");
    tdoParamMetadataAttributes << *rstStruct.MetadataAttributes;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TrackAttributes& rstStruct)
{
  rdoParam.GetChildByLocalName("TrackInformation") >> rstStruct.TrackInformation;
  const staff::DataObject& rdoParamVideoAttributes = rdoParam.GetChildByLocalNameOpt("VideoAttributes");
  if (!rdoParamVideoAttributes.IsNull()) // optional
  {
    rdoParamVideoAttributes >> *rstStruct.VideoAttributes;
  }
  const staff::DataObject& rdoParamAudioAttributes = rdoParam.GetChildByLocalNameOpt("AudioAttributes");
  if (!rdoParamAudioAttributes.IsNull()) // optional
  {
    rdoParamAudioAttributes >> *rstStruct.AudioAttributes;
  }
  const staff::DataObject& rdoParamMetadataAttributes = rdoParam.GetChildByLocalNameOpt("MetadataAttributes");
  if (!rdoParamMetadataAttributes.IsNull()) // optional
  {
    rdoParamMetadataAttributes >> *rstStruct.MetadataAttributes;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::VideoAttributes& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Bitrate).IsNull()) // Optional
  {
    rdoParam.CreateChild("Bitrate", *rstStruct.Bitrate);
  }
  rdoParam.CreateChild("Width", rstStruct.Width);
  rdoParam.CreateChild("Height", rstStruct.Height);
  staff::DataObject tdoParamEncoding = rdoParam.CreateChild("Encoding");
  tdoParamEncoding << rstStruct.Encoding;
  rdoParam.CreateChild("Framerate", rstStruct.Framerate);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::VideoAttributes& rstStruct)
{
  const staff::DataObject& rdoParamBitrate = rdoParam.GetChildByLocalNameOpt("Bitrate");
  if (!rdoParamBitrate.IsNull()) // optional
  {
    rdoParamBitrate.GetValue(*rstStruct.Bitrate);
  }
  rdoParam.GetChildValueByLocalName("Width", rstStruct.Width);
  rdoParam.GetChildValueByLocalName("Height", rstStruct.Height);
  rdoParam.GetChildByLocalName("Encoding") >> rstStruct.Encoding;
  rdoParam.GetChildValueByLocalName("Framerate", rstStruct.Framerate);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AudioAttributes& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Bitrate).IsNull()) // Optional
  {
    rdoParam.CreateChild("Bitrate", *rstStruct.Bitrate);
  }
  staff::DataObject tdoParamEncoding = rdoParam.CreateChild("Encoding");
  tdoParamEncoding << rstStruct.Encoding;
  rdoParam.CreateChild("Samplerate", rstStruct.Samplerate);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AudioAttributes& rstStruct)
{
  const staff::DataObject& rdoParamBitrate = rdoParam.GetChildByLocalNameOpt("Bitrate");
  if (!rdoParamBitrate.IsNull()) // optional
  {
    rdoParamBitrate.GetValue(*rstStruct.Bitrate);
  }
  rdoParam.GetChildByLocalName("Encoding") >> rstStruct.Encoding;
  rdoParam.GetChildValueByLocalName("Samplerate", rstStruct.Samplerate);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataAttributes& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("CanContainPTZ", rstStruct.CanContainPTZ);
  rdoParam.CreateChild("CanContainAnalytics", rstStruct.CanContainAnalytics);
  rdoParam.CreateChild("CanContainNotifications", rstStruct.CanContainNotifications);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataAttributes& rstStruct)
{
  rdoParam.GetChildValueByLocalName("CanContainPTZ", rstStruct.CanContainPTZ);
  rdoParam.GetChildValueByLocalName("CanContainAnalytics", rstStruct.CanContainAnalytics);
  rdoParam.GetChildValueByLocalName("CanContainNotifications", rstStruct.CanContainNotifications);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TrackAttributesExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TrackAttributesExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSource = rdoParam.CreateChild("Source");
  tdoParamSource << rstStruct.Source;
  staff::DataObject tdoParamContent = rdoParam.CreateChild("Content");
  SerializeTypedef_Description(tdoParamContent, rstStruct.Content);
  rdoParam.CreateChild("MaximumRetentionTime", rstStruct.MaximumRetentionTime);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("Source") >> rstStruct.Source;
  DeserializeTypedef_Description(rdoParam.GetChildByLocalName("Content"), rstStruct.Content);
  rdoParam.GetChildValueByLocalName("MaximumRetentionTime", rstStruct.MaximumRetentionTime);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TrackConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamTrackType = rdoParam.CreateChild("TrackType");
  tdoParamTrackType << rstStruct.TrackType;
  staff::DataObject tdoParamDescription = rdoParam.CreateChild("Description");
  SerializeTypedef_Description(tdoParamDescription, rstStruct.Description);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TrackConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("TrackType") >> rstStruct.TrackType;
  DeserializeTypedef_Description(rdoParam.GetChildByLocalName("Description"), rstStruct.Description);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GetTracksResponseList& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::GetTracksResponseItem >::const_iterator itItem = (rstStruct.Track).begin(), itItemEnd = (rstStruct.Track).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Track");
    tdoParamItem << (*itItem);
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GetTracksResponseList& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Track")
    {
      (rstStruct.Track).resize((rstStruct.Track).size() + 1);
      tdoItem >> (rstStruct.Track).back();
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GetRecordingsResponseItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRecordingToken = rdoParam.CreateChild("RecordingToken");
  SerializeTypedef_RecordingReference(tdoParamRecordingToken, rstStruct.RecordingToken);
  staff::DataObject tdoParamConfiguration = rdoParam.CreateChild("Configuration");
  tdoParamConfiguration << rstStruct.Configuration;
  staff::DataObject tdoParamTracks = rdoParam.CreateChild("Tracks");
  tdoParamTracks << rstStruct.Tracks;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GetRecordingsResponseItem& rstStruct)
{
  DeserializeTypedef_RecordingReference(rdoParam.GetChildByLocalName("RecordingToken"), rstStruct.RecordingToken);
  rdoParam.GetChildByLocalName("Configuration") >> rstStruct.Configuration;
  rdoParam.GetChildByLocalName("Tracks") >> rstStruct.Tracks;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GetTracksResponseItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamTrackToken = rdoParam.CreateChild("TrackToken");
  SerializeTypedef_TrackReference(tdoParamTrackToken, rstStruct.TrackToken);
  staff::DataObject tdoParamConfiguration = rdoParam.CreateChild("Configuration");
  tdoParamConfiguration << rstStruct.Configuration;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GetTracksResponseItem& rstStruct)
{
  DeserializeTypedef_TrackReference(rdoParam.GetChildByLocalName("TrackToken"), rstStruct.TrackToken);
  rdoParam.GetChildByLocalName("Configuration") >> rstStruct.Configuration;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRecordingToken = rdoParam.CreateChild("RecordingToken");
  SerializeTypedef_RecordingReference(tdoParamRecordingToken, rstStruct.RecordingToken);
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  SerializeTypedef_RecordingJobMode(tdoParamMode, rstStruct.Mode);
  rdoParam.CreateChild("Priority", rstStruct.Priority);
  for (std::list< ::RecordingJobSource >::const_iterator itItem = (rstStruct.Source).begin(), itItemEnd = (rstStruct.Source).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Source");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobConfiguration& rstStruct)
{
  DeserializeTypedef_RecordingReference(rdoParam.GetChildByLocalName("RecordingToken"), rstStruct.RecordingToken);
  DeserializeTypedef_RecordingJobMode(rdoParam.GetChildByLocalName("Mode"), rstStruct.Mode);
  rdoParam.GetChildValueByLocalName("Priority", rstStruct.Priority);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Source")
    {
      (rstStruct.Source).resize((rstStruct.Source).size() + 1);
      tdoItem >> (rstStruct.Source).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobSource& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.SourceToken).IsNull()) // Optional
  {
    staff::DataObject tdoParamSourceToken = rdoParam.CreateChild("SourceToken");
    tdoParamSourceToken << *rstStruct.SourceToken;
  }
  if (!(rstStruct.AutoCreateReceiver).IsNull()) // Optional
  {
    rdoParam.CreateChild("AutoCreateReceiver", *rstStruct.AutoCreateReceiver);
  }
  for (std::list< ::RecordingJobTrack >::const_iterator itItem = (rstStruct.Tracks).begin(), itItemEnd = (rstStruct.Tracks).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Tracks");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobSource& rstStruct)
{
  const staff::DataObject& rdoParamSourceToken = rdoParam.GetChildByLocalNameOpt("SourceToken");
  if (!rdoParamSourceToken.IsNull()) // optional
  {
    rdoParamSourceToken >> *rstStruct.SourceToken;
  }
  const staff::DataObject& rdoParamAutoCreateReceiver = rdoParam.GetChildByLocalNameOpt("AutoCreateReceiver");
  if (!rdoParamAutoCreateReceiver.IsNull()) // optional
  {
    rdoParamAutoCreateReceiver.GetValue(*rstStruct.AutoCreateReceiver);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Tracks")
    {
      (rstStruct.Tracks).resize((rstStruct.Tracks).size() + 1);
      tdoItem >> (rstStruct.Tracks).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobTrack& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("SourceTag", rstStruct.SourceTag);
  staff::DataObject tdoParamDestination = rdoParam.CreateChild("Destination");
  SerializeTypedef_TrackReference(tdoParamDestination, rstStruct.Destination);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobTrack& rstStruct)
{
  rdoParam.GetChildValueByLocalName("SourceTag", rstStruct.SourceTag);
  DeserializeTypedef_TrackReference(rdoParam.GetChildByLocalName("Destination"), rstStruct.Destination);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobSourceExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobSourceExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobStateInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamRecordingToken = rdoParam.CreateChild("RecordingToken");
  SerializeTypedef_RecordingReference(tdoParamRecordingToken, rstStruct.RecordingToken);
  staff::DataObject tdoParamState = rdoParam.CreateChild("State");
  SerializeTypedef_RecordingJobState(tdoParamState, rstStruct.State);
  for (std::list< ::RecordingJobStateSource >::const_iterator itItem = (rstStruct.Sources).begin(), itItemEnd = (rstStruct.Sources).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Sources");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobStateInformation& rstStruct)
{
  DeserializeTypedef_RecordingReference(rdoParam.GetChildByLocalName("RecordingToken"), rstStruct.RecordingToken);
  DeserializeTypedef_RecordingJobState(rdoParam.GetChildByLocalName("State"), rstStruct.State);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Sources")
    {
      (rstStruct.Sources).resize((rstStruct.Sources).size() + 1);
      tdoItem >> (rstStruct.Sources).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobStateTracks& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::RecordingJobStateTrack >::const_iterator itItem = (rstStruct.Track).begin(), itItemEnd = (rstStruct.Track).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Track");
    tdoParamItem << (*itItem);
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobStateTracks& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Track")
    {
      (rstStruct.Track).resize((rstStruct.Track).size() + 1);
      tdoItem >> (rstStruct.Track).back();
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobStateSource& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamSourceToken = rdoParam.CreateChild("SourceToken");
  tdoParamSourceToken << rstStruct.SourceToken;
  staff::DataObject tdoParamState = rdoParam.CreateChild("State");
  SerializeTypedef_RecordingJobState(tdoParamState, rstStruct.State);
  staff::DataObject tdoParamTracks = rdoParam.CreateChild("Tracks");
  tdoParamTracks << rstStruct.Tracks;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobStateSource& rstStruct)
{
  rdoParam.GetChildByLocalName("SourceToken") >> rstStruct.SourceToken;
  DeserializeTypedef_RecordingJobState(rdoParam.GetChildByLocalName("State"), rstStruct.State);
  rdoParam.GetChildByLocalName("Tracks") >> rstStruct.Tracks;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobStateTrack& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("SourceTag", rstStruct.SourceTag);
  staff::DataObject tdoParamDestination = rdoParam.CreateChild("Destination");
  SerializeTypedef_TrackReference(tdoParamDestination, rstStruct.Destination);
  if (!(rstStruct.Error).IsNull()) // Optional
  {
    rdoParam.CreateChild("Error", *rstStruct.Error);
  }
  staff::DataObject tdoParamState = rdoParam.CreateChild("State");
  SerializeTypedef_RecordingJobState(tdoParamState, rstStruct.State);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobStateTrack& rstStruct)
{
  rdoParam.GetChildValueByLocalName("SourceTag", rstStruct.SourceTag);
  DeserializeTypedef_TrackReference(rdoParam.GetChildByLocalName("Destination"), rstStruct.Destination);
  const staff::DataObject& rdoParamError = rdoParam.GetChildByLocalNameOpt("Error");
  if (!rdoParamError.IsNull()) // optional
  {
    rdoParamError.GetValue(*rstStruct.Error);
  }
  DeserializeTypedef_RecordingJobState(rdoParam.GetChildByLocalName("State"), rstStruct.State);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RecordingJobStateInformationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RecordingJobStateInformationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GetRecordingJobsResponseItem& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamJobToken = rdoParam.CreateChild("JobToken");
  SerializeTypedef_RecordingJobReference(tdoParamJobToken, rstStruct.JobToken);
  staff::DataObject tdoParamJobConfiguration = rdoParam.CreateChild("JobConfiguration");
  tdoParamJobConfiguration << rstStruct.JobConfiguration;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GetRecordingJobsResponseItem& rstStruct)
{
  DeserializeTypedef_RecordingJobReference(rdoParam.GetChildByLocalName("JobToken"), rstStruct.JobToken);
  rdoParam.GetChildByLocalName("JobConfiguration") >> rstStruct.JobConfiguration;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ReplayConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("SessionTimeout", rstStruct.SessionTimeout);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ReplayConfiguration& rstStruct)
{
  rdoParam.GetChildValueByLocalName("SessionTimeout", rstStruct.SessionTimeout);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsDeviceEngineConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::EngineConfiguration >::const_iterator itItem = (rstStruct.EngineConfiguration).begin(), itItemEnd = (rstStruct.EngineConfiguration).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("EngineConfiguration");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsDeviceEngineConfiguration& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "EngineConfiguration")
    {
      (rstStruct.EngineConfiguration).resize((rstStruct.EngineConfiguration).size() + 1);
      tdoItem >> (rstStruct.EngineConfiguration).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsEngine& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamAnalyticsEngineConfiguration = rdoParam.CreateChild("AnalyticsEngineConfiguration");
  tdoParamAnalyticsEngineConfiguration << rstStruct.AnalyticsEngineConfiguration;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsEngine& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  rdoParam.GetChildByLocalName("AnalyticsEngineConfiguration") >> rstStruct.AnalyticsEngineConfiguration;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsEngineInputInfo& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.InputInfo).IsNull()) // Optional
  {
    staff::DataObject tdoParamInputInfo = rdoParam.CreateChild("InputInfo");
    tdoParamInputInfo << *rstStruct.InputInfo;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsEngineInputInfo& rstStruct)
{
  const staff::DataObject& rdoParamInputInfo = rdoParam.GetChildByLocalNameOpt("InputInfo");
  if (!rdoParamInputInfo.IsNull()) // optional
  {
    rdoParamInputInfo >> *rstStruct.InputInfo;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::EngineConfiguration& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamVideoAnalyticsConfiguration = rdoParam.CreateChild("VideoAnalyticsConfiguration");
  tdoParamVideoAnalyticsConfiguration << rstStruct.VideoAnalyticsConfiguration;
  staff::DataObject tdoParamAnalyticsEngineInputInfo = rdoParam.CreateChild("AnalyticsEngineInputInfo");
  tdoParamAnalyticsEngineInputInfo << rstStruct.AnalyticsEngineInputInfo;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EngineConfiguration& rstStruct)
{
  rdoParam.GetChildByLocalName("VideoAnalyticsConfiguration") >> rstStruct.VideoAnalyticsConfiguration;
  rdoParam.GetChildByLocalName("AnalyticsEngineInputInfo") >> rstStruct.AnalyticsEngineInputInfo;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsEngineInputInfoExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsEngineInputInfoExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsDeviceEngineConfigurationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsDeviceEngineConfigurationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SourceIdentification& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.CreateChild("Name", rstStruct.Name);
  for (std::list< ::ReferenceToken >::const_iterator itItem = (rstStruct.Token).begin(), itItemEnd = (rstStruct.Token).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Token");
    SerializeTypedef_ReferenceToken(tdoParamItem, (*itItem));
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SourceIdentification& rstStruct)
{
  rdoParam.GetChildValueByLocalName("Name", rstStruct.Name);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Token")
    {
      (rstStruct.Token).resize((rstStruct.Token).size() + 1);
      DeserializeTypedef_ReferenceToken(tdoItem, (rstStruct.Token).back());
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataInput& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list< ::Config >::const_iterator itItem = (rstStruct.MetadataConfig).begin(), itItemEnd = (rstStruct.MetadataConfig).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("MetadataConfig");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataInput& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "MetadataConfig")
    {
      (rstStruct.MetadataConfig).resize((rstStruct.MetadataConfig).size() + 1);
      tdoItem >> (rstStruct.MetadataConfig).back();
    }
  }

  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsEngineInput& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamSourceIdentification = rdoParam.CreateChild("SourceIdentification");
  tdoParamSourceIdentification << rstStruct.SourceIdentification;
  staff::DataObject tdoParamVideoInput = rdoParam.CreateChild("VideoInput");
  tdoParamVideoInput << rstStruct.VideoInput;
  staff::DataObject tdoParamMetadataInput = rdoParam.CreateChild("MetadataInput");
  tdoParamMetadataInput << rstStruct.MetadataInput;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsEngineInput& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  rdoParam.GetChildByLocalName("SourceIdentification") >> rstStruct.SourceIdentification;
  rdoParam.GetChildByLocalName("VideoInput") >> rstStruct.VideoInput;
  rdoParam.GetChildByLocalName("MetadataInput") >> rstStruct.MetadataInput;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SourceIdentificationExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SourceIdentificationExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataInputExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataInputExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsEngineControl& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ConfigurationEntity& >(rstStruct);

  staff::DataObject tdoParamEngineToken = rdoParam.CreateChild("EngineToken");
  SerializeTypedef_ReferenceToken(tdoParamEngineToken, rstStruct.EngineToken);
  staff::DataObject tdoParamEngineConfigToken = rdoParam.CreateChild("EngineConfigToken");
  SerializeTypedef_ReferenceToken(tdoParamEngineConfigToken, rstStruct.EngineConfigToken);
  for (std::list< ::ReferenceToken >::const_iterator itItem = (rstStruct.InputToken).begin(), itItemEnd = (rstStruct.InputToken).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("InputToken");
    SerializeTypedef_ReferenceToken(tdoParamItem, (*itItem));
  }

  for (std::list< ::ReferenceToken >::const_iterator itItem = (rstStruct.ReceiverToken).begin(), itItemEnd = (rstStruct.ReceiverToken).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("ReceiverToken");
    SerializeTypedef_ReferenceToken(tdoParamItem, (*itItem));
  }

  if (!(rstStruct.Multicast).IsNull()) // Optional
  {
    staff::DataObject tdoParamMulticast = rdoParam.CreateChild("Multicast");
    tdoParamMulticast << *rstStruct.Multicast;
  }
  staff::DataObject tdoParamSubscription = rdoParam.CreateChild("Subscription");
  tdoParamSubscription << rstStruct.Subscription;
  staff::DataObject tdoParamMode = rdoParam.CreateChild("Mode");
  tdoParamMode << rstStruct.Mode;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsEngineControl& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ConfigurationEntity& >(rstStruct);

  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("EngineToken"), rstStruct.EngineToken);
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("EngineConfigToken"), rstStruct.EngineConfigToken);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "InputToken")
    {
      (rstStruct.InputToken).resize((rstStruct.InputToken).size() + 1);
      DeserializeTypedef_ReferenceToken(tdoItem, (rstStruct.InputToken).back());
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "ReceiverToken")
    {
      (rstStruct.ReceiverToken).resize((rstStruct.ReceiverToken).size() + 1);
      DeserializeTypedef_ReferenceToken(tdoItem, (rstStruct.ReceiverToken).back());
    }
  }

  const staff::DataObject& rdoParamMulticast = rdoParam.GetChildByLocalNameOpt("Multicast");
  if (!rdoParamMulticast.IsNull()) // optional
  {
    rdoParamMulticast >> *rstStruct.Multicast;
  }
  rdoParam.GetChildByLocalName("Subscription") >> rstStruct.Subscription;
  rdoParam.GetChildByLocalName("Mode") >> rstStruct.Mode;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsState& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Error).IsNull()) // Optional
  {
    rdoParam.CreateChild("Error", *rstStruct.Error);
  }
  rdoParam.CreateChild("State", rstStruct.State);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsState& rstStruct)
{
  const staff::DataObject& rdoParamError = rdoParam.GetChildByLocalNameOpt("Error");
  if (!rdoParamError.IsNull()) // optional
  {
    rdoParamError.GetValue(*rstStruct.Error);
  }
  rdoParam.GetChildValueByLocalName("State", rstStruct.State);
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AnalyticsStateInformation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  staff::DataObject tdoParamAnalyticsEngineControlToken = rdoParam.CreateChild("AnalyticsEngineControlToken");
  SerializeTypedef_ReferenceToken(tdoParamAnalyticsEngineControlToken, rstStruct.AnalyticsEngineControlToken);
  staff::DataObject tdoParamState = rdoParam.CreateChild("State");
  tdoParamState << rstStruct.State;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AnalyticsStateInformation& rstStruct)
{
  DeserializeTypedef_ReferenceToken(rdoParam.GetChildByLocalName("AnalyticsEngineControlToken"), rstStruct.AnalyticsEngineControlToken);
  rdoParam.GetChildByLocalName("State") >> rstStruct.State;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ActionEngineEventPayload& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.RequestInfo).IsNull()) // Optional
  {
    staff::DataObject tdoParamRequestInfo = rdoParam.CreateChild("RequestInfo");
    tdoParamRequestInfo << *rstStruct.RequestInfo;
  }
  if (!(rstStruct.ResponseInfo).IsNull()) // Optional
  {
    staff::DataObject tdoParamResponseInfo = rdoParam.CreateChild("ResponseInfo");
    tdoParamResponseInfo << *rstStruct.ResponseInfo;
  }
  if (!(rstStruct.Fault).IsNull()) // Optional
  {
    staff::DataObject tdoParamFault = rdoParam.CreateChild("Fault");
    tdoParamFault << *rstStruct.Fault;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ActionEngineEventPayload& rstStruct)
{
  const staff::DataObject& rdoParamRequestInfo = rdoParam.GetChildByLocalNameOpt("RequestInfo");
  if (!rdoParamRequestInfo.IsNull()) // optional
  {
    rdoParamRequestInfo >> *rstStruct.RequestInfo;
  }
  const staff::DataObject& rdoParamResponseInfo = rdoParam.GetChildByLocalNameOpt("ResponseInfo");
  if (!rdoParamResponseInfo.IsNull()) // optional
  {
    rdoParamResponseInfo >> *rstStruct.ResponseInfo;
  }
  const staff::DataObject& rdoParamFault = rdoParam.GetChildByLocalNameOpt("Fault");
  if (!rdoParamFault.IsNull()) // optional
  {
    rdoParamFault >> *rstStruct.Fault;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ActionEngineEventPayloadExtension& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ActionEngineEventPayloadExtension& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Message& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  if (!(rstStruct.Source).IsNull()) // Optional
  {
    staff::DataObject tdoParamSource = rdoParam.CreateChild("Source");
    tdoParamSource << *rstStruct.Source;
  }
  if (!(rstStruct.Key).IsNull()) // Optional
  {
    staff::DataObject tdoParamKey = rdoParam.CreateChild("Key");
    tdoParamKey << *rstStruct.Key;
  }
  if (!(rstStruct.Data).IsNull()) // Optional
  {
    staff::DataObject tdoParamData = rdoParam.CreateChild("Data");
    tdoParamData << *rstStruct.Data;
  }
  if (!(rstStruct.Extension).IsNull()) // Optional
  {
    staff::DataObject tdoParamExtension = rdoParam.CreateChild("Extension");
    tdoParamExtension << *rstStruct.Extension;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  rdoParam.CreateAttribute("UtcTime", rstStruct.UtcTime);
  if (!(rstStruct.PropertyOperation).IsNull()) // Optional
  {
    std::string sParamPropertyOperation;
    rdoParam.CreateAttribute("PropertyOperation", sParamPropertyOperation << *rstStruct.PropertyOperation);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Message& rstStruct)
{
  const staff::DataObject& rdoParamSource = rdoParam.GetChildByLocalNameOpt("Source");
  if (!rdoParamSource.IsNull()) // optional
  {
    rdoParamSource >> *rstStruct.Source;
  }
  const staff::DataObject& rdoParamKey = rdoParam.GetChildByLocalNameOpt("Key");
  if (!rdoParamKey.IsNull()) // optional
  {
    rdoParamKey >> *rstStruct.Key;
  }
  const staff::DataObject& rdoParamData = rdoParam.GetChildByLocalNameOpt("Data");
  if (!rdoParamData.IsNull()) // optional
  {
    rdoParamData >> *rstStruct.Data;
  }
  const staff::DataObject& rdoParamExtension = rdoParam.GetChildByLocalNameOpt("Extension");
  if (!rdoParamExtension.IsNull()) // optional
  {
    rdoParamExtension >> *rstStruct.Extension;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  rdoParam.GetAttributeValueByName("UtcTime", rstStruct.UtcTime);
  const staff::Attribute& rAttrPropertyOperation = rdoParam.GetAttributeByLocalNameOpt("PropertyOperation");
  if (!rAttrPropertyOperation.IsNull()) // optional attribute
  {
    rAttrPropertyOperation.GetText() >> *rstStruct.PropertyOperation;
  }
  return rdoParam;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

DataObject& SerializeTypedef_ReferenceToken(DataObject& rdoParam, const ::ReferenceToken& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_Name(DataObject& rdoParam, const ::Name& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_IntAttrList(DataObject& rdoParam, const ::IntAttrList& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_FloatAttrList(DataObject& rdoParam, const ::FloatAttrList& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_StringAttrList(DataObject& rdoParam, const ::StringAttrList& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_NetworkInterfaceConfigPriority(DataObject& rdoParam, const ::NetworkInterfaceConfigPriority& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_IANA_IfTypes(DataObject& rdoParam, const ::IANA_IfTypes& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_IPv4Address(DataObject& rdoParam, const ::IPv4Address& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_IPv6Address(DataObject& rdoParam, const ::IPv6Address& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_HwAddress(DataObject& rdoParam, const ::HwAddress& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_DNSName(DataObject& rdoParam, const ::DNSName& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_Domain(DataObject& rdoParam, const ::Domain& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_Dot11SSIDType(DataObject& rdoParam, const ::Dot11SSIDType& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_Dot11PSK(DataObject& rdoParam, const ::Dot11PSK& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_Dot11PSKPassphrase(DataObject& rdoParam, const ::Dot11PSKPassphrase& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_AuxiliaryData(DataObject& rdoParam, const ::AuxiliaryData& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_TopicNamespaceLocation(DataObject& rdoParam, const ::TopicNamespaceLocation& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_ReceiverReference(DataObject& rdoParam, const ::ReceiverReference& rtType)
{
  SerializeTypedef_ReferenceToken(rdoParam, rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_RecordingReference(DataObject& rdoParam, const ::RecordingReference& rtType)
{
  SerializeTypedef_ReferenceToken(rdoParam, rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_TrackReference(DataObject& rdoParam, const ::TrackReference& rtType)
{
  SerializeTypedef_ReferenceToken(rdoParam, rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_XPathExpression(DataObject& rdoParam, const ::XPathExpression& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_JobToken(DataObject& rdoParam, const ::JobToken& rtType)
{
  SerializeTypedef_ReferenceToken(rdoParam, rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_RecordingJobReference(DataObject& rdoParam, const ::RecordingJobReference& rtType)
{
  SerializeTypedef_ReferenceToken(rdoParam, rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_RecordingJobMode(DataObject& rdoParam, const ::RecordingJobMode& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_RecordingJobState(DataObject& rdoParam, const ::RecordingJobState& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_MetadataStream(DataObject& rdoParam, const ::MetadataStream& rtType)
{
  for (std::list< ::MetadataStreamItem >::const_iterator itItem = (rtType).begin(), itItemEnd = (rtType).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam << (*itItem);
  }

  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_VideoAnalyticsStream(DataObject& rdoParam, const ::VideoAnalyticsStream& rtType)
{
  for (std::list< ::VideoAnalyticsStreamItem >::const_iterator itItem = (rtType).begin(), itItemEnd = (rtType).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam << (*itItem);
  }

  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_PTZStream(DataObject& rdoParam, const ::PTZStream& rtType)
{
  for (std::list< ::PTZStreamItem >::const_iterator itItem = (rtType).begin(), itItemEnd = (rtType).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam << (*itItem);
  }

  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


DataObject& SerializeTypedef_EventStream(DataObject& rdoParam, const ::EventStream& rtType)
{
  for (std::list< ::EventStreamItem >::const_iterator itItem = (rtType).begin(), itItemEnd = (rtType).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam << (*itItem);
  }

  rdoParam.SetNamespaceUriGenPrefix("http://www.onvif.org/ver10/schema", true);
  rdoParam.SetElementFormDefaultQualified(true);
  return rdoParam;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
const DataObject& DeserializeTypedef_ReferenceToken(const DataObject& rdoParam, ::ReferenceToken& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_Name(const DataObject& rdoParam, ::Name& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_IntAttrList(const DataObject& rdoParam, ::IntAttrList& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_FloatAttrList(const DataObject& rdoParam, ::FloatAttrList& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_StringAttrList(const DataObject& rdoParam, ::StringAttrList& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_NetworkInterfaceConfigPriority(const DataObject& rdoParam, ::NetworkInterfaceConfigPriority& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_IANA_IfTypes(const DataObject& rdoParam, ::IANA_IfTypes& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_IPv4Address(const DataObject& rdoParam, ::IPv4Address& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_IPv6Address(const DataObject& rdoParam, ::IPv6Address& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_HwAddress(const DataObject& rdoParam, ::HwAddress& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_DNSName(const DataObject& rdoParam, ::DNSName& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_Domain(const DataObject& rdoParam, ::Domain& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_Dot11SSIDType(const DataObject& rdoParam, ::Dot11SSIDType& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_Dot11PSK(const DataObject& rdoParam, ::Dot11PSK& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_Dot11PSKPassphrase(const DataObject& rdoParam, ::Dot11PSKPassphrase& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_AuxiliaryData(const DataObject& rdoParam, ::AuxiliaryData& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_TopicNamespaceLocation(const DataObject& rdoParam, ::TopicNamespaceLocation& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_ReceiverReference(const DataObject& rdoParam, ::ReceiverReference& rtType)
{
  DeserializeTypedef_ReferenceToken(rdoParam, rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_RecordingReference(const DataObject& rdoParam, ::RecordingReference& rtType)
{
  DeserializeTypedef_ReferenceToken(rdoParam, rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_TrackReference(const DataObject& rdoParam, ::TrackReference& rtType)
{
  DeserializeTypedef_ReferenceToken(rdoParam, rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_XPathExpression(const DataObject& rdoParam, ::XPathExpression& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_JobToken(const DataObject& rdoParam, ::JobToken& rtType)
{
  DeserializeTypedef_ReferenceToken(rdoParam, rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_RecordingJobReference(const DataObject& rdoParam, ::RecordingJobReference& rtType)
{
  DeserializeTypedef_ReferenceToken(rdoParam, rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_RecordingJobMode(const DataObject& rdoParam, ::RecordingJobMode& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_RecordingJobState(const DataObject& rdoParam, ::RecordingJobState& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_MetadataStream(const DataObject& rdoParam, ::MetadataStream& rtType)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    (rtType).resize((rtType).size() + 1);
    tdoItem >> (rtType).back();
  }

  return rdoParam;
}

const DataObject& DeserializeTypedef_VideoAnalyticsStream(const DataObject& rdoParam, ::VideoAnalyticsStream& rtType)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    (rtType).resize((rtType).size() + 1);
    tdoItem >> (rtType).back();
  }

  return rdoParam;
}

const DataObject& DeserializeTypedef_PTZStream(const DataObject& rdoParam, ::PTZStream& rtType)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    (rtType).resize((rtType).size() + 1);
    tdoItem >> (rtType).back();
  }

  return rdoParam;
}

const DataObject& DeserializeTypedef_EventStream(const DataObject& rdoParam, ::EventStream& rtType)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    (rtType).resize((rtType).size() + 1);
    tdoItem >> (rtType).back();
  }

  return rdoParam;
}

}


