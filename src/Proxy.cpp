// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include "Proxy.h"

namespace staff
{
///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators/deserializators

DataObject& operator<<(DataObject& rdoParam, const struct ::Body& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://schemas.xmlsoap.org/soap/envelope/", true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Body& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Envelope& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://schemas.xmlsoap.org/soap/envelope/", true);
  if (!(rstStruct.Header).IsNull()) // Optional
  {
    staff::DataObject tdoParamHeader = rdoParam.CreateChild("Header");
    tdoParamHeader << *rstStruct.Header;
  }
  staff::DataObject tdoParamBody = rdoParam.CreateChild("Body");
  tdoParamBody << rstStruct.Body;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Envelope& rstStruct)
{
  const staff::DataObject& rdoParamHeader = rdoParam.GetChildByLocalNameOpt("Header");
  if (!rdoParamHeader.IsNull()) // optional
  {
    rdoParamHeader >> *rstStruct.Header;
  }
  rdoParam.GetChildByLocalName("Body") >> rstStruct.Body;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Header& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://schemas.xmlsoap.org/soap/envelope/", true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Header& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Fault& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://schemas.xmlsoap.org/soap/envelope/", true);
  rdoParam.CreateChild("faultcode", rstStruct.faultcode);
  rdoParam.CreateChild("faultstring", rstStruct.faultstring);
  if (!(rstStruct.faultactor).IsNull()) // Optional
  {
    rdoParam.CreateChild("faultactor", *rstStruct.faultactor);
  }
  if (!(rstStruct.detail).IsNull()) // Optional
  {
    staff::DataObject tdoParamdetail = rdoParam.CreateChild("detail");
    tdoParamdetail << *rstStruct.detail;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Fault& rstStruct)
{
  rdoParam.GetChildValueByLocalName("faultcode", rstStruct.faultcode);
  rdoParam.GetChildValueByLocalName("faultstring", rstStruct.faultstring);
  const staff::DataObject& rdoParamfaultactor = rdoParam.GetChildByLocalNameOpt("faultactor");
  if (!rdoParamfaultactor.IsNull()) // optional
  {
    rdoParamfaultactor.GetValue(*rstStruct.faultactor);
  }
  const staff::DataObject& rdoParamdetail = rdoParam.GetChildByLocalNameOpt("detail");
  if (!rdoParamdetail.IsNull()) // optional
  {
    rdoParamdetail >> *rstStruct.detail;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::detail& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://schemas.xmlsoap.org/soap/envelope/", true);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::detail& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

DataObject& SerializeTypedef_encodingStyle(DataObject& rdoParam, const ::encodingStyle& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://schemas.xmlsoap.org/soap/envelope/", true);
  return rdoParam;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
const DataObject& DeserializeTypedef_encodingStyle(const DataObject& rdoParam, ::encodingStyle& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

}


