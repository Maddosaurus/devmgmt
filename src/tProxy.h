// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#ifndef _tProxy_h_
#define _tProxy_h_

#include "t.h"

namespace staff
{
  class DataObject;
  DataObject& operator<<(DataObject& rdoParam, const struct ::Documentation& rstStruct);
  const DataObject& operator>>(const DataObject& rdoParam, struct ::Documentation& rstStruct);
  DataObject& operator<<(DataObject& rdoParam, const struct ::ExtensibleDocumented& rstStruct);
  const DataObject& operator>>(const DataObject& rdoParam, struct ::ExtensibleDocumented& rstStruct);
  DataObject& operator<<(DataObject& rdoParam, const Abstract< ::ExtensibleDocumented >& tpAbstractStruct);
  const DataObject& operator>>(const DataObject& rdoParam, Abstract< ::ExtensibleDocumented >& tpAbstractStruct);
  DataObject& operator<<(DataObject& rdoParam, const struct ::QueryExpressionType& rstStruct);
  const DataObject& operator>>(const DataObject& rdoParam, struct ::QueryExpressionType& rstStruct);
  DataObject& operator<<(DataObject& rdoParam, const struct ::TopicType& rstStruct);
  const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicType& rstStruct);
  DataObject& operator<<(DataObject& rdoParam, const struct ::TopicNamespaceType& rstStruct);
  const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicNamespaceType& rstStruct);
  DataObject& operator<<(DataObject& rdoParam, const struct ::TopicNamespaceType::Topic& rstStruct);
  const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicNamespaceType::Topic& rstStruct);
  DataObject& operator<<(DataObject& rdoParam, const struct ::TopicSetType& rstStruct);
  const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicSetType& rstStruct);
  DataObject& SerializeTypedef_FullTopicExpression(DataObject& rdoParam, const ::FullTopicExpression& rtType);
  const DataObject& DeserializeTypedef_FullTopicExpression(const DataObject& rdoParam, ::FullTopicExpression& rtType);
  DataObject& SerializeTypedef_ConcreteTopicExpression(DataObject& rdoParam, const ::ConcreteTopicExpression& rtType);
  const DataObject& DeserializeTypedef_ConcreteTopicExpression(const DataObject& rdoParam, ::ConcreteTopicExpression& rtType);
  DataObject& SerializeTypedef_SimpleTopicExpression(DataObject& rdoParam, const ::SimpleTopicExpression& rtType);
  const DataObject& DeserializeTypedef_SimpleTopicExpression(const DataObject& rdoParam, ::SimpleTopicExpression& rtType);
}

#endif

