// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/

#ifndef _t_h_
#define _t_h_

#include <list>
#include <string>
#include <staff/common/DataObject.h>
#include <staff/common/Optional.h>
#include <staff/common/WsdlTypes.h>
#include <staff/common/Attribute.h>
#include <staff/common/Abstract.h>
#include <staff/common/QName.h>

// *interface.attributeFormDefault: unqualified
// *interface.elementFormDefault: qualified
// *interface.targetNamespace: http://docs.oasis-open.org/wsn/t-1

  struct Documentation;
  struct ExtensibleDocumented;
  struct QueryExpressionType;
  struct TopicType;
  struct TopicNamespaceType;
  struct TopicSetType;


  // *restriction-pattern: ([\i-[:]][\c-[:]]*:)?(//)?([\i-[:]][\c-[:]]*|\*)((/|//)(([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*|\*|[.]))*(\|([\i-[:]][\c-[:]]*:)?(//)?([\i-[:]][\c-[:]]*|\*)((/|//)(([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*|\*|[.]))*)*
  typedef staff::token FullTopicExpression;

  // *restriction-pattern: (([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*)(/([\i-[:]][\c-[:]]*:)?[\i-[:]][\c-[:]]*)*
  typedef staff::token ConcreteTopicExpression;
  typedef staff::QName SimpleTopicExpression;

  struct Documentation
  {
    // *useParentElement: true
    std::list<staff::DataObject> tUnnamed0;
  };

  // *abstract: true
  struct ExtensibleDocumented
  {
    staff::Optional< ::Documentation > documentation;
    staff::anyAttribute lsAnyAttributes;
    virtual ~ExtensibleDocumented() {}
  };

  struct QueryExpressionType
  {
    // *useParentElement: true
    staff::Optional<staff::DataObject> tUnnamed0;
    // *isAttribute: true
    staff::anyURI Dialect;
  };

  struct TopicType: public ::ExtensibleDocumented
  {
    staff::Optional< ::QueryExpressionType > MessagePattern;
    // *useParentElement: true
    std::list< ::TopicType > Topic;
    // *useParentElement: true
    std::list<staff::DataObject> tUnnamed0;
    // *isAttribute: true
    staff::NCName name;
    // *isAttribute: true
    staff::Optional<std::string> messageTypes;
    // *defaultValue: false
    // *isAttribute: true
    staff::Optional<bool> final;

    TopicType():
      final(false)
    {
    }
  };

  struct TopicNamespaceType: public ::ExtensibleDocumented
  {
    struct Topic: public ::TopicType
    {
      // *isAttribute: true
      staff::Optional< ::ConcreteTopicExpression > parent;
    };

    // *useParentElement: true
    std::list<struct ::TopicNamespaceType::Topic> Topic;
    // *useParentElement: true
    std::list<staff::DataObject> tUnnamed0;
    // *isAttribute: true
    staff::Optional<staff::NCName> name;
    // *isAttribute: true
    staff::anyURI targetNamespace;
    // *defaultValue: false
    // *isAttribute: true
    staff::Optional<bool> final;

    TopicNamespaceType():
      final(false)
    {
    }
  };

  struct TopicSetType: public ::ExtensibleDocumented
  {
    // *useParentElement: true
    std::list<staff::DataObject> tUnnamed0;
  };


#endif // _t_h_

