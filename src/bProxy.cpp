// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include "bProxy.h"

namespace staff
{
///////////////////////////////////////////////////////////////////////////////////////////////////////
// enums

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators/deserializators

DataObject& operator<<(DataObject& rdoParam, const struct ::TopicExpressionType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  if (!(rstStruct.tUnnamed0).IsNull()) // Optional
  {
    rdoParam.AppendChild(*rstStruct.tUnnamed0);
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  rdoParam.CreateAttribute("Dialect", rstStruct.Dialect);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicExpressionType& rstStruct)
{
  if (!rdoParam.IsNull()) // optional
  {
    *rstStruct.tUnnamed0 = rdoParam.FirstChild();
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  rdoParam.GetAttributeValueByName("Dialect", rstStruct.Dialect);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::FilterType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::FilterType& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SubscriptionPolicyType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SubscriptionPolicyType& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NotificationMessageHolderType::Message& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  rdoParam.AppendChild(rstStruct.tUnnamed0);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NotificationMessageHolderType::Message& rstStruct)
{
  rstStruct.tUnnamed0 = rdoParam.FirstChild();
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NotificationMessageHolderType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  if (!(rstStruct.SubscriptionReference).IsNull()) // Optional
  {
    staff::DataObject tdoParamSubscriptionReference = rdoParam.CreateChild("SubscriptionReference");
    tdoParamSubscriptionReference << *rstStruct.SubscriptionReference;
  }
  if (!(rstStruct.Topic).IsNull()) // Optional
  {
    staff::DataObject tdoParamTopic = rdoParam.CreateChild("Topic");
    tdoParamTopic << *rstStruct.Topic;
  }
  if (!(rstStruct.ProducerReference).IsNull()) // Optional
  {
    staff::DataObject tdoParamProducerReference = rdoParam.CreateChild("ProducerReference");
    tdoParamProducerReference << *rstStruct.ProducerReference;
  }
  staff::DataObject tdoParamMessage = rdoParam.CreateChild("Message");
  tdoParamMessage << rstStruct.Message;
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NotificationMessageHolderType& rstStruct)
{
  const staff::DataObject& rdoParamSubscriptionReference = rdoParam.GetChildByLocalNameOpt("SubscriptionReference");
  if (!rdoParamSubscriptionReference.IsNull()) // optional
  {
    rdoParamSubscriptionReference >> *rstStruct.SubscriptionReference;
  }
  const staff::DataObject& rdoParamTopic = rdoParam.GetChildByLocalNameOpt("Topic");
  if (!rdoParamTopic.IsNull()) // optional
  {
    rdoParamTopic >> *rstStruct.Topic;
  }
  const staff::DataObject& rdoParamProducerReference = rdoParam.GetChildByLocalNameOpt("ProducerReference");
  if (!rdoParamProducerReference.IsNull()) // optional
  {
    rdoParamProducerReference >> *rstStruct.ProducerReference;
  }
  rdoParam.GetChildByLocalName("Message") >> rstStruct.Message;
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SubscribeCreationFailedFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SubscribeCreationFailedFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::InvalidFilterFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  for (std::list<staff::QName>::const_iterator itItem = (rstStruct.UnknownFilter).begin(), itItemEnd = (rstStruct.UnknownFilter).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("UnknownFilter", (*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::InvalidFilterFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "UnknownFilter")
    {
      (rstStruct.UnknownFilter).push_back(tdoItem.GetText());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TopicExpressionDialectUnknownFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicExpressionDialectUnknownFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::InvalidTopicExpressionFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::InvalidTopicExpressionFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TopicNotSupportedFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicNotSupportedFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MultipleTopicsSpecifiedFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MultipleTopicsSpecifiedFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::InvalidProducerPropertiesExpressionFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::InvalidProducerPropertiesExpressionFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::InvalidMessageContentExpressionFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::InvalidMessageContentExpressionFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnrecognizedPolicyRequestFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  for (std::list<staff::QName>::const_iterator itItem = (rstStruct.UnrecognizedPolicy).begin(), itItemEnd = (rstStruct.UnrecognizedPolicy).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("UnrecognizedPolicy", (*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnrecognizedPolicyRequestFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "UnrecognizedPolicy")
    {
      (rstStruct.UnrecognizedPolicy).push_back(tdoItem.GetText());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnsupportedPolicyRequestFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  for (std::list<staff::QName>::const_iterator itItem = (rstStruct.UnsupportedPolicy).begin(), itItemEnd = (rstStruct.UnsupportedPolicy).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("UnsupportedPolicy", (*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnsupportedPolicyRequestFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "UnsupportedPolicy")
    {
      (rstStruct.UnsupportedPolicy).push_back(tdoItem.GetText());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NotifyMessageNotSupportedFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NotifyMessageNotSupportedFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnacceptableInitialTerminationTimeFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  rdoParam.CreateChild("MinimumTime", rstStruct.MinimumTime);
  if (!(rstStruct.MaximumTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("MaximumTime", *rstStruct.MaximumTime);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnacceptableInitialTerminationTimeFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  rdoParam.GetChildValueByLocalName("MinimumTime", rstStruct.MinimumTime);
  const staff::DataObject& rdoParamMaximumTime = rdoParam.GetChildByLocalNameOpt("MaximumTime");
  if (!rdoParamMaximumTime.IsNull()) // optional
  {
    rdoParamMaximumTime.GetValue(*rstStruct.MaximumTime);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NoCurrentMessageOnTopicFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NoCurrentMessageOnTopicFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnableToGetMessagesFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnableToGetMessagesFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnableToDestroyPullPointFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnableToDestroyPullPointFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnableToCreatePullPointFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnableToCreatePullPointFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnacceptableTerminationTimeFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  rdoParam.CreateChild("MinimumTime", rstStruct.MinimumTime);
  if (!(rstStruct.MaximumTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("MaximumTime", *rstStruct.MaximumTime);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnacceptableTerminationTimeFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  rdoParam.GetChildValueByLocalName("MinimumTime", rstStruct.MinimumTime);
  const staff::DataObject& rdoParamMaximumTime = rdoParam.GetChildByLocalNameOpt("MaximumTime");
  if (!rdoParamMaximumTime.IsNull()) // optional
  {
    rdoParamMaximumTime.GetValue(*rstStruct.MaximumTime);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnableToDestroySubscriptionFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnableToDestroySubscriptionFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PauseFailedFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PauseFailedFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ResumeFailedFaultType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ResumeFailedFaultType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::BaseFaultType& >(rstStruct);

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::NotificationProducerRP& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list< ::TopicExpressionType >::const_iterator itItem = (rstStruct.TopicExpression).begin(), itItemEnd = (rstStruct.TopicExpression).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("TopicExpression");
    tdoParamItem << (*itItem);
  }

  if (!(rstStruct.FixedTopicSet).IsNull()) // Optional
  {
    rdoParam.CreateChild("FixedTopicSet", *rstStruct.FixedTopicSet);
  }
  for (std::list<staff::anyURI>::const_iterator itItem = (rstStruct.TopicExpressionDialect).begin(), itItemEnd = (rstStruct.TopicExpressionDialect).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("TopicExpressionDialect", (*itItem));
  }

  if (!(rstStruct.TopicSet).IsNull()) // Optional
  {
    staff::DataObject tdoParamTopicSet = rdoParam.CreateChild("TopicSet");
    tdoParamTopicSet << *rstStruct.TopicSet;
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::NotificationProducerRP& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "TopicExpression")
    {
      (rstStruct.TopicExpression).resize((rstStruct.TopicExpression).size() + 1);
      tdoItem >> (rstStruct.TopicExpression).back();
    }
  }

  const staff::DataObject& rdoParamFixedTopicSet = rdoParam.GetChildByLocalNameOpt("FixedTopicSet");
  if (!rdoParamFixedTopicSet.IsNull()) // optional
  {
    rdoParamFixedTopicSet.GetValue(*rstStruct.FixedTopicSet);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "TopicExpressionDialect")
    {
      (rstStruct.TopicExpressionDialect).push_back(tdoItem.GetText());
    }
  }

  const staff::DataObject& rdoParamTopicSet = rdoParam.GetChildByLocalNameOpt("TopicSet");
  if (!rdoParamTopicSet.IsNull()) // optional
  {
    rdoParamTopicSet >> *rstStruct.TopicSet;
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SubscriptionManagerRP& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  staff::DataObject tdoParamConsumerReference = rdoParam.CreateChild("ConsumerReference");
  tdoParamConsumerReference << rstStruct.ConsumerReference;
  if (!(rstStruct.Filter).IsNull()) // Optional
  {
    staff::DataObject tdoParamFilter = rdoParam.CreateChild("Filter");
    tdoParamFilter << *rstStruct.Filter;
  }
  if (!(rstStruct.SubscriptionPolicy).IsNull()) // Optional
  {
    staff::DataObject tdoParamSubscriptionPolicy = rdoParam.CreateChild("SubscriptionPolicy");
    tdoParamSubscriptionPolicy << *rstStruct.SubscriptionPolicy;
  }
  if (!(rstStruct.CreationTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("CreationTime", *rstStruct.CreationTime);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SubscriptionManagerRP& rstStruct)
{
  rdoParam.GetChildByLocalName("ConsumerReference") >> rstStruct.ConsumerReference;
  const staff::DataObject& rdoParamFilter = rdoParam.GetChildByLocalNameOpt("Filter");
  if (!rdoParamFilter.IsNull()) // optional
  {
    rdoParamFilter >> *rstStruct.Filter;
  }
  const staff::DataObject& rdoParamSubscriptionPolicy = rdoParam.GetChildByLocalNameOpt("SubscriptionPolicy");
  if (!rdoParamSubscriptionPolicy.IsNull()) // optional
  {
    rdoParamSubscriptionPolicy >> *rstStruct.SubscriptionPolicy;
  }
  const staff::DataObject& rdoParamCreationTime = rdoParam.GetChildByLocalNameOpt("CreationTime");
  if (!rdoParamCreationTime.IsNull()) // optional
  {
    rdoParamCreationTime.GetValue(*rstStruct.CreationTime);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Notify& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list< ::NotificationMessageHolderType >::const_iterator itItem = (rstStruct.NotificationMessage).begin(), itItemEnd = (rstStruct.NotificationMessage).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("NotificationMessage");
    tdoParamItem << (*itItem);
  }

  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Notify& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "NotificationMessage")
    {
      (rstStruct.NotificationMessage).resize((rstStruct.NotificationMessage).size() + 1);
      tdoItem >> (rstStruct.NotificationMessage).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UseRaw& /*rstStruct*/)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UseRaw& /*rstStruct*/)
{
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Subscribe::SubscriptionPolicy& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Subscribe::SubscriptionPolicy& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Subscribe& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  staff::DataObject tdoParamConsumerReference = rdoParam.CreateChild("ConsumerReference");
  tdoParamConsumerReference << rstStruct.ConsumerReference;
  if (!(rstStruct.Filter).IsNull()) // Optional
  {
    staff::DataObject tdoParamFilter = rdoParam.CreateChild("Filter");
    tdoParamFilter << *rstStruct.Filter;
  }
  if (!(rstStruct.InitialTerminationTime).IsNull()) // Optional
  {
    if (!(*rstStruct.InitialTerminationTime).IsNull()) // Nillable
    {
      staff::DataObject tdoParamInitialTerminationTime = rdoParam.CreateChild("InitialTerminationTime");
      SerializeTypedef_AbsoluteOrRelativeTimeType(tdoParamInitialTerminationTime, **rstStruct.InitialTerminationTime);
    }
    else
    {
      rdoParam.CreateChild("InitialTerminationTime").SetNil();
    }
  }
  if (!(rstStruct.SubscriptionPolicy).IsNull()) // Optional
  {
    staff::DataObject tdoParamSubscriptionPolicy = rdoParam.CreateChild("SubscriptionPolicy");
    tdoParamSubscriptionPolicy << *rstStruct.SubscriptionPolicy;
  }
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Subscribe& rstStruct)
{
  rdoParam.GetChildByLocalName("ConsumerReference") >> rstStruct.ConsumerReference;
  const staff::DataObject& rdoParamFilter = rdoParam.GetChildByLocalNameOpt("Filter");
  if (!rdoParamFilter.IsNull()) // optional
  {
    rdoParamFilter >> *rstStruct.Filter;
  }
  const staff::DataObject& rdoParamInitialTerminationTime = rdoParam.GetChildByLocalNameOpt("InitialTerminationTime");
  if (!rdoParamInitialTerminationTime.IsNull()) // optional
  {
    if (!rdoParamInitialTerminationTime.IsNil()) // Nillable
    {
      DeserializeTypedef_AbsoluteOrRelativeTimeType(rdoParamInitialTerminationTime, **rstStruct.InitialTerminationTime);
    }
    else
    {
      // touch the variable to make it nil instead of null: Optional< Nillable< Data > >
      *rstStruct.InitialTerminationTime;
    }
  }
  const staff::DataObject& rdoParamSubscriptionPolicy = rdoParam.GetChildByLocalNameOpt("SubscriptionPolicy");
  if (!rdoParamSubscriptionPolicy.IsNull()) // optional
  {
    rdoParamSubscriptionPolicy >> *rstStruct.SubscriptionPolicy;
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::SubscribeResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  staff::DataObject tdoParamSubscriptionReference = rdoParam.CreateChild("SubscriptionReference");
  tdoParamSubscriptionReference << rstStruct.SubscriptionReference;
  if (!(rstStruct.CurrentTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("CurrentTime", *rstStruct.CurrentTime);
  }
  if (!(rstStruct.TerminationTime).IsNull()) // Optional
  {
    if (!(*rstStruct.TerminationTime).IsNull()) // Nillable
    {
      rdoParam.CreateChild("TerminationTime", **rstStruct.TerminationTime);
    }
    else
    {
      rdoParam.CreateChild("TerminationTime").SetNil();
    }
  }
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::SubscribeResponse& rstStruct)
{
  rdoParam.GetChildByLocalName("SubscriptionReference") >> rstStruct.SubscriptionReference;
  const staff::DataObject& rdoParamCurrentTime = rdoParam.GetChildByLocalNameOpt("CurrentTime");
  if (!rdoParamCurrentTime.IsNull()) // optional
  {
    rdoParamCurrentTime.GetValue(*rstStruct.CurrentTime);
  }
  const staff::DataObject& rdoParamTerminationTime = rdoParam.GetChildByLocalNameOpt("TerminationTime");
  if (!rdoParamTerminationTime.IsNull()) // optional
  {
    if (!rdoParamTerminationTime.IsNil()) // Nillable
    {
      rdoParamTerminationTime.GetValue(**rstStruct.TerminationTime);
    }
    else
    {
      // touch the variable to make it nil instead of null: Optional< Nillable< Data > >
      *rstStruct.TerminationTime;
    }
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GetCurrentMessage& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  staff::DataObject tdoParamTopic = rdoParam.CreateChild("Topic");
  tdoParamTopic << rstStruct.Topic;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GetCurrentMessage& rstStruct)
{
  rdoParam.GetChildByLocalName("Topic") >> rstStruct.Topic;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GetCurrentMessageResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GetCurrentMessageResponse& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GetMessages& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  if (!(rstStruct.MaximumNumber).IsNull()) // Optional
  {
    rdoParam.CreateChild("MaximumNumber", *rstStruct.MaximumNumber);
  }
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GetMessages& rstStruct)
{
  const staff::DataObject& rdoParamMaximumNumber = rdoParam.GetChildByLocalNameOpt("MaximumNumber");
  if (!rdoParamMaximumNumber.IsNull()) // optional
  {
    rdoParamMaximumNumber.GetValue(*rstStruct.MaximumNumber);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::GetMessagesResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list< ::NotificationMessageHolderType >::const_iterator itItem = (rstStruct.NotificationMessage).begin(), itItemEnd = (rstStruct.NotificationMessage).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("NotificationMessage");
    tdoParamItem << (*itItem);
  }

  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::GetMessagesResponse& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "NotificationMessage")
    {
      (rstStruct.NotificationMessage).resize((rstStruct.NotificationMessage).size() + 1);
      tdoItem >> (rstStruct.NotificationMessage).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DestroyPullPoint& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DestroyPullPoint& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::DestroyPullPointResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::DestroyPullPointResponse& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CreatePullPoint& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CreatePullPoint& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::CreatePullPointResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  staff::DataObject tdoParamPullPoint = rdoParam.CreateChild("PullPoint");
  tdoParamPullPoint << rstStruct.PullPoint;
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::CreatePullPointResponse& rstStruct)
{
  rdoParam.GetChildByLocalName("PullPoint") >> rstStruct.PullPoint;
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Renew& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  if (!(rstStruct.TerminationTime).IsNull()) // Nillable
  {
    staff::DataObject tdoParamTerminationTime = rdoParam.CreateChild("TerminationTime");
    SerializeTypedef_AbsoluteOrRelativeTimeType(tdoParamTerminationTime, *rstStruct.TerminationTime);
  }
  else
  {
    rdoParam.CreateChild("TerminationTime").SetNil();
  }
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Renew& rstStruct)
{
  const staff::DataObject& rdoParamTerminationTime = rdoParam.GetChildByLocalName("TerminationTime");
  if (!rdoParamTerminationTime.IsNil()) // Nillable
  {
    DeserializeTypedef_AbsoluteOrRelativeTimeType(rdoParamTerminationTime, *rstStruct.TerminationTime);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RenewResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  if (!(rstStruct.TerminationTime).IsNull()) // Nillable
  {
    rdoParam.CreateChild("TerminationTime", *rstStruct.TerminationTime);
  }
  else
  {
    rdoParam.CreateChild("TerminationTime").SetNil();
  }
  if (!(rstStruct.CurrentTime).IsNull()) // Optional
  {
    rdoParam.CreateChild("CurrentTime", *rstStruct.CurrentTime);
  }
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RenewResponse& rstStruct)
{
  const staff::DataObject& rdoParamTerminationTime = rdoParam.GetChildByLocalName("TerminationTime");
  if (!rdoParamTerminationTime.IsNil()) // Nillable
  {
    rdoParamTerminationTime.GetValue(*rstStruct.TerminationTime);
  }
  const staff::DataObject& rdoParamCurrentTime = rdoParam.GetChildByLocalNameOpt("CurrentTime");
  if (!rdoParamCurrentTime.IsNull()) // optional
  {
    rdoParamCurrentTime.GetValue(*rstStruct.CurrentTime);
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::Unsubscribe& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Unsubscribe& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::UnsubscribeResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::UnsubscribeResponse& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PauseSubscription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PauseSubscription& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::PauseSubscriptionResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::PauseSubscriptionResponse& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ResumeSubscription& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ResumeSubscription& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ResumeSubscriptionResponse& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ResumeSubscriptionResponse& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

DataObject& SerializeTypedef_AbsoluteOrRelativeTimeType(DataObject& rdoParam, const ::AbsoluteOrRelativeTimeType& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/b-2", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
const DataObject& DeserializeTypedef_AbsoluteOrRelativeTimeType(const DataObject& rdoParam, ::AbsoluteOrRelativeTimeType& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

}


