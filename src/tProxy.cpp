// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include "tProxy.h"

namespace staff
{
///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators/deserializators

DataObject& operator<<(DataObject& rdoParam, const struct ::Documentation& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::Documentation& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const Abstract< ::ExtensibleDocumented >& tpAbstractStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  const std::string& sInstanceType = tpAbstractStruct.GetType();
  if (sInstanceType == "TopicType")
  {
    rdoParam << static_cast< const ::TopicType& >(*tpAbstractStruct);
  }
  else
  if (sInstanceType == "TopicNamespaceType")
  {
    rdoParam << static_cast< const ::TopicNamespaceType& >(*tpAbstractStruct);
  }
  else
  if (sInstanceType == "TopicSetType")
  {
    rdoParam << static_cast< const ::TopicSetType& >(*tpAbstractStruct);
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException, "Can't serialize dynamic type [" + sInstanceType + "]");
  }
  rdoParam.SetInstanceType(sInstanceType);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, Abstract< ::ExtensibleDocumented >& tpAbstractStruct)
{
  const std::string& sInstanceType = rdoParam.GetInstanceType();
  if (sInstanceType == "TopicType")
  {
    tpAbstractStruct = new ::TopicType;
    rdoParam >> static_cast< ::TopicType& >(*tpAbstractStruct);
  }
  else
  if (sInstanceType == "TopicNamespaceType")
  {
    tpAbstractStruct = new ::TopicNamespaceType;
    rdoParam >> static_cast< ::TopicNamespaceType& >(*tpAbstractStruct);
  }
  else
  if (sInstanceType == "TopicSetType")
  {
    tpAbstractStruct = new ::TopicSetType;
    rdoParam >> static_cast< ::TopicSetType& >(*tpAbstractStruct);
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException, "Can't deserialize dynamic type [" + sInstanceType + "]");
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ExtensibleDocumented& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  if (!(rstStruct.documentation).IsNull()) // Optional
  {
    staff::DataObject tdoParamdocumentation = rdoParam.CreateChild("documentation");
    tdoParamdocumentation << *rstStruct.documentation;
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ExtensibleDocumented& rstStruct)
{
  const staff::DataObject& rdoParamdocumentation = rdoParam.GetChildByLocalNameOpt("documentation");
  if (!rdoParamdocumentation.IsNull()) // optional
  {
    rdoParamdocumentation >> *rstStruct.documentation;
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::QueryExpressionType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  if (!(rstStruct.tUnnamed0).IsNull()) // Optional
  {
    rdoParam.AppendChild(*rstStruct.tUnnamed0);
  }
  rdoParam.CreateAttribute("Dialect", rstStruct.Dialect);
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::QueryExpressionType& rstStruct)
{
  if (!rdoParam.IsNull()) // optional
  {
    *rstStruct.tUnnamed0 = rdoParam.FirstChild();
  }
  rdoParam.GetAttributeValueByName("Dialect", rstStruct.Dialect);
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TopicType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ExtensibleDocumented& >(rstStruct);

  if (!(rstStruct.MessagePattern).IsNull()) // Optional
  {
    staff::DataObject tdoParamMessagePattern = rdoParam.CreateChild("MessagePattern");
    tdoParamMessagePattern << *rstStruct.MessagePattern;
  }
  for (std::list< ::TopicType >::const_iterator itItem = (rstStruct.Topic).begin(), itItemEnd = (rstStruct.Topic).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Topic");
    tdoParamItem << (*itItem);
  }

  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  rdoParam.CreateAttribute("name", rstStruct.name);
  if (!(rstStruct.messageTypes).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("messageTypes", *rstStruct.messageTypes);
  }
  if (!(rstStruct.final).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("final", *rstStruct.final);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ExtensibleDocumented& >(rstStruct);

  const staff::DataObject& rdoParamMessagePattern = rdoParam.GetChildByLocalNameOpt("MessagePattern");
  if (!rdoParamMessagePattern.IsNull()) // optional
  {
    rdoParamMessagePattern >> *rstStruct.MessagePattern;
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Topic")
    {
      (rstStruct.Topic).resize((rstStruct.Topic).size() + 1);
      tdoItem >> (rstStruct.Topic).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  rdoParam.GetAttributeValueByName("name", rstStruct.name);
  const staff::Attribute& rAttrmessageTypes = rdoParam.GetAttributeByLocalNameOpt("messageTypes");
  if (!rAttrmessageTypes.IsNull()) // optional attribute
  {
    rAttrmessageTypes.GetValue(*rstStruct.messageTypes);
  }
  const staff::Attribute& rAttrfinal = rdoParam.GetAttributeByLocalNameOpt("final");
  if (!rAttrfinal.IsNull()) // optional attribute
  {
    rAttrfinal.GetValue(*rstStruct.final);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TopicNamespaceType::Topic& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct TopicType& >(rstStruct);

  if (!(rstStruct.parent).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("parent", *rstStruct.parent);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicNamespaceType::Topic& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct TopicType& >(rstStruct);

  const staff::Attribute& rAttrparent = rdoParam.GetAttributeByLocalNameOpt("parent");
  if (!rAttrparent.IsNull()) // optional attribute
  {
    rAttrparent.GetValue(*rstStruct.parent);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TopicNamespaceType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ExtensibleDocumented& >(rstStruct);

  for (std::list<struct ::TopicNamespaceType::Topic>::const_iterator itItem = (rstStruct.Topic).begin(), itItemEnd = (rstStruct.Topic).end();
       itItem != itItemEnd; ++itItem)
  {
    staff::DataObject tdoParamItem = rdoParam.CreateChild("Topic");
    tdoParamItem << (*itItem);
  }

  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  if (!(rstStruct.name).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("name", *rstStruct.name);
  }
  rdoParam.CreateAttribute("targetNamespace", rstStruct.targetNamespace);
  if (!(rstStruct.final).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("final", *rstStruct.final);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicNamespaceType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ExtensibleDocumented& >(rstStruct);

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "Topic")
    {
      (rstStruct.Topic).resize((rstStruct.Topic).size() + 1);
      tdoItem >> (rstStruct.Topic).back();
    }
  }

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  const staff::Attribute& rAttrname = rdoParam.GetAttributeByLocalNameOpt("name");
  if (!rAttrname.IsNull()) // optional attribute
  {
    rAttrname.GetValue(*rstStruct.name);
  }
  rdoParam.GetAttributeValueByName("targetNamespace", rstStruct.targetNamespace);
  const staff::Attribute& rAttrfinal = rdoParam.GetAttributeByLocalNameOpt("final");
  if (!rAttrfinal.IsNull()) // optional attribute
  {
    rAttrfinal.GetValue(*rstStruct.final);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::TopicSetType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  // serialize parent struct
  rdoParam << static_cast< const struct ::ExtensibleDocumented& >(rstStruct);

  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::TopicSetType& rstStruct)
{
  // deserialize parent struct
  rdoParam >> static_cast< struct ::ExtensibleDocumented& >(rstStruct);

  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  return rdoParam;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

DataObject& SerializeTypedef_FullTopicExpression(DataObject& rdoParam, const ::FullTopicExpression& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


DataObject& SerializeTypedef_ConcreteTopicExpression(DataObject& rdoParam, const ::ConcreteTopicExpression& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


DataObject& SerializeTypedef_SimpleTopicExpression(DataObject& rdoParam, const ::SimpleTopicExpression& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://docs.oasis-open.org/wsn/t-1", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
const DataObject& DeserializeTypedef_FullTopicExpression(const DataObject& rdoParam, ::FullTopicExpression& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_ConcreteTopicExpression(const DataObject& rdoParam, ::ConcreteTopicExpression& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_SimpleTopicExpression(const DataObject& rdoParam, ::SimpleTopicExpression& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

}


