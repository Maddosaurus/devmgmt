// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/

#ifndef _devicemgmt_h_
#define _devicemgmt_h_

#include <list>
#include <string>
#include <staff/common/WsdlTypes.h>
#include <staff/common/Optional.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include "onvif.h"

// *interface.elementFormDefault: qualified
// *interface.targetNamespace: http://www.onvif.org/ver10/device/wsdl
// *interface.version: 2.3

  struct Service;
  struct DeviceServiceCapabilities;
  struct MiscCapabilities;
  struct GetServices;
  struct GetServicesResponse;
  struct GetServiceCapabilities;
  struct GetServiceCapabilitiesResponse;
  struct GetDeviceInformation;
  struct GetDeviceInformationResponse;
  struct SetSystemDateAndTime;
  struct SetSystemDateAndTimeResponse;
  struct GetSystemDateAndTime;
  struct GetSystemDateAndTimeResponse;
  struct SetSystemFactoryDefault;
  struct SetSystemFactoryDefaultResponse;
  struct UpgradeSystemFirmware;
  struct UpgradeSystemFirmwareResponse;
  struct SystemReboot;
  struct SystemRebootResponse;
  struct RestoreSystem;
  struct RestoreSystemResponse;
  struct GetSystemBackup;
  struct GetSystemBackupResponse;
  struct GetSystemSupportInformation;
  struct GetSystemSupportInformationResponse;
  struct GetSystemLog;
  struct GetSystemLogResponse;
  struct GetScopes;
  struct GetScopesResponse;
  struct SetScopes;
  struct SetScopesResponse;
  struct AddScopes;
  struct AddScopesResponse;
  struct RemoveScopes;
  struct RemoveScopesResponse;
  struct GetDiscoveryMode;
  struct GetDiscoveryModeResponse;
  struct SetDiscoveryMode;
  struct SetDiscoveryModeResponse;
  struct GetRemoteDiscoveryMode;
  struct GetRemoteDiscoveryModeResponse;
  struct SetRemoteDiscoveryMode;
  struct SetRemoteDiscoveryModeResponse;
  struct GetDPAddresses;
  struct GetDPAddressesResponse;
  struct SetDPAddresses;
  struct SetDPAddressesResponse;
  struct GetEndpointReference;
  struct GetEndpointReferenceResponse;
  struct GetRemoteUser;
  struct GetRemoteUserResponse;
  struct SetRemoteUser;
  struct SetRemoteUserResponse;
  struct GetUsers;
  struct GetUsersResponse;
  struct CreateUsers;
  struct CreateUsersResponse;
  struct DeleteUsers;
  struct DeleteUsersResponse;
  struct SetUser;
  struct SetUserResponse;
  struct GetWsdlUrl;
  struct GetWsdlUrlResponse;
  struct GetCapabilities;
  struct GetCapabilitiesResponse;
  struct GetHostname;
  struct GetHostnameResponse;
  struct SetHostname;
  struct SetHostnameResponse;
  struct SetHostnameFromDHCP;
  struct SetHostnameFromDHCPResponse;
  struct GetDNS;
  struct GetDNSResponse;
  struct SetDNS;
  struct SetDNSResponse;
  struct GetNTP;
  struct GetNTPResponse;
  struct SetNTP;
  struct SetNTPResponse;
  struct GetDynamicDNS;
  struct GetDynamicDNSResponse;
  struct SetDynamicDNS;
  struct SetDynamicDNSResponse;
  struct GetNetworkInterfaces;
  struct GetNetworkInterfacesResponse;
  struct SetNetworkInterfaces;
  struct SetNetworkInterfacesResponse;
  struct GetNetworkProtocols;
  struct GetNetworkProtocolsResponse;
  struct SetNetworkProtocols;
  struct SetNetworkProtocolsResponse;
  struct GetNetworkDefaultGateway;
  struct GetNetworkDefaultGatewayResponse;
  struct SetNetworkDefaultGateway;
  struct SetNetworkDefaultGatewayResponse;
  struct GetZeroConfiguration;
  struct GetZeroConfigurationResponse;
  struct SetZeroConfiguration;
  struct SetZeroConfigurationResponse;
  struct GetIPAddressFilter;
  struct GetIPAddressFilterResponse;
  struct SetIPAddressFilter;
  struct SetIPAddressFilterResponse;
  struct AddIPAddressFilter;
  struct AddIPAddressFilterResponse;
  struct RemoveIPAddressFilter;
  struct RemoveIPAddressFilterResponse;
  struct GetAccessPolicy;
  struct GetAccessPolicyResponse;
  struct SetAccessPolicy;
  struct SetAccessPolicyResponse;
  struct CreateCertificate;
  struct CreateCertificateResponse;
  struct GetCertificates;
  struct GetCertificatesResponse;
  struct GetCertificatesStatus;
  struct GetCertificatesStatusResponse;
  struct SetCertificatesStatus;
  struct SetCertificatesStatusResponse;
  struct DeleteCertificates;
  struct DeleteCertificatesResponse;
  struct GetPkcs10Request;
  struct GetPkcs10RequestResponse;
  struct LoadCertificates;
  struct LoadCertificatesResponse;
  struct GetClientCertificateMode;
  struct GetClientCertificateModeResponse;
  struct SetClientCertificateMode;
  struct SetClientCertificateModeResponse;
  struct GetCACertificates;
  struct GetCACertificatesResponse;
  struct LoadCertificateWithPrivateKey;
  struct LoadCertificateWithPrivateKeyResponse;
  struct GetCertificateInformation;
  struct GetCertificateInformationResponse;
  struct LoadCACertificates;
  struct LoadCACertificatesResponse;
  struct CreateDot1XConfiguration;
  struct CreateDot1XConfigurationResponse;
  struct SetDot1XConfiguration;
  struct SetDot1XConfigurationResponse;
  struct GetDot1XConfiguration;
  struct GetDot1XConfigurationResponse;
  struct GetDot1XConfigurations;
  struct GetDot1XConfigurationsResponse;
  struct DeleteDot1XConfiguration;
  struct DeleteDot1XConfigurationResponse;
  struct GetRelayOutputs;
  struct GetRelayOutputsResponse;
  struct SetRelayOutputSettings;
  struct SetRelayOutputSettingsResponse;
  struct SetRelayOutputState;
  struct SetRelayOutputStateResponse;
  struct SendAuxiliaryCommand;
  struct SendAuxiliaryCommandResponse;
  struct GetDot11Capabilities;
  struct GetDot11CapabilitiesResponse;
  struct GetDot11Status;
  struct GetDot11StatusResponse;
  struct ScanAvailableDot11Networks;
  struct ScanAvailableDot11NetworksResponse;
  struct GetSystemUris;
  struct GetSystemUrisResponse;
  struct StartFirmwareUpgrade;
  struct StartFirmwareUpgradeResponse;
  struct StartSystemRestore;
  struct StartSystemRestoreResponse;


  // *restriction-list: xs:int
  typedef std::string EAPMethodTypes;

  struct Service
  {
    staff::anyURI Namespace;  //!< Namespace of the service being described.
    staff::anyURI XAddr;  //!< The transport addresses where the service can be reached.
    staff::Optional< ::Capabilities > Capabilities;
    ::OnvifVersion Version;  //!< The version of the service (not the ONVIF core spec version).
    // *useParentElement: true
    std::list<staff::DataObject> tUnnamed0;
    staff::anyAttribute lsAnyAttributes;
  };

  struct DeviceServiceCapabilities
  {
    ::NetworkCapabilities Network;  //!< Network capabilities.
    ::SecurityCapabilities Security;  //!< Security capabilities.
    ::SystemCapabilities System;  //!< System capabilities.
    staff::Optional< ::MiscCapabilities > Misc;  //!< Capabilities that do not fit in any of the other categories.
  };

  struct MiscCapabilities
  {
    staff::anyAttribute lsAnyAttributes;
    // *isAttribute: true
    staff::Optional< ::StringAttrList > AuxiliaryCommands;  //!< Lists of commands supported by SendAuxiliaryCommand.
  };

  struct GetServices
  {
    bool IncludeCapability;  //!< Indicates if the service capabilities (untyped) should be included in the response.
  };

  struct GetServicesResponse
  {
    // *useParentElement: true
    std::list< ::Service > Service;  //!< Each Service element contains information about one service.
  };

  struct GetServiceCapabilities
  {
  };

  struct GetServiceCapabilitiesResponse
  {
    ::DeviceServiceCapabilities Capabilities;  //!< The capabilities for the device service is returned in the Capabilities element.
  };

  struct GetDeviceInformation
  {
  };

  struct GetDeviceInformationResponse
  {
    std::string Manufacturer;  //!< The manufactor of the device.
    std::string Model;  //!< The device model.
    std::string FirmwareVersion;  //!< The firmware version in the device.
    std::string SerialNumber;  //!< The serial number of the device.
    std::string HardwareId;  //!< The hardware ID of the device.
  };

  struct SetSystemDateAndTime
  {
    ::SetDateTimeType DateTimeType;  //!< Defines if the date and time is set via NTP or manually.
    bool DaylightSavings;  //!< Automatically adjust Daylight savings if defined in TimeZone.
    staff::Optional< ::TimeZone > TimeZone;  //!< The time zone in POSIX 1003.1 format
    staff::Optional< ::DateTime > UTCDateTime;  //!< Date and time in UTC.
  };

  struct SetSystemDateAndTimeResponse
  {
  };

  struct GetSystemDateAndTime
  {
  };

  struct GetSystemDateAndTimeResponse
  {
    ::SystemDateTime SystemDateAndTime;  //!< Contains information whether system date and time are set manually or by NTP, daylight savings is on or off, time zone in POSIX 1003.1 format and system date and time in UTC and also local system date and time.
  };

  struct SetSystemFactoryDefault
  {
    ::FactoryDefaultType FactoryDefault;  //!< Specifies the factory default action type.
  };

  struct SetSystemFactoryDefaultResponse
  {
  };

  struct UpgradeSystemFirmware
  {
    ::AttachmentData Firmware;
  };

  struct UpgradeSystemFirmwareResponse
  {
    staff::Optional<std::string> Message;
  };

  struct SystemReboot
  {
  };

  struct SystemRebootResponse
  {
    std::string Message;  //!< Contains the reboot message sent by the device.
  };

  struct RestoreSystem
  {
    // *useParentElement: true
    std::list< ::BackupFile > BackupFiles;
  };

  struct RestoreSystemResponse
  {
  };

  struct GetSystemBackup
  {
  };

  struct GetSystemBackupResponse
  {
    // *useParentElement: true
    std::list< ::BackupFile > BackupFiles;
  };

  struct GetSystemSupportInformation
  {
  };

  struct GetSystemSupportInformationResponse
  {
    ::SupportInformation SupportInformation;  //!< Contains the arbitary device diagnostics information.
  };

  struct GetSystemLog
  {
    ::SystemLogType LogType;  //!< Specifies the type of system log to get.
  };

  struct GetSystemLogResponse
  {
    ::SystemLog SystemLog;  //!< Contains the system log information.
  };

  struct GetScopes
  {
  };

  struct GetScopesResponse
  {
    // *useParentElement: true
    std::list< ::Scope > Scopes;  //!< Contains a list of URI definining the device scopes.
  };

  struct SetScopes
  {
    // *useParentElement: true
    std::list<staff::anyURI> Scopes;  //!< Contains a list of scope parameters that will replace all existing configurable scope parameters.
  };

  struct SetScopesResponse
  {
  };

  struct AddScopes
  {
    // *useParentElement: true
    std::list<staff::anyURI> ScopeItem;  //!< Contains a list of new configurable scope parameters that will be added to the existing configurable scope.
  };

  struct AddScopesResponse
  {
  };

  struct RemoveScopes
  {
    // *useParentElement: true
    std::list<staff::anyURI> ScopeItem;  //!< Contains a list of URIs that should be removed from the device scope.
  };

  struct RemoveScopesResponse
  {
    // *useParentElement: true
    std::list<staff::anyURI> ScopeItem;  //!< Contains a list of URIs that has been removed from the device scope
  };

  struct GetDiscoveryMode
  {
  };

  struct GetDiscoveryModeResponse
  {
    ::DiscoveryMode DiscoveryMode;  //!< Indicator of discovery mode: Discoverable, NonDiscoverable.
  };

  struct SetDiscoveryMode
  {
    ::DiscoveryMode DiscoveryMode;  //!< Indicator of discovery mode: Discoverable, NonDiscoverable.
  };

  struct SetDiscoveryModeResponse
  {
  };

  struct GetRemoteDiscoveryMode
  {
  };

  struct GetRemoteDiscoveryModeResponse
  {
    ::DiscoveryMode RemoteDiscoveryMode;  //!< Indicator of discovery mode: Discoverable, NonDiscoverable.
  };

  struct SetRemoteDiscoveryMode
  {
    ::DiscoveryMode RemoteDiscoveryMode;  //!< Indicator of discovery mode: Discoverable, NonDiscoverable.
  };

  struct SetRemoteDiscoveryModeResponse
  {
  };

  struct GetDPAddresses
  {
  };

  struct GetDPAddressesResponse
  {
    // *useParentElement: true
    std::list< ::NetworkHost > DPAddress;
  };

  struct SetDPAddresses
  {
    // *useParentElement: true
    std::list< ::NetworkHost > DPAddress;
  };

  struct SetDPAddressesResponse
  {
  };

  struct GetEndpointReference
  {
  };

  struct GetEndpointReferenceResponse
  {
    std::string GUID;
    // *useParentElement: true
    std::list<staff::DataObject> tUnnamed0;
  };

  struct GetRemoteUser
  {
  };

  struct GetRemoteUserResponse
  {
    staff::Optional< ::RemoteUser > RemoteUser;
  };

  struct SetRemoteUser
  {
    staff::Optional< ::RemoteUser > RemoteUser;
  };

  struct SetRemoteUserResponse
  {
  };

  struct GetUsers
  {
  };

  struct GetUsersResponse
  {
    // *useParentElement: true
    std::list< ::User > User;  //!< Contains a list of the onvif users and following information is included in each entry: username and user level.
  };

  struct CreateUsers
  {
    // *useParentElement: true
    std::list< ::User > User;  //!< Creates new device users and corresponding credentials.
  };

  struct CreateUsersResponse
  {
  };

  struct DeleteUsers
  {
    // *useParentElement: true
    std::list<std::string> Username;  //!< Deletes users on an device and there may exist users that cannot be deleted to ensure access to the unit.
  };

  struct DeleteUsersResponse
  {
  };

  struct SetUser
  {
    // *useParentElement: true
    std::list< ::User > User;  //!< Updates the credentials for one or several users on an device.
  };

  struct SetUserResponse
  {
  };

  struct GetWsdlUrl
  {
  };

  struct GetWsdlUrlResponse
  {
    staff::anyURI WsdlUrl;
  };

  struct GetCapabilities
  {
    // *useParentElement: true
    std::list< ::CapabilityCategory > Category;  //!< List of categories to retrieve capability information on.
  };

  struct GetCapabilitiesResponse
  {
    ::Capabilities Capabilities;  //!< Capability information.
  };

  struct GetHostname
  {
  };

  struct GetHostnameResponse
  {
    ::HostnameInformation HostnameInformation;  //!< Contains the hostname information.
  };

  struct SetHostname
  {
    staff::token Name;  //!< The hostname to set.
  };

  struct SetHostnameResponse
  {
  };

  struct SetHostnameFromDHCP
  {
    bool FromDHCP;  //!< True if the hostname shall be obtained via DHCP.
  };

  struct SetHostnameFromDHCPResponse
  {
    bool RebootNeeded;  //!< Indicates whether or not a reboot is required after configuration updates.
  };

  struct GetDNS
  {
  };

  struct GetDNSResponse
  {
    ::DNSInformation DNSInformation;  //!< DNS information.
  };

  struct SetDNS
  {
    bool FromDHCP;  //!< Indicate if the DNS address is to be retrieved using DHCP.
    // *useParentElement: true
    std::list<staff::token> SearchDomain;  //!< DNS search domain.
    // *useParentElement: true
    std::list< ::IPAddress > DNSManual;  //!< DNS address(es) set manually.
  };

  struct SetDNSResponse
  {
  };

  struct GetNTP
  {
  };

  struct GetNTPResponse
  {
    ::NTPInformation NTPInformation;  //!< NTP information.
  };

  struct SetNTP
  {
    bool FromDHCP;  //!< Indicate if NTP address information is to be retrieved using DHCP.
    // *useParentElement: true
    std::list< ::NetworkHost > NTPManual;  //!< Manual NTP settings.
  };

  struct SetNTPResponse
  {
  };

  struct GetDynamicDNS
  {
  };

  struct GetDynamicDNSResponse
  {
    ::DynamicDNSInformation DynamicDNSInformation;  //!< Dynamic DNS information.
  };

  struct SetDynamicDNS
  {
    ::DynamicDNSType Type;  //!< Dynamic DNS type.
    staff::Optional< ::DNSName > Name;  //!< DNS name.
    staff::Optional<staff::duration> TTL;  //!< DNS record time to live.
  };

  struct SetDynamicDNSResponse
  {
  };

  struct GetNetworkInterfaces
  {
  };

  struct GetNetworkInterfacesResponse
  {
    // *useParentElement: true
    std::list< ::NetworkInterface > NetworkInterfaces;  //!< List of network interfaces.
  };

  struct SetNetworkInterfaces
  {
    ::ReferenceToken InterfaceToken;  //!< Symbolic network interface name.
    ::NetworkInterfaceSetConfiguration NetworkInterface;  //!< Network interface name.
  };

  struct SetNetworkInterfacesResponse
  {
    bool RebootNeeded;  //!< Indicates whether or not a reboot is required after configuration updates.
  };

  struct GetNetworkProtocols
  {
  };

  struct GetNetworkProtocolsResponse
  {
    // *useParentElement: true
    std::list< ::NetworkProtocol > NetworkProtocols;  //!< Contains an array of defined protocols supported by the device.
  };

  struct SetNetworkProtocols
  {
    // *useParentElement: true
    std::list< ::NetworkProtocol > NetworkProtocols;  //!< Configures one or more defined network protocols supported by the device.
  };

  struct SetNetworkProtocolsResponse
  {
  };

  struct GetNetworkDefaultGateway
  {
  };

  struct GetNetworkDefaultGatewayResponse
  {
    ::NetworkGateway NetworkGateway;  //!< Gets the default IPv4 and IPv6 gateway settings from the device.
  };

  struct SetNetworkDefaultGateway
  {
    // *useParentElement: true
    std::list< ::IPv4Address > IPv4Address;  //!< Sets IPv4 gateway address used as default setting.
    // *useParentElement: true
    std::list< ::IPv6Address > IPv6Address;  //!< Sets IPv6 gateway address used as default setting.
  };

  struct SetNetworkDefaultGatewayResponse
  {
  };

  struct GetZeroConfiguration
  {
  };

  struct GetZeroConfigurationResponse
  {
    ::NetworkZeroConfiguration ZeroConfiguration;  //!< Contains the zero-configuration.
  };

  struct SetZeroConfiguration
  {
    ::ReferenceToken InterfaceToken;  //!< Unique identifier referencing the physical interface.
    bool Enabled;  //!< Specifies if the zero-configuration should be enabled or not.
  };

  struct SetZeroConfigurationResponse
  {
  };

  struct GetIPAddressFilter
  {
  };

  struct GetIPAddressFilterResponse
  {
    ::IPAddressFilter IPAddressFilter;
  };

  struct SetIPAddressFilter
  {
    ::IPAddressFilter IPAddressFilter;
  };

  struct SetIPAddressFilterResponse
  {
  };

  struct AddIPAddressFilter
  {
    ::IPAddressFilter IPAddressFilter;
  };

  struct AddIPAddressFilterResponse
  {
  };

  struct RemoveIPAddressFilter
  {
    ::IPAddressFilter IPAddressFilter;
  };

  struct RemoveIPAddressFilterResponse
  {
  };

  struct GetAccessPolicy
  {
  };

  struct GetAccessPolicyResponse
  {
    ::BinaryData PolicyFile;
  };

  struct SetAccessPolicy
  {
    ::BinaryData PolicyFile;
  };

  struct SetAccessPolicyResponse
  {
  };

  struct CreateCertificate
  {
    staff::Optional<staff::token> CertificateID;  //!< Certificate id.
    staff::Optional<std::string> Subject;  //!< Identification of the entity associated with the public-key.
    staff::Optional<staff::dateTime> ValidNotBefore;  //!< Certificate validity start date.
    staff::Optional<staff::dateTime> ValidNotAfter;  //!< Certificate expiry start date.
  };

  struct CreateCertificateResponse
  {
    ::Certificate NvtCertificate;  //!< base64 encoded DER representation of certificate.
  };

  struct GetCertificates
  {
  };

  struct GetCertificatesResponse
  {
    // *useParentElement: true
    std::list< ::Certificate > NvtCertificate;  //!< Id and base64 encoded DER representation of all available certificates.
  };

  struct GetCertificatesStatus
  {
  };

  struct GetCertificatesStatusResponse
  {
    // *useParentElement: true
    std::list< ::CertificateStatus > CertificateStatus;  //!< Indicates if a certificate is used in an optional HTTPS configuration of the device.
  };

  struct SetCertificatesStatus
  {
    // *useParentElement: true
    std::list< ::CertificateStatus > CertificateStatus;  //!< Indicates if a certificate is to be used in an optional HTTPS configuration of the device.
  };

  struct SetCertificatesStatusResponse
  {
  };

  struct DeleteCertificates
  {
    // *useParentElement: true
    std::list<staff::token> CertificateID;  //!< List of ids of certificates to delete.
  };

  struct DeleteCertificatesResponse
  {
  };

  struct GetPkcs10Request
  {
    staff::token CertificateID;  //!< List of ids of certificates to delete.
    staff::Optional<std::string> Subject;  //!< Relative Dinstinguished Name(RDN) CommonName(CN).
    staff::Optional< ::BinaryData > Attributes;  //!< Optional base64 encoded DER attributes.
  };

  struct GetPkcs10RequestResponse
  {
    ::BinaryData Pkcs10Request;  //!< base64 encoded DER representation of certificate.
  };

  struct LoadCertificates
  {
    // *useParentElement: true
    std::list< ::Certificate > NVTCertificate;  //!< Optional id and base64 encoded DER representation of certificate.
  };

  struct LoadCertificatesResponse
  {
  };

  struct GetClientCertificateMode
  {
  };

  struct GetClientCertificateModeResponse
  {
    bool Enabled;  //!< Indicates whether or not client certificates are required by device.
  };

  struct SetClientCertificateMode
  {
    bool Enabled;  //!< Indicates whether or not client certificates are required by device.
  };

  struct SetClientCertificateModeResponse
  {
  };

  struct GetCACertificates
  {
  };

  struct GetCACertificatesResponse
  {
    // *useParentElement: true
    std::list< ::Certificate > CACertificate;
  };

  struct LoadCertificateWithPrivateKey
  {
    // *useParentElement: true
    std::list< ::CertificateWithPrivateKey > CertificateWithPrivateKey;
  };

  struct LoadCertificateWithPrivateKeyResponse
  {
  };

  struct GetCertificateInformation
  {
    staff::token CertificateID;
  };

  struct GetCertificateInformationResponse
  {
    ::CertificateInformation CertificateInformation;
  };

  struct LoadCACertificates
  {
    // *useParentElement: true
    std::list< ::Certificate > CACertificate;
  };

  struct LoadCACertificatesResponse
  {
  };

  struct CreateDot1XConfiguration
  {
    ::Dot1XConfiguration Dot1XConfiguration;
  };

  struct CreateDot1XConfigurationResponse
  {
  };

  struct SetDot1XConfiguration
  {
    ::Dot1XConfiguration Dot1XConfiguration;
  };

  struct SetDot1XConfigurationResponse
  {
  };

  struct GetDot1XConfiguration
  {
    ::ReferenceToken Dot1XConfigurationToken;
  };

  struct GetDot1XConfigurationResponse
  {
    ::Dot1XConfiguration Dot1XConfiguration;
  };

  struct GetDot1XConfigurations
  {
  };

  struct GetDot1XConfigurationsResponse
  {
    // *useParentElement: true
    std::list< ::Dot1XConfiguration > Dot1XConfiguration;
  };

  struct DeleteDot1XConfiguration
  {
    // *useParentElement: true
    std::list< ::ReferenceToken > Dot1XConfigurationToken;
  };

  struct DeleteDot1XConfigurationResponse
  {
  };

  struct GetRelayOutputs
  {
  };

  struct GetRelayOutputsResponse
  {
    // *useParentElement: true
    std::list< ::RelayOutput > RelayOutputs;
  };

  struct SetRelayOutputSettings
  {
    ::ReferenceToken RelayOutputToken;
    ::RelayOutputSettings Properties;
  };

  struct SetRelayOutputSettingsResponse
  {
  };

  struct SetRelayOutputState
  {
    ::ReferenceToken RelayOutputToken;
    ::RelayLogicalState LogicalState;
  };

  struct SetRelayOutputStateResponse
  {
  };

  struct SendAuxiliaryCommand
  {
    ::AuxiliaryData AuxiliaryCommand;
  };

  struct SendAuxiliaryCommandResponse
  {
    staff::Optional< ::AuxiliaryData > AuxiliaryCommandResponse;
  };

  struct GetDot11Capabilities
  {
    // *useParentElement: true
    std::list<staff::DataObject> tUnnamed0;
  };

  struct GetDot11CapabilitiesResponse
  {
    ::Dot11Capabilities Capabilities;
  };

  struct GetDot11Status
  {
    ::ReferenceToken InterfaceToken;
  };

  struct GetDot11StatusResponse
  {
    ::Dot11Status Status;
  };

  struct ScanAvailableDot11Networks
  {
    ::ReferenceToken InterfaceToken;
  };

  struct ScanAvailableDot11NetworksResponse
  {
    // *useParentElement: true
    std::list< ::Dot11AvailableNetworks > Networks;
  };

  struct GetSystemUris
  {
  };

  struct GetSystemUrisResponse
  {
    struct Extension
    {
      // *useParentElement: true
      std::list<staff::DataObject> tUnnamed0;
    };

    staff::Optional< ::SystemLogUriList > SystemLogUris;
    staff::Optional<staff::anyURI> SupportInfoUri;
    staff::Optional<staff::anyURI> SystemBackupUri;
    staff::Optional<struct ::GetSystemUrisResponse::Extension> Extension;
  };

  struct StartFirmwareUpgrade
  {
  };

  struct StartFirmwareUpgradeResponse
  {
    staff::anyURI UploadUri;
    staff::duration UploadDelay;
    staff::duration ExpectedDownTime;
  };

  struct StartSystemRestore
  {
  };

  struct StartSystemRestoreResponse
  {
    staff::anyURI UploadUri;
    staff::duration ExpectedDownTime;
  };


#endif // _devicemgmt_h_

