// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/DataObject.h>
#include <staff/common/Attribute.h>
#include "ws_addrProxy.h"

namespace staff
{
///////////////////////////////////////////////////////////////////////////////////////////////////////
// enums

std::string& operator<<(std::string& sResult, const ::RelationshipType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::http___www_w3_org_2005_08_addressing_reply:
    sResult = "http://www.w3.org/2005/08/addressing/reply";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::RelationshipType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::RelationshipType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::RelationshipType& reEnumValue)
{
  if (sParam == "http://www.w3.org/2005/08/addressing/reply")
  {
    reEnumValue = ::http___www_w3_org_2005_08_addressing_reply;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::RelationshipType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::RelationshipType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

std::string& operator<<(std::string& sResult, const ::FaultCodesType eEnumValue)
{
  switch (eEnumValue)
  {
  case ::tns_InvalidAddressingHeader:
    sResult = "tns:InvalidAddressingHeader";
    break;
  case ::tns_InvalidAddress:
    sResult = "tns:InvalidAddress";
    break;
  case ::tns_InvalidEPR:
    sResult = "tns:InvalidEPR";
    break;
  case ::tns_InvalidCardinality:
    sResult = "tns:InvalidCardinality";
    break;
  case ::tns_MissingAddressInEPR:
    sResult = "tns:MissingAddressInEPR";
    break;
  case ::tns_DuplicateMessageID:
    sResult = "tns:DuplicateMessageID";
    break;
  case ::tns_ActionMismatch:
    sResult = "tns:ActionMismatch";
    break;
  case ::tns_MessageAddressingHeaderRequired:
    sResult = "tns:MessageAddressingHeaderRequired";
    break;
  case ::tns_DestinationUnreachable:
    sResult = "tns:DestinationUnreachable";
    break;
  case ::tns_ActionNotSupported:
    sResult = "tns:ActionNotSupported";
    break;
  case ::tns_EndpointUnavailable:
    sResult = "tns:EndpointUnavailable";
    break;
  default:
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while serializing enum [::FaultCodesType]: " + rise::ToStr(eEnumValue));
  };
  return sResult;
}

DataObject& operator<<(DataObject& rdoParam, const ::FaultCodesType eEnumValue)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  std::string sParam;
  rdoParam.SetText(sParam << eEnumValue);
  return rdoParam;
}

const std::string& operator>>(const std::string& sParam, ::FaultCodesType& reEnumValue)
{
  if (sParam == "tns:InvalidAddressingHeader")
  {
    reEnumValue = ::tns_InvalidAddressingHeader;
  }
  else
  if (sParam == "tns:InvalidAddress")
  {
    reEnumValue = ::tns_InvalidAddress;
  }
  else
  if (sParam == "tns:InvalidEPR")
  {
    reEnumValue = ::tns_InvalidEPR;
  }
  else
  if (sParam == "tns:InvalidCardinality")
  {
    reEnumValue = ::tns_InvalidCardinality;
  }
  else
  if (sParam == "tns:MissingAddressInEPR")
  {
    reEnumValue = ::tns_MissingAddressInEPR;
  }
  else
  if (sParam == "tns:DuplicateMessageID")
  {
    reEnumValue = ::tns_DuplicateMessageID;
  }
  else
  if (sParam == "tns:ActionMismatch")
  {
    reEnumValue = ::tns_ActionMismatch;
  }
  else
  if (sParam == "tns:MessageAddressingHeaderRequired")
  {
    reEnumValue = ::tns_MessageAddressingHeaderRequired;
  }
  else
  if (sParam == "tns:DestinationUnreachable")
  {
    reEnumValue = ::tns_DestinationUnreachable;
  }
  else
  if (sParam == "tns:ActionNotSupported")
  {
    reEnumValue = ::tns_ActionNotSupported;
  }
  else
  if (sParam == "tns:EndpointUnavailable")
  {
    reEnumValue = ::tns_EndpointUnavailable;
  }
  else
  {
    RISE_THROWS(rise::CLogicNoItemException,
       "Value out of range while deserializing enum [::FaultCodesType]: [" + sParam + "]");
  }
  return sParam;
}

const DataObject& operator>>(const DataObject& rdoParam, ::FaultCodesType& reEnumValue)
{
  rdoParam.GetText() >> reEnumValue;
  return rdoParam;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// struct serializators/deserializators

DataObject& operator<<(DataObject& rdoParam, const struct ::EndpointReferenceType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  staff::DataObject tdoParamAddress = rdoParam.CreateChild("Address");
  SerializeTypedef_AttributedURIType(tdoParamAddress, rstStruct.Address);
  if (!(rstStruct.ReferenceParameters).IsNull()) // Optional
  {
    staff::DataObject tdoParamReferenceParameters = rdoParam.CreateChild("ReferenceParameters");
    tdoParamReferenceParameters << *rstStruct.ReferenceParameters;
  }
  if (!(rstStruct.Metadata).IsNull()) // Optional
  {
    staff::DataObject tdoParamMetadata = rdoParam.CreateChild("Metadata");
    tdoParamMetadata << *rstStruct.Metadata;
  }
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::EndpointReferenceType& rstStruct)
{
  DeserializeTypedef_AttributedURIType(rdoParam.GetChildByLocalName("Address"), rstStruct.Address);
  const staff::DataObject& rdoParamReferenceParameters = rdoParam.GetChildByLocalNameOpt("ReferenceParameters");
  if (!rdoParamReferenceParameters.IsNull()) // optional
  {
    rdoParamReferenceParameters >> *rstStruct.ReferenceParameters;
  }
  const staff::DataObject& rdoParamMetadata = rdoParam.GetChildByLocalNameOpt("Metadata");
  if (!rdoParamMetadata.IsNull()) // optional
  {
    rdoParamMetadata >> *rstStruct.Metadata;
  }
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ReferenceParametersType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ReferenceParametersType& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::MetadataType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  for (std::list<staff::DataObject>::const_iterator itItem = (rstStruct.tUnnamed0).begin(), itItemEnd = (rstStruct.tUnnamed0).end();
       itItem != itItemEnd; ++itItem)
  {
    rdoParam.CreateChild("tUnnamed0").AppendChild((*itItem));
  }

  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::MetadataType& rstStruct)
{
  for (staff::DataObject tdoItem = rdoParam.FirstChild(); !tdoItem.IsNull(); tdoItem.SetNextSibling())
  {
    if (tdoItem.GetLocalName() == "tUnnamed0")
    {
      (rstStruct.tUnnamed0).push_back(tdoItem.FirstChild());
    }
  }

  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::RelatesToType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  rdoParam.SetValue(rstStruct.tParent);
  if (!(rstStruct.RelationshipType).IsNull()) // Optional
  {
    rdoParam.CreateAttribute("RelationshipType", *rstStruct.RelationshipType);
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::RelatesToType& rstStruct)
{
  rdoParam.GetValue(rstStruct.tParent);
  const staff::Attribute& rAttrRelationshipType = rdoParam.GetAttributeByLocalNameOpt("RelationshipType");
  if (!rAttrRelationshipType.IsNull()) // optional attribute
  {
    rAttrRelationshipType.GetValue(*rstStruct.RelationshipType);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::AttributedAnyType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  rdoParam.AppendChild(rstStruct.tUnnamed0);
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::AttributedAnyType& rstStruct)
{
  rstStruct.tUnnamed0 = rdoParam.FirstChild();
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

DataObject& operator<<(DataObject& rdoParam, const struct ::ProblemActionType& rstStruct)
{
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  if (!(rstStruct.Action).IsNull()) // Optional
  {
    staff::DataObject tdoParamAction = rdoParam.CreateChild("Action");
    SerializeTypedef_AttributedURIType(tdoParamAction, *rstStruct.Action);
  }
  if (!(rstStruct.SoapAction).IsNull()) // Optional
  {
    rdoParam.CreateChild("SoapAction", *rstStruct.SoapAction);
  }
  for (anyAttribute::const_iterator itAttr = (rstStruct.lsAnyAttributes).begin(),
       itAttrEnd = (rstStruct.lsAnyAttributes).end(); itAttr != itAttrEnd; ++itAttr)
  {
    rdoParam.CreateChild("lsAnyAttributes").AppendAttribute(const_cast<Attribute&>(*itAttr));
  }
  return rdoParam;
}

const DataObject& operator>>(const DataObject& rdoParam, struct ::ProblemActionType& rstStruct)
{
  const staff::DataObject& rdoParamAction = rdoParam.GetChildByLocalNameOpt("Action");
  if (!rdoParamAction.IsNull()) // optional
  {
    DeserializeTypedef_AttributedURIType(rdoParamAction, *rstStruct.Action);
  }
  const staff::DataObject& rdoParamSoapAction = rdoParam.GetChildByLocalNameOpt("SoapAction");
  if (!rdoParamSoapAction.IsNull()) // optional
  {
    rdoParamSoapAction.GetValue(*rstStruct.SoapAction);
  }
  for (staff::DataObject::ConstAttributeIterator itAttr = (rdoParam).AttributeBegin(),
       itAttrEnd = (rdoParam).AttributeEnd(); itAttr != itAttrEnd; ++itAttr)
  {
    (rstStruct.lsAnyAttributes).push_back(*itAttr);
  }
  return rdoParam;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef serializators

DataObject& SerializeTypedef_RelationshipTypeOpenEnum(DataObject& rdoParam, const ::RelationshipTypeOpenEnum& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


DataObject& SerializeTypedef_FaultCodesOpenEnumType(DataObject& rdoParam, const ::FaultCodesOpenEnumType& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


DataObject& SerializeTypedef_AttributedURIType(DataObject& rdoParam, const ::AttributedURIType& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


DataObject& SerializeTypedef_AttributedUnsignedLongType(DataObject& rdoParam, const ::AttributedUnsignedLongType& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


DataObject& SerializeTypedef_AttributedQNameType(DataObject& rdoParam, const ::AttributedQNameType& rtType)
{
  rdoParam.SetValue(rtType);
  rdoParam.SetNamespaceUriGenPrefix("http://www.w3.org/2005/08/addressing", true);
  rdoParam.SetElementFormDefaultQualified(true);
  rdoParam.SetAttributeFormDefaultQualified(false);
  return rdoParam;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
const DataObject& DeserializeTypedef_RelationshipTypeOpenEnum(const DataObject& rdoParam, ::RelationshipTypeOpenEnum& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_FaultCodesOpenEnumType(const DataObject& rdoParam, ::FaultCodesOpenEnumType& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_AttributedURIType(const DataObject& rdoParam, ::AttributedURIType& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_AttributedUnsignedLongType(const DataObject& rdoParam, ::AttributedUnsignedLongType& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

const DataObject& DeserializeTypedef_AttributedQNameType(const DataObject& rdoParam, ::AttributedQNameType& rtType)
{
  rdoParam.GetValue(rtType);
  return rdoParam;
}

}


